{
  "api/IceRpc.AdapterAlreadyActiveException.html": {
    "href": "api/IceRpc.AdapterAlreadyActiveException.html",
    "title": "Class AdapterAlreadyActiveException | IceRPC",
    "keywords": "Class AdapterAlreadyActiveException This exception is thrown when a server application tries to register server addresses for an object adapter that is already active. Inheritance object Exception DispatchException SliceException AdapterAlreadyActiveException Implements ISerializable Inherited Members SliceException.Encode(ref SliceEncoder) DispatchException.ConvertToUnhandled DispatchException.StatusCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.Locator.dll Syntax [TypeId(\"::Ice::AdapterAlreadyActiveException\")] public class AdapterAlreadyActiveException : SliceException, ISerializable Constructors AdapterAlreadyActiveException(ref SliceDecoder, string?) Declaration public AdapterAlreadyActiveException(ref SliceDecoder decoder, string? message = null) Parameters Type Name Description SliceDecoder decoder string message AdapterAlreadyActiveException(string?, Exception?) Constructs a new instance of AdapterAlreadyActiveException. Declaration public AdapterAlreadyActiveException(string? message = null, Exception? innerException = null) Parameters Type Name Description string message A message that describes the exception. Exception innerException The exception that is the cause of the current exception. Fields SliceTypeId Declaration public static readonly string SliceTypeId Field Value Type Description string Methods DecodeCore(ref SliceDecoder) Declaration protected override void DecodeCore(ref SliceDecoder decoder) Parameters Type Name Description SliceDecoder decoder Overrides SliceException.DecodeCore(ref SliceDecoder) EncodeCore(ref SliceEncoder) Declaration protected override void EncodeCore(ref SliceEncoder encoder) Parameters Type Name Description SliceEncoder encoder Overrides SliceException.EncodeCore(ref SliceEncoder) Implements System.Runtime.Serialization.ISerializable"
  },
  "api/IceRpc.AdapterNotFoundException.html": {
    "href": "api/IceRpc.AdapterNotFoundException.html",
    "title": "Class AdapterNotFoundException | IceRPC",
    "keywords": "Class AdapterNotFoundException This exception is thrown when an object adapter was not found. Inheritance object Exception DispatchException SliceException AdapterNotFoundException Implements ISerializable Inherited Members SliceException.Encode(ref SliceEncoder) DispatchException.ConvertToUnhandled DispatchException.StatusCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.Locator.dll Syntax [TypeId(\"::Ice::AdapterNotFoundException\")] public class AdapterNotFoundException : SliceException, ISerializable Constructors AdapterNotFoundException(ref SliceDecoder, string?) Declaration public AdapterNotFoundException(ref SliceDecoder decoder, string? message = null) Parameters Type Name Description SliceDecoder decoder string message AdapterNotFoundException(string?, Exception?) Constructs a new instance of AdapterNotFoundException. Declaration public AdapterNotFoundException(string? message = null, Exception? innerException = null) Parameters Type Name Description string message A message that describes the exception. Exception innerException The exception that is the cause of the current exception. Fields SliceTypeId Declaration public static readonly string SliceTypeId Field Value Type Description string Methods DecodeCore(ref SliceDecoder) Declaration protected override void DecodeCore(ref SliceDecoder decoder) Parameters Type Name Description SliceDecoder decoder Overrides SliceException.DecodeCore(ref SliceDecoder) EncodeCore(ref SliceEncoder) Declaration protected override void EncodeCore(ref SliceEncoder encoder) Parameters Type Name Description SliceEncoder encoder Overrides SliceException.EncodeCore(ref SliceEncoder) Implements System.Runtime.Serialization.ISerializable"
  },
  "api/IceRpc.Builder.DeadlineDispatcherBuilderExtensions.html": {
    "href": "api/IceRpc.Builder.DeadlineDispatcherBuilderExtensions.html",
    "title": "Class DeadlineDispatcherBuilderExtensions | IceRPC",
    "keywords": "Class DeadlineDispatcherBuilderExtensions This class provides extension methods to add the deadline middleware to a IDispatcherBuilder. Inheritance object DeadlineDispatcherBuilderExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Builder Assembly: IceRpc.Deadline.dll Syntax public static class DeadlineDispatcherBuilderExtensions Methods UseDeadline(IDispatcherBuilder) Adds a DeadlineMiddleware to this dispatcher builder. Declaration public static IDispatcherBuilder UseDeadline(this IDispatcherBuilder builder) Parameters Type Name Description IDispatcherBuilder builder The builder being configured. Returns Type Description IDispatcherBuilder The builder being configured."
  },
  "api/IceRpc.Builder.DeadlineInvokerBuilderExtensions.html": {
    "href": "api/IceRpc.Builder.DeadlineInvokerBuilderExtensions.html",
    "title": "Class DeadlineInvokerBuilderExtensions | IceRPC",
    "keywords": "Class DeadlineInvokerBuilderExtensions This class provides extension methods to add the deadline interceptor to an IInvokerBuilder. Inheritance object DeadlineInvokerBuilderExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Builder Assembly: IceRpc.Deadline.dll Syntax public static class DeadlineInvokerBuilderExtensions Methods UseDeadline(IInvokerBuilder, TimeSpan, bool) Adds a DeadlineInterceptor to the builder. Declaration public static IInvokerBuilder UseDeadline(this IInvokerBuilder builder, TimeSpan defaultTimeout, bool alwaysEnforceDeadline = false) Parameters Type Name Description IInvokerBuilder builder The builder being configured. TimeSpan defaultTimeout The default timeout. bool alwaysEnforceDeadline When true and the request carries a deadline, the interceptor always creates a cancellation token source to enforce this deadline. When false and the request carries a deadline, the interceptor creates a cancellation token source to enforce this deadline only when the invocation's cancellation token cannot be canceled. The default value is false. Returns Type Description IInvokerBuilder The builder being configured. UseDeadline(IInvokerBuilder) Adds a DeadlineInterceptor with an infinite default timeout to the builder. Declaration public static IInvokerBuilder UseDeadline(this IInvokerBuilder builder) Parameters Type Name Description IInvokerBuilder builder The builder being configured. Returns Type Description IInvokerBuilder The builder being configured."
  },
  "api/IceRpc.Builder.DispatcherBuilderExtensions.html": {
    "href": "api/IceRpc.Builder.DispatcherBuilderExtensions.html",
    "title": "Class DispatcherBuilderExtensions | IceRPC",
    "keywords": "Class DispatcherBuilderExtensions This class provide extension methods to add built-in middleware to a IDispatcherBuilder. Inheritance object DispatcherBuilderExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Builder Assembly: IceRpc.dll Syntax public static class DispatcherBuilderExtensions Methods Map<TService>(IDispatcherBuilder) Registers a route to a service that uses the service default path as the route path. If there is an existing route at the same path, it is replaced. Declaration public static IDispatcherBuilder Map<TService>(this IDispatcherBuilder builder) where TService : notnull Parameters Type Name Description IDispatcherBuilder builder The builder being configured. Returns Type Description IDispatcherBuilder This builder. Type Parameters Name Description TService The type of the DI service that will handle the requests. The implementation of this service must implement IDispatcher. UseDispatchInformation(IDispatcherBuilder) Adds a middleware that creates and inserts the IDispatchInformationFeature feature in all requests. Declaration public static IDispatcherBuilder UseDispatchInformation(this IDispatcherBuilder builder) Parameters Type Name Description IDispatcherBuilder builder The builder being configured. Returns Type Description IDispatcherBuilder The builder. UseFeature<TFeature>(IDispatcherBuilder, TFeature) Adds a middleware that sets a feature in all requests. Declaration public static IDispatcherBuilder UseFeature<TFeature>(this IDispatcherBuilder builder, TFeature feature) Parameters Type Name Description IDispatcherBuilder builder The builder being configured. TFeature feature The value of the feature to set in all requests. Returns Type Description IDispatcherBuilder The builder. Type Parameters Name Description TFeature The type of the feature."
  },
  "api/IceRpc.Builder.html": {
    "href": "api/IceRpc.Builder.html",
    "title": "Namespace IceRpc.Builder | IceRPC",
    "keywords": "Namespace IceRpc.Builder Classes DeadlineDispatcherBuilderExtensions This class provides extension methods to add the deadline middleware to a IDispatcherBuilder. DeadlineInvokerBuilderExtensions This class provides extension methods to add the deadline interceptor to an IInvokerBuilder. DispatcherBuilderExtensions This class provide extension methods to add built-in middleware to a IDispatcherBuilder. InvokerBuilderExtensions This class provide extension methods for interface IInvokerBuilder. LocatorInvokerBuilderExtensions This class provides extension methods to install the locator interceptor in an IInvokerBuilder. LoggerDispatcherBuilderExtensions This class provides extension methods to add the logger middleware to a IDispatcherBuilder. LoggerInvokerBuilderExtensions This class provides extension methods to add the logger interceptor to an IInvokerBuilder. MetricsDispatcherBuilderExtensions This class provides extension methods to add the metrics middleware to a IDispatcherBuilder. MetricsInvokerBuilderExtensions This class provides extension methods to add the metrics interceptor to an IInvokerBuilder. MiddlewareDispatcherBuilderExtensions Extension methods for IDispatcherBuilder. RequestContextDispatcherBuilderExtensions This class provides extension methods to add the request context middleware to a IDispatcherBuilder. RequestContextInvokerBuilderExtensions This class provides extension methods to add the request context interceptor to an IInvokerBuilder. RetryInvokerBuilderExtensions This class provides extension methods to add the retry interceptor to a IInvokerBuilder. TelemetryDispatcherBuilderExtensions This class provides extension methods to add the telemetry middleware to a IDispatcherBuilder. TelemetryInvokerBuilderExtensions This class provide extension methods to add the telemetry interceptor to an IInvokerBuilder. Interfaces IDispatcherBuilder Provides the mechanism to configure a dispatcher when using Dependency Injection (DI). Each request will be dispatched in its own scope. IInvokerBuilder Provides the mechanism to configure an invoker when using Dependency Injection (DI)."
  },
  "api/IceRpc.Builder.IDispatcherBuilder.html": {
    "href": "api/IceRpc.Builder.IDispatcherBuilder.html",
    "title": "Interface IDispatcherBuilder | IceRPC",
    "keywords": "Interface IDispatcherBuilder Provides the mechanism to configure a dispatcher when using Dependency Injection (DI). Each request will be dispatched in its own scope. Namespace: IceRpc.Builder Assembly: IceRpc.dll Syntax public interface IDispatcherBuilder Properties ServiceProvider Gets the service provider. Declaration IServiceProvider ServiceProvider { get; } Property Value Type Description IServiceProvider The System.IServiceProvider. Methods Map<TService>(string) Registers a route with a path. If there is an existing route at the same path, it is replaced. Declaration IDispatcherBuilder Map<TService>(string path) where TService : notnull Parameters Type Name Description string path The path of this route. It must match exactly the path of the request. In particular, it must start with a /. Returns Type Description IDispatcherBuilder This builder. Type Parameters Name Description TService The type of the DI service that will handle the requests. The implementation of this service must implement IDispatcher. Exceptions Type Condition System.FormatException Thrown if path is not a valid path. Mount<TService>(string) Registers a route with a prefix. If there is an existing route at the same prefix, it is replaced. Declaration IDispatcherBuilder Mount<TService>(string prefix) where TService : notnull Parameters Type Name Description string prefix The prefix of this route. This prefix will be compared with the start of the path of the request. Returns Type Description IDispatcherBuilder This builder. Type Parameters Name Description TService The type of the DI service that will handle the requests. The implementation of this service must implement IDispatcher. Exceptions Type Condition System.FormatException Thrown if prefix is not a valid path. Route(string, Action<IDispatcherBuilder>) Creates a sub-router, configures this sub-router and mounts it at the given prefix. Declaration void Route(string prefix, Action<IDispatcherBuilder> configure) Parameters Type Name Description string prefix The prefix of the route to the sub-router. Action<IDispatcherBuilder> configure A delegate that configures the new sub-router. Use(Func<IDispatcher, IDispatcher>) Registers a middleware. Declaration IDispatcherBuilder Use(Func<IDispatcher, IDispatcher> middleware) Parameters Type Name Description Func<IDispatcher, IDispatcher> middleware The middleware to register. Returns Type Description IDispatcherBuilder This builder. Extension Methods DispatcherBuilderExtensions.Map<TService>(IDispatcherBuilder) DispatcherBuilderExtensions.UseDispatchInformation(IDispatcherBuilder) DispatcherBuilderExtensions.UseFeature<TFeature>(IDispatcherBuilder, TFeature)"
  },
  "api/IceRpc.Builder.IInvokerBuilder.html": {
    "href": "api/IceRpc.Builder.IInvokerBuilder.html",
    "title": "Interface IInvokerBuilder | IceRPC",
    "keywords": "Interface IInvokerBuilder Provides the mechanism to configure an invoker when using Dependency Injection (DI). Namespace: IceRpc.Builder Assembly: IceRpc.dll Syntax public interface IInvokerBuilder Properties ServiceProvider Gets the service provider. Declaration IServiceProvider ServiceProvider { get; } Property Value Type Description IServiceProvider The System.IServiceProvider. Methods Into(IInvoker) Sets the last invoker of the invocation pipeline. Declaration IInvokerBuilder Into(IInvoker lastInvoker) Parameters Type Name Description IInvoker lastInvoker The last invoker. Returns Type Description IInvokerBuilder This builder. Use(Func<IInvoker, IInvoker>) Registers an interceptor. Declaration IInvokerBuilder Use(Func<IInvoker, IInvoker> interceptor) Parameters Type Name Description Func<IInvoker, IInvoker> interceptor The interceptor to register. Returns Type Description IInvokerBuilder This builder. Extension Methods InvokerBuilderExtensions.Into<TService>(IInvokerBuilder) InvokerBuilderExtensions.UseFeature<TFeature>(IInvokerBuilder, TFeature)"
  },
  "api/IceRpc.Builder.InvokerBuilderExtensions.html": {
    "href": "api/IceRpc.Builder.InvokerBuilderExtensions.html",
    "title": "Class InvokerBuilderExtensions | IceRPC",
    "keywords": "Class InvokerBuilderExtensions This class provide extension methods for interface IInvokerBuilder. Inheritance object InvokerBuilderExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Builder Assembly: IceRpc.dll Syntax public static class InvokerBuilderExtensions Methods Into<TService>(IInvokerBuilder) Sets the last invoker of the invocation pipeline to be a DI service managed by the service provider. Declaration public static IInvokerBuilder Into<TService>(this IInvokerBuilder builder) where TService : IInvoker Parameters Type Name Description IInvokerBuilder builder The builder being configured. Returns Type Description IInvokerBuilder This builder. Type Parameters Name Description TService The type of the DI service. UseFeature<TFeature>(IInvokerBuilder, TFeature) Adds an interceptor that sets a feature in all requests. Declaration public static IInvokerBuilder UseFeature<TFeature>(this IInvokerBuilder builder, TFeature feature) Parameters Type Name Description IInvokerBuilder builder The builder being configured. TFeature feature The value of the feature to set. Returns Type Description IInvokerBuilder The builder. Type Parameters Name Description TFeature The type of the feature."
  },
  "api/IceRpc.Builder.LocatorInvokerBuilderExtensions.html": {
    "href": "api/IceRpc.Builder.LocatorInvokerBuilderExtensions.html",
    "title": "Class LocatorInvokerBuilderExtensions | IceRPC",
    "keywords": "Class LocatorInvokerBuilderExtensions This class provides extension methods to install the locator interceptor in an IInvokerBuilder. Inheritance object LocatorInvokerBuilderExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Builder Assembly: IceRpc.Locator.dll Syntax public static class LocatorInvokerBuilderExtensions Methods UseLocator(IInvokerBuilder) Adds a LocatorInterceptor to the builder. This interceptor relies on the LocatorLocationResolver service managed by the service provider. Declaration public static IInvokerBuilder UseLocator(this IInvokerBuilder builder) Parameters Type Name Description IInvokerBuilder builder The builder being configured. Returns Type Description IInvokerBuilder The builder being configured."
  },
  "api/IceRpc.Builder.LoggerDispatcherBuilderExtensions.html": {
    "href": "api/IceRpc.Builder.LoggerDispatcherBuilderExtensions.html",
    "title": "Class LoggerDispatcherBuilderExtensions | IceRPC",
    "keywords": "Class LoggerDispatcherBuilderExtensions This class provides extension methods to add the logger middleware to a IDispatcherBuilder. Inheritance object LoggerDispatcherBuilderExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Builder Assembly: IceRpc.Logger.dll Syntax public static class LoggerDispatcherBuilderExtensions Methods UseLogger(IDispatcherBuilder) Adds a LoggerMiddleware to this dispatcher builder. This interceptor relies on the Microsoft.Extensions.Logging.ILogger`1 service managed by the service provider. Declaration public static IDispatcherBuilder UseLogger(this IDispatcherBuilder builder) Parameters Type Name Description IDispatcherBuilder builder The builder being configured. Returns Type Description IDispatcherBuilder The builder being configured."
  },
  "api/IceRpc.Builder.LoggerInvokerBuilderExtensions.html": {
    "href": "api/IceRpc.Builder.LoggerInvokerBuilderExtensions.html",
    "title": "Class LoggerInvokerBuilderExtensions | IceRPC",
    "keywords": "Class LoggerInvokerBuilderExtensions This class provides extension methods to add the logger interceptor to an IInvokerBuilder. Inheritance object LoggerInvokerBuilderExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Builder Assembly: IceRpc.Logger.dll Syntax public static class LoggerInvokerBuilderExtensions Methods UseLogger(IInvokerBuilder) Adds a LoggerInterceptor to the builder. This interceptor relies on the Microsoft.Extensions.Logging.ILogger`1 service managed by the service provider. Declaration public static IInvokerBuilder UseLogger(this IInvokerBuilder builder) Parameters Type Name Description IInvokerBuilder builder The builder being configured. Returns Type Description IInvokerBuilder The builder being configured."
  },
  "api/IceRpc.Builder.MetricsDispatcherBuilderExtensions.html": {
    "href": "api/IceRpc.Builder.MetricsDispatcherBuilderExtensions.html",
    "title": "Class MetricsDispatcherBuilderExtensions | IceRPC",
    "keywords": "Class MetricsDispatcherBuilderExtensions This class provides extension methods to add the metrics middleware to a IDispatcherBuilder. Inheritance object MetricsDispatcherBuilderExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Builder Assembly: IceRpc.Metrics.dll Syntax public static class MetricsDispatcherBuilderExtensions Methods UseMetrics(IDispatcherBuilder) Adds a MetricsMiddleware to this dispatcher builder. Declaration public static IDispatcherBuilder UseMetrics(this IDispatcherBuilder builder) Parameters Type Name Description IDispatcherBuilder builder The builder being configured. Returns Type Description IDispatcherBuilder The builder being configured."
  },
  "api/IceRpc.Builder.MetricsInvokerBuilderExtensions.html": {
    "href": "api/IceRpc.Builder.MetricsInvokerBuilderExtensions.html",
    "title": "Class MetricsInvokerBuilderExtensions | IceRPC",
    "keywords": "Class MetricsInvokerBuilderExtensions This class provides extension methods to add the metrics interceptor to an IInvokerBuilder. Inheritance object MetricsInvokerBuilderExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Builder Assembly: IceRpc.Metrics.dll Syntax public static class MetricsInvokerBuilderExtensions Methods UseMetrics(IInvokerBuilder) Adds a MetricsInterceptor to the builder. Declaration public static IInvokerBuilder UseMetrics(this IInvokerBuilder builder) Parameters Type Name Description IInvokerBuilder builder The builder being configured. Returns Type Description IInvokerBuilder The builder being configured."
  },
  "api/IceRpc.Builder.MiddlewareDispatcherBuilderExtensions.html": {
    "href": "api/IceRpc.Builder.MiddlewareDispatcherBuilderExtensions.html",
    "title": "Class MiddlewareDispatcherBuilderExtensions | IceRPC",
    "keywords": "Class MiddlewareDispatcherBuilderExtensions Extension methods for IDispatcherBuilder. Inheritance object MiddlewareDispatcherBuilderExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Builder Assembly: IceRpc.Extensions.DependencyInjection.dll Syntax public static class MiddlewareDispatcherBuilderExtensions Methods UseMiddleware<TMiddleware, TDep>(IDispatcherBuilder) Registers a middleware with one service dependency in its DispatchAsync method. Such a middleware implements IMiddleware<TDep> and provides a single constructor that accepts a dispatcher (the next dispatcher) followed by 0 or more DI-injected services. Declaration public static IDispatcherBuilder UseMiddleware<TMiddleware, TDep>(this IDispatcherBuilder builder) where TMiddleware : IMiddleware<TDep> where TDep : notnull Parameters Type Name Description IDispatcherBuilder builder This dispatcher builder. Returns Type Description IDispatcherBuilder The dispatcher builder. Type Parameters Name Description TMiddleware The type of the middleware to register. TDep The type of the service dependency. UseMiddleware<TMiddleware, TMiddlewareOptions, TDep>(IDispatcherBuilder, TMiddlewareOptions) Registers a middleware with an explicit Options parameter and with one service dependency in its DispatchAsync method. Such a middleware implements IMiddleware<TDep> and provides a single constructor that accepts a dispatcher (the next dispatcher) followed by an instance of Microsoft.Extensions.Options.IOptions`1 and then 0 or more DI-injected services. Declaration public static IDispatcherBuilder UseMiddleware<TMiddleware, TMiddlewareOptions, TDep>(this IDispatcherBuilder builder, TMiddlewareOptions options) where TMiddleware : IMiddleware<TDep> where TMiddlewareOptions : class where TDep : notnull Parameters Type Name Description IDispatcherBuilder builder This dispatcher builder. TMiddlewareOptions options The options to give to the constructor of the middleware. Returns Type Description IDispatcherBuilder The dispatcher builder. Type Parameters Name Description TMiddleware The type of the middleware to register. TMiddlewareOptions The type of the Options parameter of this middleware. TDep The type of the service dependency. UseMiddleware<TMiddleware, TDep1, TDep2>(IDispatcherBuilder) Registers a middleware with 2 service dependencies in its DispatchAsync method. Such a middleware implements IMiddleware<TDep1, TDep2> and provides a single constructor that accepts a dispatcher (the next dispatcher) followed by 0 or more DI-injected services. Declaration public static IDispatcherBuilder UseMiddleware<TMiddleware, TDep1, TDep2>(this IDispatcherBuilder builder) where TMiddleware : IMiddleware<TDep1, TDep2> where TDep1 : notnull where TDep2 : notnull Parameters Type Name Description IDispatcherBuilder builder This dispatcher builder. Returns Type Description IDispatcherBuilder The dispatcher builder. Type Parameters Name Description TMiddleware The type of the middleware to register. TDep1 The type of the first service dependency. TDep2 The type of the second service dependency. UseMiddleware<TMiddleware, TMiddlewareOptions, TDep1, TDep2>(IDispatcherBuilder, TMiddlewareOptions) Registers a middleware with an Options parameter and with 2 service dependencies in its DispatchAsync method. Such a middleware implements IMiddleware<TDep1, TDep2> and provides a single constructor that accepts a dispatcher (the next dispatcher) followed by an instance of Microsoft.Extensions.Options.IOptions`1 and then 0 or more DI-injected services. Declaration public static IDispatcherBuilder UseMiddleware<TMiddleware, TMiddlewareOptions, TDep1, TDep2>(this IDispatcherBuilder builder, TMiddlewareOptions options) where TMiddleware : IMiddleware<TDep1, TDep2> where TMiddlewareOptions : class where TDep1 : notnull where TDep2 : notnull Parameters Type Name Description IDispatcherBuilder builder This dispatcher builder. TMiddlewareOptions options The options to give to the constructor of the middleware. Returns Type Description IDispatcherBuilder The dispatcher builder. Type Parameters Name Description TMiddleware The type of the middleware to register. TMiddlewareOptions The type of Options parameter of this middleware. TDep1 The type of the first service dependency. TDep2 The type of the second service dependency. UseMiddleware<TMiddleware, TDep1, TDep2, TDep3>(IDispatcherBuilder) Registers a middleware with 3 service dependencies in its DispatchAsync method. Such a middleware implements IMiddleware<TDep1, TDep2, TDep3> and provides a single constructor that accepts a dispatcher (the next dispatcher) followed by 0 or more DI-injected services. Declaration public static IDispatcherBuilder UseMiddleware<TMiddleware, TDep1, TDep2, TDep3>(this IDispatcherBuilder builder) where TMiddleware : IMiddleware<TDep1, TDep2, TDep3> where TDep1 : notnull where TDep2 : notnull where TDep3 : notnull Parameters Type Name Description IDispatcherBuilder builder This dispatcher builder. Returns Type Description IDispatcherBuilder The dispatcher builder. Type Parameters Name Description TMiddleware The type of the middleware to register. TDep1 The type of the first service dependency. TDep2 The type of the second service dependency. TDep3 The type of the third service dependency. UseMiddleware<TMiddleware, TMiddlewareOptions, TDep1, TDep2, TDep3>(IDispatcherBuilder, TMiddlewareOptions) Registers a middleware with an Options parameter and with 3 service dependencies in its DispatchAsync method. Such a middleware implements IMiddleware<TDep1, TDep2, TDep3> and provides a single constructor that accepts a dispatcher (the next dispatcher) followed by an instance of Microsoft.Extensions.Options.IOptions`1 and then 0 or more DI-injected services. Declaration public static IDispatcherBuilder UseMiddleware<TMiddleware, TMiddlewareOptions, TDep1, TDep2, TDep3>(this IDispatcherBuilder builder, TMiddlewareOptions options) where TMiddleware : IMiddleware<TDep1, TDep2, TDep3> where TMiddlewareOptions : class where TDep1 : notnull where TDep2 : notnull where TDep3 : notnull Parameters Type Name Description IDispatcherBuilder builder This dispatcher builder. TMiddlewareOptions options The options to give to the constructor of the middleware. Returns Type Description IDispatcherBuilder The dispatcher builder. Type Parameters Name Description TMiddleware The type of the middleware to register. TMiddlewareOptions The type of Options parameter of this middleware. TDep1 The type of the first service dependency. TDep2 The type of the second service dependency. TDep3 The type of the third service dependency."
  },
  "api/IceRpc.Builder.RequestContextDispatcherBuilderExtensions.html": {
    "href": "api/IceRpc.Builder.RequestContextDispatcherBuilderExtensions.html",
    "title": "Class RequestContextDispatcherBuilderExtensions | IceRPC",
    "keywords": "Class RequestContextDispatcherBuilderExtensions This class provides extension methods to add the request context middleware to a IDispatcherBuilder. Inheritance object RequestContextDispatcherBuilderExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Builder Assembly: IceRpc.RequestContext.dll Syntax public static class RequestContextDispatcherBuilderExtensions Methods UseRequestContext(IDispatcherBuilder) Adds a RequestContextMiddleware to this dispatcher builder. Declaration public static IDispatcherBuilder UseRequestContext(this IDispatcherBuilder builder) Parameters Type Name Description IDispatcherBuilder builder The builder being configured. Returns Type Description IDispatcherBuilder The builder being configured."
  },
  "api/IceRpc.Builder.RequestContextInvokerBuilderExtensions.html": {
    "href": "api/IceRpc.Builder.RequestContextInvokerBuilderExtensions.html",
    "title": "Class RequestContextInvokerBuilderExtensions | IceRPC",
    "keywords": "Class RequestContextInvokerBuilderExtensions This class provides extension methods to add the request context interceptor to an IInvokerBuilder. Inheritance object RequestContextInvokerBuilderExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Builder Assembly: IceRpc.RequestContext.dll Syntax public static class RequestContextInvokerBuilderExtensions Methods UseRequestContext(IInvokerBuilder) Adds a RequestContextInterceptor to the builder. Declaration public static IInvokerBuilder UseRequestContext(this IInvokerBuilder builder) Parameters Type Name Description IInvokerBuilder builder The builder being configured. Returns Type Description IInvokerBuilder The builder being configured."
  },
  "api/IceRpc.Builder.RetryInvokerBuilderExtensions.html": {
    "href": "api/IceRpc.Builder.RetryInvokerBuilderExtensions.html",
    "title": "Class RetryInvokerBuilderExtensions | IceRPC",
    "keywords": "Class RetryInvokerBuilderExtensions This class provides extension methods to add the retry interceptor to a IInvokerBuilder. Inheritance object RetryInvokerBuilderExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Builder Assembly: IceRpc.Retry.dll Syntax public static class RetryInvokerBuilderExtensions Methods UseRetry(IInvokerBuilder, RetryOptions) Adds a RetryInterceptor to the builder. This interceptor relies on the Microsoft.Extensions.Logging.ILoggerFactory service managed by the service provider. Declaration public static IInvokerBuilder UseRetry(this IInvokerBuilder builder, RetryOptions options) Parameters Type Name Description IInvokerBuilder builder The builder being configured. RetryOptions options The options to configure the RetryInterceptor. Returns Type Description IInvokerBuilder The builder being configured. UseRetry(IInvokerBuilder) Adds a RetryInterceptor that uses the default RetryOptions. Declaration public static IInvokerBuilder UseRetry(this IInvokerBuilder builder) Parameters Type Name Description IInvokerBuilder builder The pipeline being configured. Returns Type Description IInvokerBuilder The pipeline being configured."
  },
  "api/IceRpc.Builder.TelemetryDispatcherBuilderExtensions.html": {
    "href": "api/IceRpc.Builder.TelemetryDispatcherBuilderExtensions.html",
    "title": "Class TelemetryDispatcherBuilderExtensions | IceRPC",
    "keywords": "Class TelemetryDispatcherBuilderExtensions This class provides extension methods to add the telemetry middleware to a IDispatcherBuilder. Inheritance object TelemetryDispatcherBuilderExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Builder Assembly: IceRpc.Telemetry.dll Syntax public static class TelemetryDispatcherBuilderExtensions Methods UseTelemetry(IDispatcherBuilder) Adds a TelemetryMiddleware to the dispatcher builder. Declaration public static IDispatcherBuilder UseTelemetry(this IDispatcherBuilder builder) Parameters Type Name Description IDispatcherBuilder builder The builder being configured. Returns Type Description IDispatcherBuilder The builder being configured."
  },
  "api/IceRpc.Builder.TelemetryInvokerBuilderExtensions.html": {
    "href": "api/IceRpc.Builder.TelemetryInvokerBuilderExtensions.html",
    "title": "Class TelemetryInvokerBuilderExtensions | IceRPC",
    "keywords": "Class TelemetryInvokerBuilderExtensions This class provide extension methods to add the telemetry interceptor to an IInvokerBuilder. Inheritance object TelemetryInvokerBuilderExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Builder Assembly: IceRpc.Telemetry.dll Syntax public static class TelemetryInvokerBuilderExtensions Methods UseTelemetry(IInvokerBuilder) Adds the TelemetryInterceptor to the builder. This interceptor relies on the System.Diagnostics.ActivitySource service managed by the service provider. Declaration public static IInvokerBuilder UseTelemetry(this IInvokerBuilder builder) Parameters Type Name Description IInvokerBuilder builder The builder being configured. Returns Type Description IInvokerBuilder The builder being configured."
  },
  "api/IceRpc.ClientConnection.html": {
    "href": "api/IceRpc.ClientConnection.html",
    "title": "Class ClientConnection | IceRPC",
    "keywords": "Class ClientConnection Represents a client connection used to send requests to a server and receive the corresponding responses. This client connection can also dispatch requests (\"callbacks\") received from the server. The client connection's underlying connection is recreated and reconnected automatically when it's closed by any event other than a call to ShutdownAsync(CancellationToken) or DisposeAsync(). Inheritance object ClientConnection Implements IInvoker IAsyncDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public sealed class ClientConnection : IInvoker, IAsyncDisposable Constructors ClientConnection(ClientConnectionOptions, IDuplexClientTransport?, IMultiplexedClientTransport?, ILogger?) Constructs a client connection. Declaration public ClientConnection(ClientConnectionOptions options, IDuplexClientTransport? duplexClientTransport = null, IMultiplexedClientTransport? multiplexedClientTransport = null, ILogger? logger = null) Parameters Type Name Description ClientConnectionOptions options The client connection options. IDuplexClientTransport duplexClientTransport The duplex client transport. null is equivalent to Default. IMultiplexedClientTransport multiplexedClientTransport The multiplexed client transport. null is equivalent to Default. ILogger logger The logger. null is equivalent to Microsoft.Extensions.Logging.Abstractions.NullLogger.Instance. ClientConnection(ServerAddress, SslClientAuthenticationOptions?, IDuplexClientTransport?, IMultiplexedClientTransport?, ILogger?) Constructs a client connection with the specified server address and client authentication options. All other properties use the ClientConnectionOptions defaults. Declaration public ClientConnection(ServerAddress serverAddress, SslClientAuthenticationOptions? clientAuthenticationOptions = null, IDuplexClientTransport? duplexClientTransport = null, IMultiplexedClientTransport? multiplexedClientTransport = null, ILogger? logger = null) Parameters Type Name Description ServerAddress serverAddress The connection's server address. SslClientAuthenticationOptions clientAuthenticationOptions The SSL client authentication options. When not null, ConnectAsync(CancellationToken) will either establish a secure connection or fail. IDuplexClientTransport duplexClientTransport The duplex client transport. null is equivalent to Default. IMultiplexedClientTransport multiplexedClientTransport The multiplexed client transport. null is equivalent to Default. ILogger logger The logger. null is equivalent to Microsoft.Extensions.Logging.Abstractions.NullLogger.Instance. ClientConnection(Uri, SslClientAuthenticationOptions?, IDuplexClientTransport?, IMultiplexedClientTransport?, ILogger?) Constructs a client connection with the specified server address URI and client authentication options. All other properties use the ClientConnectionOptions defaults. Declaration public ClientConnection(Uri serverAddressUri, SslClientAuthenticationOptions? clientAuthenticationOptions = null, IDuplexClientTransport? duplexClientTransport = null, IMultiplexedClientTransport? multiplexedClientTransport = null, ILogger? logger = null) Parameters Type Name Description Uri serverAddressUri The connection's server address URI. SslClientAuthenticationOptions clientAuthenticationOptions The SSL client authentication options. When not null, ConnectAsync(CancellationToken) will either establish a secure connection or fail. IDuplexClientTransport duplexClientTransport The duplex client transport. null is equivalent to Default. IMultiplexedClientTransport multiplexedClientTransport The multiplexed client transport. null is equivalent to Default. ILogger logger The logger. null is equivalent to Microsoft.Extensions.Logging.Abstractions.NullLogger.Instance. Methods ConnectAsync(CancellationToken) Establishes the connection. Declaration public Task<TransportConnectionInformation> ConnectAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task<TransportConnectionInformation> A task that provides the TransportConnectionInformation of the transport connection, once this connection is established. This task can also complete with one of the following exceptions: IceRpcExceptionif the connection establishment failed. System.OperationCanceledExceptionif cancellation was requested through the cancellation token. System.TimeoutExceptionif this connection attempt or a previous attempt exceeded ConnectTimeout. Exceptions Type Condition System.InvalidOperationException Thrown if this client connection is shut down or shutting down. System.ObjectDisposedException Thrown if this client connection is disposed. DisposeAsync() Releases all resources allocated by the connection. The connection disposes all the underlying connections it created. Declaration public ValueTask DisposeAsync() Returns Type Description ValueTask A value task that completes when the disposal of all the underlying connections has completed. Remarks The disposal of an underlying connection aborts invocations, cancels dispatches and disposes the underlying transport connection without waiting for the peer. To wait for invocations and dispatches to complete, call ShutdownAsync(CancellationToken) first. If the configured dispatcher does not complete promptly when its cancellation token is canceled, the disposal can hang. InvokeAsync(OutgoingRequest, CancellationToken) Sends an outgoing request and returns the corresponding incoming response. Declaration public Task<IncomingResponse> InvokeAsync(OutgoingRequest request, CancellationToken cancellationToken = default) Parameters Type Name Description OutgoingRequest request The outgoing request being sent. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task<IncomingResponse> The corresponding IncomingResponse. Remarks When request is a two-way request, the returned task will not complete successfully until after the request's Payload is fully sent and the response is received from the peer. When the request is a one-way request, the returned task completes successfully with an empty response when the request's Payload is fully sent. For all requests (one-way and two-way), the sending of the request's PayloadContinuation can continue in a background task after the returned task has completed successfully. ShutdownAsync(CancellationToken) Gracefully shuts down the connection. The shutdown waits for pending invocations and dispatches to complete. Declaration public Task ShutdownAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task A task that completes once the shutdown is complete. This task can also complete with one of the following exceptions: IceRpcExceptionif the connection shutdown failed. System.OperationCanceledExceptionif cancellation was requested through the cancellation token. System.TimeoutExceptionif this shutdown attempt or a previous attempt exceeded ShutdownTimeout. Exceptions Type Condition System.InvalidOperationException Thrown if this connection is already shut down or shutting down. System.ObjectDisposedException Thrown if this connection is disposed. Implements IInvoker System.IAsyncDisposable"
  },
  "api/IceRpc.ClientConnectionOptions.html": {
    "href": "api/IceRpc.ClientConnectionOptions.html",
    "title": "Class ClientConnectionOptions | IceRPC",
    "keywords": "Class ClientConnectionOptions A property bag used to configure a ClientConnection. Inheritance object ConnectionOptions ClientConnectionOptions Implements IEquatable<ConnectionOptions> IEquatable<ClientConnectionOptions> Inherited Members ConnectionOptions.Dispatcher ConnectionOptions.EnableIceIdleCheck ConnectionOptions.IceIdleTimeout ConnectionOptions.InactivityTimeout ConnectionOptions.MaxDispatches ConnectionOptions.MaxIceFrameSize ConnectionOptions.MaxIceRpcBidirectionalStreams ConnectionOptions.MaxIceRpcHeaderSize ConnectionOptions.MaxIceRpcUnidirectionalStreams ConnectionOptions.MinSegmentSize ConnectionOptions.Pool object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: IceRpc Assembly: IceRpc.dll Syntax public sealed record ClientConnectionOptions : ConnectionOptions, IEquatable<ConnectionOptions>, IEquatable<ClientConnectionOptions> Constructors ClientConnectionOptions() Declaration public ClientConnectionOptions() Properties ClientAuthenticationOptions Gets or sets the SSL client authentication options. Declaration public SslClientAuthenticationOptions? ClientAuthenticationOptions { get; set; } Property Value Type Description SslClientAuthenticationOptions The SSL client authentication options. When not null, ConnectAsync(CancellationToken) will either establish a secure connection or fail. ConnectTimeout Gets or sets the connection establishment timeout. Declaration public TimeSpan ConnectTimeout { get; set; } Property Value Type Description TimeSpan The connection establishment timeout. Defaults to 10 seconds. EqualityContract Declaration protected override Type EqualityContract { get; } Property Value Type Description Type Overrides ConnectionOptions.EqualityContract ServerAddress Gets or sets the connection's server address. Declaration public ServerAddress? ServerAddress { get; set; } Property Value Type Description ServerAddress? The connections's server address. If null, the client connection construction will fail. ShutdownTimeout Gets or sets the shutdown timeout. Declaration public TimeSpan ShutdownTimeout { get; set; } Property Value Type Description TimeSpan The shutdown timeout. Defaults to 10 seconds. Methods <Clone>$() Declaration public override ClientConnectionOptions <Clone>$() Returns Type Description ClientConnectionOptions Overrides ConnectionOptions.<Clone>$() Equals(ClientConnectionOptions?) Declaration public bool Equals(ClientConnectionOptions? other) Parameters Type Name Description ClientConnectionOptions other Returns Type Description bool Equals(ConnectionOptions?) Declaration public override sealed bool Equals(ConnectionOptions? other) Parameters Type Name Description ConnectionOptions other Returns Type Description bool Overrides ConnectionOptions.Equals(ConnectionOptions?) Equals(object?) Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ConnectionOptions.Equals(object?) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ConnectionOptions.GetHashCode() PrintMembers(StringBuilder) Declaration protected override bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description bool Overrides ConnectionOptions.PrintMembers(StringBuilder) ToString() Declaration public override string ToString() Returns Type Description string Overrides ConnectionOptions.ToString() Operators operator ==(ClientConnectionOptions?, ClientConnectionOptions?) Declaration public static bool operator ==(ClientConnectionOptions? left, ClientConnectionOptions? right) Parameters Type Name Description ClientConnectionOptions left ClientConnectionOptions right Returns Type Description bool operator !=(ClientConnectionOptions?, ClientConnectionOptions?) Declaration public static bool operator !=(ClientConnectionOptions? left, ClientConnectionOptions? right) Parameters Type Name Description ClientConnectionOptions left ClientConnectionOptions right Returns Type Description bool Implements System.IEquatable<T> System.IEquatable<T>"
  },
  "api/IceRpc.ClientProtocolConnectionFactory.html": {
    "href": "api/IceRpc.ClientProtocolConnectionFactory.html",
    "title": "Class ClientProtocolConnectionFactory | IceRPC",
    "keywords": "Class ClientProtocolConnectionFactory The default implementation of IClientProtocolConnectionFactory. Inheritance object ClientProtocolConnectionFactory Implements IClientProtocolConnectionFactory Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public sealed class ClientProtocolConnectionFactory : IClientProtocolConnectionFactory Constructors ClientProtocolConnectionFactory(ConnectionOptions, SslClientAuthenticationOptions?, IDuplexClientTransport?, IMultiplexedClientTransport?, ILogger?) Constructs a client protocol connection factory. Declaration public ClientProtocolConnectionFactory(ConnectionOptions connectionOptions, SslClientAuthenticationOptions? clientAuthenticationOptions = null, IDuplexClientTransport? duplexClientTransport = null, IMultiplexedClientTransport? multiplexedClientTransport = null, ILogger? logger = null) Parameters Type Name Description ConnectionOptions connectionOptions The connection options. SslClientAuthenticationOptions clientAuthenticationOptions The client authentication options. IDuplexClientTransport duplexClientTransport The duplex client transport. null is equivalent to Default. IMultiplexedClientTransport multiplexedClientTransport The multiplexed client transport. null is equivalent to Default. ILogger logger The logger. null is equivalent to Microsoft.Extensions.Logging.Abstractions.NullLogger.Instance. Methods CreateConnection(ServerAddress) Creates a protocol connection to the specified server address. Declaration public IProtocolConnection CreateConnection(ServerAddress serverAddress) Parameters Type Name Description ServerAddress serverAddress The address of the server. Returns Type Description IProtocolConnection The new protocol connection. Remarks The protocol connection returned by this factory method is not connected. The caller must call ConnectAsync(CancellationToken) exactly once on this connection before calling InvokeAsync(OutgoingRequest, CancellationToken). Implements IClientProtocolConnectionFactory"
  },
  "api/IceRpc.CompressionFormat.html": {
    "href": "api/IceRpc.CompressionFormat.html",
    "title": "Enum CompressionFormat | IceRPC",
    "keywords": "Enum CompressionFormat The compression format of a payload. Namespace: IceRpc Assembly: IceRpc.dll Syntax public enum CompressionFormat : byte Fields Name Description Brotli The payload is compressed using the brotli format. Deflate The payload is compressed using the deflate format. NotCompressed Reserved value which should not be encoded."
  },
  "api/IceRpc.CompressionFormatByteExtensions.html": {
    "href": "api/IceRpc.CompressionFormatByteExtensions.html",
    "title": "Class CompressionFormatByteExtensions | IceRPC",
    "keywords": "Class CompressionFormatByteExtensions Provides an extension method for creating a CompressionFormat from a byte. Inheritance object CompressionFormatByteExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public static class CompressionFormatByteExtensions Methods AsCompressionFormat(byte) Converts a byte into the corresponding CompressionFormat enumerator. Declaration public static CompressionFormat AsCompressionFormat(this byte value) Parameters Type Name Description byte value The value being converted. Returns Type Description CompressionFormat The enumerator."
  },
  "api/IceRpc.CompressionFormatSliceDecoderExtensions.html": {
    "href": "api/IceRpc.CompressionFormatSliceDecoderExtensions.html",
    "title": "Class CompressionFormatSliceDecoderExtensions | IceRPC",
    "keywords": "Class CompressionFormatSliceDecoderExtensions Provide extension methods for encoding CompressionFormat. Inheritance object CompressionFormatSliceDecoderExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public static class CompressionFormatSliceDecoderExtensions Methods DecodeCompressionFormat(ref SliceDecoder) Decodes a CompressionFormat enum. Declaration public static CompressionFormat DecodeCompressionFormat(this ref SliceDecoder decoder) Parameters Type Name Description SliceDecoder decoder The Slice decoder. Returns Type Description CompressionFormat The decoded CompressionFormat enumerator value."
  },
  "api/IceRpc.CompressionFormatSliceEncoderExtensions.html": {
    "href": "api/IceRpc.CompressionFormatSliceEncoderExtensions.html",
    "title": "Class CompressionFormatSliceEncoderExtensions | IceRPC",
    "keywords": "Class CompressionFormatSliceEncoderExtensions Provide extension methods for encoding CompressionFormat. Inheritance object CompressionFormatSliceEncoderExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public static class CompressionFormatSliceEncoderExtensions Methods EncodeCompressionFormat(ref SliceEncoder, CompressionFormat) Encodes a CompressionFormat enum. Declaration public static void EncodeCompressionFormat(this ref SliceEncoder encoder, CompressionFormat value) Parameters Type Name Description SliceEncoder encoder The Slice encoder. CompressionFormat value The CompressionFormat enumerator value to encode."
  },
  "api/IceRpc.ConnectionCache.html": {
    "href": "api/IceRpc.ConnectionCache.html",
    "title": "Class ConnectionCache | IceRPC",
    "keywords": "Class ConnectionCache A connection cache is an invoker that routes outgoing requests to connections it manages. This routing is based on the IServerAddressFeature and the server addresses of the service address carried by each outgoing request. The connection cache keeps at most one active connection per server address. Inheritance object ConnectionCache Implements IInvoker IAsyncDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public sealed class ConnectionCache : IInvoker, IAsyncDisposable Constructors ConnectionCache() Constructs a connection cache using the default options. Declaration public ConnectionCache() ConnectionCache(ConnectionCacheOptions, IDuplexClientTransport?, IMultiplexedClientTransport?, ILogger?) Constructs a connection cache. Declaration public ConnectionCache(ConnectionCacheOptions options, IDuplexClientTransport? duplexClientTransport = null, IMultiplexedClientTransport? multiplexedClientTransport = null, ILogger? logger = null) Parameters Type Name Description ConnectionCacheOptions options The connection cache options. IDuplexClientTransport duplexClientTransport The duplex client transport. null is equivalent to Default. IMultiplexedClientTransport multiplexedClientTransport The multiplexed client transport. null is equivalent to Default. ILogger logger The logger. null is equivalent to Microsoft.Extensions.Logging.Abstractions.NullLogger.Instance. Methods DisposeAsync() Releases all resources allocated by the cache. The cache disposes all the connections it created. Declaration public ValueTask DisposeAsync() Returns Type Description ValueTask A value task that completes when the disposal of all connections created by this cache has completed. This includes connections that were active when this method is called and connections whose disposal was initiated prior to this call. Remarks The disposal of an underlying connection of the cache aborts invocations, cancels dispatches and disposes the underlying transport connection without waiting for the peer. To wait for invocations and dispatches to complete, call ShutdownAsync(CancellationToken) first. If the configured dispatcher does not complete promptly when its cancellation token is canceled, the disposal can hang. InvokeAsync(OutgoingRequest, CancellationToken) Sends an outgoing request and returns the corresponding incoming response. If the request IServerAddressFeature feature is not set, the cache sets it from the server addresses of the target service. It then looks for an active connection. The PreferExistingConnection property influences how the cache selects this active connection. If no active connection can be found, the cache creates a new connection to one of the the request's server addresses from the IServerAddressFeature feature. If the connection establishment to ServerAddress is unsuccessful, the cache will try to establish a connection to one of the AltServerAddresses addresses. Each connection attempt rotates the server addresses of the server address feature, the main server address corresponding to the last attempt failure is appended at the end of AltServerAddresses and the first address from AltServerAddresses replaces ServerAddress. If the cache cannot find an active connection and all the attempts to establish a new connection fail, this method throws the exception from the last attempt. Declaration public Task<IncomingResponse> InvokeAsync(OutgoingRequest request, CancellationToken cancellationToken) Parameters Type Name Description OutgoingRequest request The outgoing request being sent. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task<IncomingResponse> The corresponding IncomingResponse. ShutdownAsync(CancellationToken) Gracefully shuts down all connections created by this cache. Declaration public Task ShutdownAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task A task that completes successfully once the shutdown of all connections created by this cache has completed. This includes connections that were active when this method is called and connections whose shutdown was initiated prior to this call. This task can also complete with one of the following exceptions: IceRpcException with error OperationAborted if the connection cache is disposed while being shut down. System.OperationCanceledExceptionif cancellation was requested through the cancellation token. System.TimeoutExceptionif the shutdown timed out. Exceptions Type Condition System.InvalidOperationException Thrown if this method is called more than once. System.ObjectDisposedException Thrown if the server is disposed. Implements IInvoker System.IAsyncDisposable"
  },
  "api/IceRpc.ConnectionCacheOptions.html": {
    "href": "api/IceRpc.ConnectionCacheOptions.html",
    "title": "Class ConnectionCacheOptions | IceRPC",
    "keywords": "Class ConnectionCacheOptions A property bag used to configure a ConnectionCache. Inheritance object ConnectionCacheOptions Implements IEquatable<ConnectionCacheOptions> Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: IceRpc Assembly: IceRpc.dll Syntax public record ConnectionCacheOptions : IEquatable<ConnectionCacheOptions> Constructors ConnectionCacheOptions() Declaration public ConnectionCacheOptions() ConnectionCacheOptions(ConnectionCacheOptions) Declaration protected ConnectionCacheOptions(ConnectionCacheOptions original) Parameters Type Name Description ConnectionCacheOptions original Properties ClientAuthenticationOptions Gets or sets the SSL client authentication options. Declaration public SslClientAuthenticationOptions? ClientAuthenticationOptions { get; set; } Property Value Type Description SslClientAuthenticationOptions The SSL client authentication options. ConnectionOptions Gets or sets the connection options used for connections created by the connection cache. Declaration public ConnectionOptions ConnectionOptions { get; set; } Property Value Type Description ConnectionOptions The connection options. Defaults to a default constructed ConnectionOptions. ConnectTimeout Gets or sets the connection establishment timeout for connections created by the connection cache. Declaration public TimeSpan ConnectTimeout { get; set; } Property Value Type Description TimeSpan The connection establishment timeout. Defaults to 10 seconds. EqualityContract Declaration protected virtual Type EqualityContract { get; } Property Value Type Description Type PreferExistingConnection Gets or sets a value indicating whether or not the connection cache prefers an active connection over creating a new one. Declaration public bool PreferExistingConnection { get; set; } Property Value Type Description bool When true, the connection cache first checks the server addresses of the target service address: if any matches an active connection it manages, it sends the request over this connection. It does not check connections being connected. When false, the connection cache does not prefer existing connections. ShutdownTimeout Gets or sets the shutdown timeout. This timeout is used when gracefully shutting down a connection managed by the connection cache. Declaration public TimeSpan ShutdownTimeout { get; set; } Property Value Type Description TimeSpan This shutdown timeout. Defaults to 10 seconds. Methods <Clone>$() Declaration public virtual ConnectionCacheOptions <Clone>$() Returns Type Description ConnectionCacheOptions Equals(ConnectionCacheOptions?) Declaration public virtual bool Equals(ConnectionCacheOptions? other) Parameters Type Name Description ConnectionCacheOptions other Returns Type Description bool Equals(object?) Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() PrintMembers(StringBuilder) Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description bool ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Operators operator ==(ConnectionCacheOptions?, ConnectionCacheOptions?) Declaration public static bool operator ==(ConnectionCacheOptions? left, ConnectionCacheOptions? right) Parameters Type Name Description ConnectionCacheOptions left ConnectionCacheOptions right Returns Type Description bool operator !=(ConnectionCacheOptions?, ConnectionCacheOptions?) Declaration public static bool operator !=(ConnectionCacheOptions? left, ConnectionCacheOptions? right) Parameters Type Name Description ConnectionCacheOptions left ConnectionCacheOptions right Returns Type Description bool Implements System.IEquatable<T>"
  },
  "api/IceRpc.ConnectionOptions.html": {
    "href": "api/IceRpc.ConnectionOptions.html",
    "title": "Class ConnectionOptions | IceRPC",
    "keywords": "Class ConnectionOptions A property bag used to configure client and server connections. Inheritance object ConnectionOptions ClientConnectionOptions Implements IEquatable<ConnectionOptions> Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: IceRpc Assembly: IceRpc.dll Syntax public record ConnectionOptions : IEquatable<ConnectionOptions> Constructors ConnectionOptions() Declaration public ConnectionOptions() ConnectionOptions(ConnectionOptions) Declaration protected ConnectionOptions(ConnectionOptions original) Parameters Type Name Description ConnectionOptions original Properties Dispatcher Gets or sets the dispatcher that dispatches requests received by this connection. Declaration public IDispatcher? Dispatcher { get; set; } Property Value Type Description IDispatcher The dispatcher that dispatches requests received by this connection, or null if this connection does not accept requests. EnableIceIdleCheck Gets or sets a value indicating whether or not to enable the Ice idle check. This option is specific to the ice protocol. When the Ice idle check is enabled, a read operation on the underlying transport connection fails when this read waits for over IceIdleTimeout to receive any byte. When the Ice idle check is disabled, the IceIdleTimeout has no effect on reads: a read on the underlying transport connection can wait forever to receive a byte. Declaration public bool EnableIceIdleCheck { get; set; } Property Value Type Description bool true if Ice idle check is enabled; false otherwise. Defaults to false for compatibility with the default ACM configuration of Ice 3.7. The recommended setting is true when the peer is an Ice application with the HeartbeatAlways ACM configuration or when the peer is an IceRPC application. Remarks When setting this value to true, make sure the peer's idle timeout is equal to or less than IceIdleTimeout. EqualityContract Declaration protected virtual Type EqualityContract { get; } Property Value Type Description Type IceIdleTimeout Gets or sets the Ice idle timeout. This option is specific to the ice protocol. Once the connection is established, the runtime sends a heartbeat to the peer when there is no write on the connection for half this Ice idle timeout. Declaration public TimeSpan IceIdleTimeout { get; set; } Property Value Type Description TimeSpan The Ice idle timeout. Defaults to 60 seconds to match the default ACM configuration in Ice 3.7. See Also EnableIceIdleCheck InactivityTimeout Gets or sets the inactivity timeout. This timeout is used to gracefully shutdown the connection if it's inactive for longer than this timeout. A connection is considered inactive when there's no invocation or dispatch in progress. Declaration public TimeSpan InactivityTimeout { get; set; } Property Value Type Description TimeSpan The inactivity timeout. Defaults to 5 minutes. MaxDispatches Gets or sets the maximum number of requests that a connection can dispatch concurrently. Once this limit is reached, the connection stops reading new requests off its underlying transport connection. Declaration public int MaxDispatches { get; set; } Property Value Type Description int The maximum number of requests that a connection can dispatch concurrently. 0 means no maximum. Defaults to 100 requests. Remarks With the icerpc protocol, you may also need to set MaxIceRpcBidirectionalStreams and MaxIceRpcUnidirectionalStreams. A typical two-way dispatch holds onto one bidirectional stream while a typical one-way dispatch quickly releases its unidirectional stream and then executes without consuming any stream. MaxIceFrameSize Gets or sets the maximum size of a frame received over the ice protocol. Declaration public int MaxIceFrameSize { get; set; } Property Value Type Description int The maximum size of an incoming frame, in bytes. This value must be at least 256. Defaults to 1 MB. MaxIceRpcBidirectionalStreams Gets or sets the maximum allowed number of simultaneous remote bidirectional streams that can be accepted on an icerpc connection. When this limit is reached, the peer is not allowed to open any new bidirectional stream. Since an bidirectional stream is opened for each two-way invocation, the sending of the two-way invocation will be delayed until another two-way invocation's stream completes. Declaration public int MaxIceRpcBidirectionalStreams { get; set; } Property Value Type Description int The maximum number of bidirectional streams. It can't be less than 1. Defaults to 100. MaxIceRpcHeaderSize Gets or sets the maximum size of icerpc protocol header. Declaration public int MaxIceRpcHeaderSize { get; set; } Property Value Type Description int The maximum size in bytes of the header of an incoming request, response or control frame. Defaults to 16,383, and the range of this value is 63 to 1,048,575. MaxIceRpcUnidirectionalStreams Gets or sets the maximum allowed number of simultaneous remote unidirectional streams that can be accepted on an icerpc connection. When this limit is reached, the peer is not allowed to open any new unidirectional stream. Since an unidirectional stream is opened for each one-way invocation, the sending of the one-way invocation will be delayed until another one-way invocation's stream completes. Declaration public int MaxIceRpcUnidirectionalStreams { get; set; } Property Value Type Description int The maximum number of unidirectional streams. It can't be less than 1. Defaults to 100. MinSegmentSize Gets or sets the minimum size of the segment requested from the Pool. Declaration public int MinSegmentSize { get; set; } Property Value Type Description int The minimum size of the segment requested from the Pool. Defaults to 4096. Pool Gets or sets the System.Buffers.MemoryPool<T> object used by the connection for allocating memory blocks. Declaration public MemoryPool<byte> Pool { get; set; } Property Value Type Description MemoryPool<byte> A pool of memory blocks used for buffer management. Defaults to System.Buffers.MemoryPool`1.Shared. Methods <Clone>$() Declaration public virtual ConnectionOptions <Clone>$() Returns Type Description ConnectionOptions Equals(ConnectionOptions?) Declaration public virtual bool Equals(ConnectionOptions? other) Parameters Type Name Description ConnectionOptions other Returns Type Description bool Equals(object?) Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() PrintMembers(StringBuilder) Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description bool ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Operators operator ==(ConnectionOptions?, ConnectionOptions?) Declaration public static bool operator ==(ConnectionOptions? left, ConnectionOptions? right) Parameters Type Name Description ConnectionOptions left ConnectionOptions right Returns Type Description bool operator !=(ConnectionOptions?, ConnectionOptions?) Declaration public static bool operator !=(ConnectionOptions? left, ConnectionOptions? right) Parameters Type Name Description ConnectionOptions left ConnectionOptions right Returns Type Description bool Implements System.IEquatable<T>"
  },
  "api/IceRpc.Deadline.DeadlineFeature.html": {
    "href": "api/IceRpc.Deadline.DeadlineFeature.html",
    "title": "Class DeadlineFeature | IceRPC",
    "keywords": "Class DeadlineFeature The default implementation of IDeadlineFeature. Inheritance object DeadlineFeature Implements IDeadlineFeature Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Deadline Assembly: IceRpc.Deadline.dll Syntax public sealed class DeadlineFeature : IDeadlineFeature Constructors DeadlineFeature(DateTime) Constructs a deadline feature. Declaration public DeadlineFeature(DateTime deadline) Parameters Type Name Description DateTime deadline The deadline value. Properties Value Gets the value of deadline. Declaration public DateTime Value { get; } Property Value Type Description DateTime The deadline value. The System.DateTime.MaxValue means no deadline. Methods FromTimeout(TimeSpan) Creates a deadline from a timeout. Declaration public static DeadlineFeature FromTimeout(TimeSpan timeout) Parameters Type Name Description TimeSpan timeout The timeout. Returns Type Description DeadlineFeature A new deadline equal to now plus the timeout. Implements IDeadlineFeature"
  },
  "api/IceRpc.Deadline.DeadlineInterceptor.html": {
    "href": "api/IceRpc.Deadline.DeadlineInterceptor.html",
    "title": "Class DeadlineInterceptor | IceRPC",
    "keywords": "Class DeadlineInterceptor The deadline interceptor provides a mechanism to set a request deadline. If the request doesn't carry a deadline feature, a deadline will be computed based on the configured default timeout otherwise the deadline from the IDeadlineFeature feature is used, the deadline is then encoded as a request field. When the deadline expires, the invocation is canceled and the interceptor throws System.TimeoutException. Inheritance object DeadlineInterceptor Implements IInvoker Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Deadline Assembly: IceRpc.Deadline.dll Syntax public class DeadlineInterceptor : IInvoker Remarks The dispatch of a one-way request cannot be canceled since the invocation typically completes before this dispatch starts; as a result, for a one-way request, the deadline must be enforced by the DeadlineMiddleware. Constructors DeadlineInterceptor(IInvoker, TimeSpan, bool) Constructs a deadline interceptor. Declaration public DeadlineInterceptor(IInvoker next, TimeSpan defaultTimeout, bool alwaysEnforceDeadline) Parameters Type Name Description IInvoker next The next invoker in the invocation pipeline. TimeSpan defaultTimeout The default timeout. bool alwaysEnforceDeadline When true and the request carries a deadline, the interceptor always creates a cancellation token source to enforce this deadline. When false and the request carries a deadline, the interceptor creates a cancellation token source to enforce this deadline only when the invocation's cancellation token cannot be canceled. The default value is false. Methods InvokeAsync(OutgoingRequest, CancellationToken) Sends an outgoing request and returns the corresponding incoming response. Declaration public Task<IncomingResponse> InvokeAsync(OutgoingRequest request, CancellationToken cancellationToken = default) Parameters Type Name Description OutgoingRequest request The outgoing request being sent. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task<IncomingResponse> The corresponding IncomingResponse. Remarks When request is a two-way request, the returned task will not complete successfully until after the request's Payload is fully sent and the response is received from the peer. When the request is a one-way request, the returned task completes successfully with an empty response when the request's Payload is fully sent. For all requests (one-way and two-way), the sending of the request's PayloadContinuation can continue in a background task after the returned task has completed successfully. Implements IInvoker"
  },
  "api/IceRpc.Deadline.DeadlineMiddleware.html": {
    "href": "api/IceRpc.Deadline.DeadlineMiddleware.html",
    "title": "Class DeadlineMiddleware | IceRPC",
    "keywords": "Class DeadlineMiddleware The deadline middleware decodes the deadline field into the deadline feature. When the deadline expires, the dispatch is canceled and the middleware throws DispatchException with status code DeadlineExpired. Inheritance object DeadlineMiddleware Implements IDispatcher Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Deadline Assembly: IceRpc.Deadline.dll Syntax public class DeadlineMiddleware : IDispatcher Constructors DeadlineMiddleware(IDispatcher) Constructs a deadline middleware. Declaration public DeadlineMiddleware(IDispatcher next) Parameters Type Name Description IDispatcher next The next dispatcher in the dispatch pipeline. Methods DispatchAsync(IncomingRequest, CancellationToken) Dispatches an incoming request and returns the corresponding outgoing response. Declaration public ValueTask<OutgoingResponse> DispatchAsync(IncomingRequest request, CancellationToken cancellationToken = default) Parameters Type Name Description IncomingRequest request The incoming request being dispatched. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask<OutgoingResponse> The corresponding OutgoingResponse. Implements IDispatcher"
  },
  "api/IceRpc.Deadline.html": {
    "href": "api/IceRpc.Deadline.html",
    "title": "Namespace IceRpc.Deadline | IceRPC",
    "keywords": "Namespace IceRpc.Deadline Classes DeadlineFeature The default implementation of IDeadlineFeature. DeadlineInterceptor The deadline interceptor provides a mechanism to set a request deadline. If the request doesn't carry a deadline feature, a deadline will be computed based on the configured default timeout otherwise the deadline from the IDeadlineFeature feature is used, the deadline is then encoded as a request field. When the deadline expires, the invocation is canceled and the interceptor throws System.TimeoutException. DeadlineMiddleware The deadline middleware decodes the deadline field into the deadline feature. When the deadline expires, the dispatch is canceled and the middleware throws DispatchException with status code DeadlineExpired. Interfaces IDeadlineFeature The deadline corresponds to the request's expiration time. Once the deadline is reached, the caller is no longer interested in the response and the request should be discarded by the application code and IceRPC. This deadline feature is encoded into the deadline field by the deadline interceptor and decoded from a field by the deadline middleware."
  },
  "api/IceRpc.Deadline.IDeadlineFeature.html": {
    "href": "api/IceRpc.Deadline.IDeadlineFeature.html",
    "title": "Interface IDeadlineFeature | IceRPC",
    "keywords": "Interface IDeadlineFeature The deadline corresponds to the request's expiration time. Once the deadline is reached, the caller is no longer interested in the response and the request should be discarded by the application code and IceRPC. This deadline feature is encoded into the deadline field by the deadline interceptor and decoded from a field by the deadline middleware. Namespace: IceRpc.Deadline Assembly: IceRpc.Deadline.dll Syntax public interface IDeadlineFeature Properties Value Gets the value of deadline. Declaration DateTime Value { get; } Property Value Type Description DateTime The deadline value. The System.DateTime.MaxValue means no deadline."
  },
  "api/IceRpc.DeadlinePipelineExtensions.html": {
    "href": "api/IceRpc.DeadlinePipelineExtensions.html",
    "title": "Class DeadlinePipelineExtensions | IceRPC",
    "keywords": "Class DeadlinePipelineExtensions This class provides extension methods to add the deadline interceptor to a Pipeline. Inheritance object DeadlinePipelineExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.Deadline.dll Syntax public static class DeadlinePipelineExtensions Methods UseDeadline(Pipeline, TimeSpan, bool) Adds a DeadlineInterceptor to the pipeline. Declaration public static Pipeline UseDeadline(this Pipeline pipeline, TimeSpan defaultTimeout, bool alwaysEnforceDeadline = false) Parameters Type Name Description Pipeline pipeline The pipeline being configured. TimeSpan defaultTimeout The default timeout. bool alwaysEnforceDeadline When true and the request carries a deadline, the interceptor always creates a cancellation token source to enforce this deadline. When false and the request carries a deadline, the interceptor creates a cancellation token source to enforce this deadline only when the invocation's cancellation token cannot be canceled. The default value is false. Returns Type Description Pipeline The builder being configured. UseDeadline(Pipeline) Adds a DeadlineInterceptor with an infinite default timeout to the pipeline. Declaration public static Pipeline UseDeadline(this Pipeline pipeline) Parameters Type Name Description Pipeline pipeline The pipeline being configured. Returns Type Description Pipeline The pipeline being configured."
  },
  "api/IceRpc.DeadlineRouterExtensions.html": {
    "href": "api/IceRpc.DeadlineRouterExtensions.html",
    "title": "Class DeadlineRouterExtensions | IceRPC",
    "keywords": "Class DeadlineRouterExtensions This class provides extension methods to add the deadline middleware to a Router. Inheritance object DeadlineRouterExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.Deadline.dll Syntax public static class DeadlineRouterExtensions Methods UseDeadline(Router) Adds a DeadlineMiddleware to the router. Declaration public static Router UseDeadline(this Router router) Parameters Type Name Description Router router The router being configured. Returns Type Description Router The router being configured."
  },
  "api/IceRpc.DispatchException.html": {
    "href": "api/IceRpc.DispatchException.html",
    "title": "Class DispatchException | IceRPC",
    "keywords": "Class DispatchException Represents an exception thrown by the peer while dispatching a request. It's decoded from a response with a status code greater than Success. Inheritance object Exception DispatchException SliceException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public class DispatchException : Exception, ISerializable Constructors DispatchException(StatusCode, string?, Exception?) Constructs a new instance of DispatchException. Declaration public DispatchException(StatusCode statusCode, string? message = null, Exception? innerException = null) Parameters Type Name Description StatusCode statusCode The status code of this exception. It must be greater than Success. string message A message that describes the exception. Exception innerException The exception that is the cause of the current exception. Properties ConvertToUnhandled Gets or sets a value indicating whether the exception should be converted into a DispatchException with status code UnhandledException when thrown from a dispatch. Declaration public bool ConvertToUnhandled { get; set; } Property Value Type Description bool When true, this exception is converted into dispatch exception with status code UnhandledException just before it's encoded. Defaults to true for an exception decoded from IncomingResponse, and false for an exception created by the application using a constructor of DispatchException. StatusCode Gets the status code. Declaration public StatusCode StatusCode { get; } Property Value Type Description StatusCode The StatusCode of this exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/IceRpc.Features.CompressFeature.html": {
    "href": "api/IceRpc.Features.CompressFeature.html",
    "title": "Class CompressFeature | IceRPC",
    "keywords": "Class CompressFeature The default implementation for ICompressFeature. Inheritance object CompressFeature Implements ICompressFeature Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Features Assembly: IceRpc.dll Syntax public sealed class CompressFeature : ICompressFeature Properties Compress Gets the CompressFeature instance that specifies that the payload of a request or response must be compressed. Declaration public static ICompressFeature Compress { get; } Property Value Type Description ICompressFeature The CompressFeature instance to specify that the payload should be compressed. DoNotCompress Gets CompressFeature instance that specifies that the payload of a request or response must not be compressed. Declaration public static ICompressFeature DoNotCompress { get; } Property Value Type Description ICompressFeature The CompressFeature instance to specify that the payload should not be compressed. Value Gets a value indicating whether or not to compress the payload. Declaration public bool Value { get; } Property Value Type Description bool true if the payload should be compressed; false otherwise. Implements ICompressFeature"
  },
  "api/IceRpc.Features.DispatchInformationFeature.html": {
    "href": "api/IceRpc.Features.DispatchInformationFeature.html",
    "title": "Class DispatchInformationFeature | IceRPC",
    "keywords": "Class DispatchInformationFeature The default implementation of IDispatchInformationFeature. Inheritance object DispatchInformationFeature Implements IDispatchInformationFeature Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Features Assembly: IceRpc.dll Syntax public sealed class DispatchInformationFeature : IDispatchInformationFeature Constructors DispatchInformationFeature(IncomingRequest) Constructs a dispatch information feature using an incoming request. Declaration public DispatchInformationFeature(IncomingRequest request) Parameters Type Name Description IncomingRequest request The incoming request. Properties ConnectionContext Gets the connection context. Declaration public IConnectionContext ConnectionContext { get; } Property Value Type Description IConnectionContext Fragment Gets the fragment of the target service. Declaration public string Fragment { get; } Property Value Type Description string The fragment of the target service. It is always the empty string with the icerpc protocol. IsOneway Gets a value indicating whether this request is one-way or two-way. Declaration public bool IsOneway { get; } Property Value Type Description bool true for one-way requests, false otherwise. Operation Gets the name of the operation to call on the target service. Declaration public string Operation { get; } Property Value Type Description string The name of the operation. Path Gets the path of the target service. Declaration public string Path { get; } Property Value Type Description string The path of the target service. Protocol Gets the protocol of the connection that received this request. Declaration public Protocol Protocol { get; } Property Value Type Description Protocol The Protocol for the current dispatch. Implements IDispatchInformationFeature"
  },
  "api/IceRpc.Features.FeatureCollection.html": {
    "href": "api/IceRpc.Features.FeatureCollection.html",
    "title": "Class FeatureCollection | IceRPC",
    "keywords": "Class FeatureCollection The default read-write implementation of IFeatureCollection. Inheritance object FeatureCollection Implements IFeatureCollection IEnumerable<KeyValuePair<Type, object>> IEnumerable Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Features Assembly: IceRpc.dll Syntax public class FeatureCollection : IFeatureCollection, IEnumerable<KeyValuePair<Type, object>>, IEnumerable Constructors FeatureCollection() Constructs an empty read-write feature collection. Declaration public FeatureCollection() FeatureCollection(IFeatureCollection) Constructs an empty read-write feature collection with defaults. Declaration public FeatureCollection(IFeatureCollection defaults) Parameters Type Name Description IFeatureCollection defaults The feature collection that provide default values. Properties Empty Gets a shared empty read-only instance. Declaration public static IFeatureCollection Empty { get; } Property Value Type Description IFeatureCollection An empty FeatureCollection. IsReadOnly Gets a value indicating whether this feature collection is read-only or read-write. Declaration public bool IsReadOnly { get; } Property Value Type Description bool true if the feature collection is read-only; false otherwise. this[Type] Gets or sets a feature. Setting null removes the feature. Declaration public object? this[Type key] { get; set; } Parameters Type Name Description Type key The feature key. Property Value Type Description object The requested feature. Methods Get<TFeature>() Gets the requested feature. If the feature is not set, returns null. Declaration public TFeature? Get<TFeature>() Returns Type Description TFeature The requested feature. Type Parameters Name Description TFeature The feature key. GetEnumerator() Declaration public IEnumerator<KeyValuePair<Type, object>> GetEnumerator() Returns Type Description IEnumerator<KeyValuePair<Type, object>> Set<TFeature>(TFeature?) Sets a new feature. Setting null removes the feature. Declaration public void Set<TFeature>(TFeature? feature) Parameters Type Name Description TFeature feature The feature value. Type Parameters Name Description TFeature The feature key. Implements IFeatureCollection System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods FeatureCollectionExtensions.AsReadOnly(IFeatureCollection) FeatureCollectionExtensions.With<T>(IFeatureCollection, T)"
  },
  "api/IceRpc.Features.FeatureCollectionExtensions.html": {
    "href": "api/IceRpc.Features.FeatureCollectionExtensions.html",
    "title": "Class FeatureCollectionExtensions | IceRPC",
    "keywords": "Class FeatureCollectionExtensions Provides extension methods for IFeatureCollection. Inheritance object FeatureCollectionExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Features Assembly: IceRpc.dll Syntax public static class FeatureCollectionExtensions Methods AsReadOnly(IFeatureCollection) Creates a read-only collection decorator over this feature collection. Declaration public static IFeatureCollection AsReadOnly(this IFeatureCollection features) Parameters Type Name Description IFeatureCollection features This feature collection. Returns Type Description IFeatureCollection A new read-only decorator over this feature collection, or the feature collection itself if it's already read-only. With<T>(IFeatureCollection, T) Updates this feature collection (if read-write) or creates a new feature collection (if read-only) and sets its T to the provided value. Declaration public static IFeatureCollection With<T>(this IFeatureCollection features, T value) Parameters Type Name Description IFeatureCollection features This feature collection. T value The new value. Returns Type Description IFeatureCollection The updated feature collection. Type Parameters Name Description T The type of the value to set in the feature collection."
  },
  "api/IceRpc.Features.html": {
    "href": "api/IceRpc.Features.html",
    "title": "Namespace IceRpc.Features | IceRPC",
    "keywords": "Namespace IceRpc.Features Classes CompressFeature The default implementation for ICompressFeature. DispatchInformationFeature The default implementation of IDispatchInformationFeature. FeatureCollection The default read-write implementation of IFeatureCollection. FeatureCollectionExtensions Provides extension methods for IFeatureCollection. ServerAddressFeature The default implementation of IServerAddressFeature. ServerAddressFeatureExtensions Extension methods for interface IServerAddressFeature. ServiceProviderFeature The default implementation of IServiceProviderFeature. Interfaces ICompressFeature A feature that specifies whether or not the payload of an icerpc request or response should be compressed. IDispatchInformationFeature A feature that provides information about the current dispatch. IFeatureCollection A collection of features carried by IncomingRequest or OutgoingRequest. It is similar but not identical to the IFeatureCollection in Microsoft.AspNetCore.Http.Features. IServerAddressFeature A feature used by the invocation pipeline to select the server address to use and share this selection. IServiceProviderFeature A feature that gives access to the service provider. This service provider is typically the service provider of the async scope created for the request."
  },
  "api/IceRpc.Features.ICompressFeature.html": {
    "href": "api/IceRpc.Features.ICompressFeature.html",
    "title": "Interface ICompressFeature | IceRPC",
    "keywords": "Interface ICompressFeature A feature that specifies whether or not the payload of an icerpc request or response should be compressed. Namespace: IceRpc.Features Assembly: IceRpc.dll Syntax public interface ICompressFeature Remarks An interceptor or middleware needs to perform this compression. Properties Value Gets a value indicating whether or not to compress the payload. Declaration bool Value { get; } Property Value Type Description bool true if the payload should be compressed; false otherwise."
  },
  "api/IceRpc.Features.IDispatchInformationFeature.html": {
    "href": "api/IceRpc.Features.IDispatchInformationFeature.html",
    "title": "Interface IDispatchInformationFeature | IceRPC",
    "keywords": "Interface IDispatchInformationFeature A feature that provides information about the current dispatch. Namespace: IceRpc.Features Assembly: IceRpc.dll Syntax public interface IDispatchInformationFeature Properties ConnectionContext Gets the connection context. Declaration IConnectionContext ConnectionContext { get; } Property Value Type Description IConnectionContext Fragment Gets the fragment of the target service. Declaration string Fragment { get; } Property Value Type Description string The fragment of the target service. It is always the empty string with the icerpc protocol. IsOneway Gets a value indicating whether this request is one-way or two-way. Declaration bool IsOneway { get; } Property Value Type Description bool true for one-way requests, false otherwise. Operation Gets the name of the operation to call on the target service. Declaration string Operation { get; } Property Value Type Description string The name of the operation. Path Gets the path of the target service. Declaration string Path { get; } Property Value Type Description string The path of the target service. Protocol Gets the protocol of the connection that received this request. Declaration Protocol Protocol { get; } Property Value Type Description Protocol The Protocol for the current dispatch."
  },
  "api/IceRpc.Features.IFeatureCollection.html": {
    "href": "api/IceRpc.Features.IFeatureCollection.html",
    "title": "Interface IFeatureCollection | IceRPC",
    "keywords": "Interface IFeatureCollection A collection of features carried by IncomingRequest or OutgoingRequest. It is similar but not identical to the IFeatureCollection in Microsoft.AspNetCore.Http.Features. Inherited Members IEnumerable<KeyValuePair<Type, object>>.GetEnumerator() IEnumerable.GetEnumerator() Namespace: IceRpc.Features Assembly: IceRpc.dll Syntax public interface IFeatureCollection : IEnumerable<KeyValuePair<Type, object>>, IEnumerable Properties IsReadOnly Gets a value indicating whether this feature collection is read-only or read-write. Declaration bool IsReadOnly { get; } Property Value Type Description bool true if the feature collection is read-only; false otherwise. this[Type] Gets or sets a feature. Setting null removes the feature. Declaration object? this[Type key] { get; set; } Parameters Type Name Description Type key The feature key. Property Value Type Description object The requested feature. Methods Get<TFeature>() Gets the requested feature. If the feature is not set, returns null. Declaration TFeature? Get<TFeature>() Returns Type Description TFeature The requested feature. Type Parameters Name Description TFeature The feature key. Set<TFeature>(TFeature?) Sets a new feature. Setting null removes the feature. Declaration void Set<TFeature>(TFeature? feature) Parameters Type Name Description TFeature feature The feature value. Type Parameters Name Description TFeature The feature key. Extension Methods FeatureCollectionExtensions.AsReadOnly(IFeatureCollection) FeatureCollectionExtensions.With<T>(IFeatureCollection, T)"
  },
  "api/IceRpc.Features.IServerAddressFeature.html": {
    "href": "api/IceRpc.Features.IServerAddressFeature.html",
    "title": "Interface IServerAddressFeature | IceRPC",
    "keywords": "Interface IServerAddressFeature A feature used by the invocation pipeline to select the server address to use and share this selection. Namespace: IceRpc.Features Assembly: IceRpc.dll Syntax public interface IServerAddressFeature Properties AltServerAddresses Gets or sets the alternatives to ServerAddress. Declaration ImmutableList<ServerAddress> AltServerAddresses { get; set; } Property Value Type Description ImmutableList<ServerAddress> The list of alternatives to ServerAddress. It is empty when ServerAddress is null. RemovedServerAddresses Gets or sets the list of ServerAddress that have been removed and will not be used for the invocation. Declaration ImmutableList<ServerAddress> RemovedServerAddresses { get; set; } Property Value Type Description ImmutableList<ServerAddress> The list of removed ServerAddress. ServerAddress Gets or sets the main server address for the invocation. When retrying, it represents the server address that was used by the preceding attempt. Declaration ServerAddress? ServerAddress { get; set; } Property Value Type Description ServerAddress? The main server address. It is null if there's no server address to use for the invocation. Extension Methods ServerAddressFeatureExtensions.RemoveServerAddress(IServerAddressFeature, ServerAddress) ServerAddressFeatureExtensions.RotateAddresses(IServerAddressFeature)"
  },
  "api/IceRpc.Features.IServiceProviderFeature.html": {
    "href": "api/IceRpc.Features.IServiceProviderFeature.html",
    "title": "Interface IServiceProviderFeature | IceRPC",
    "keywords": "Interface IServiceProviderFeature A feature that gives access to the service provider. This service provider is typically the service provider of the async scope created for the request. Namespace: IceRpc.Features Assembly: IceRpc.Extensions.DependencyInjection.dll Syntax public interface IServiceProviderFeature Properties ServiceProvider Gets the service provider. Declaration IServiceProvider ServiceProvider { get; } Property Value Type Description IServiceProvider The System.IServiceProvider."
  },
  "api/IceRpc.Features.ServerAddressFeature.html": {
    "href": "api/IceRpc.Features.ServerAddressFeature.html",
    "title": "Class ServerAddressFeature | IceRPC",
    "keywords": "Class ServerAddressFeature The default implementation of IServerAddressFeature. Inheritance object ServerAddressFeature Implements IServerAddressFeature Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Features Assembly: IceRpc.dll Syntax public sealed class ServerAddressFeature : IServerAddressFeature Constructors ServerAddressFeature(ServiceAddress) Constructs a server address feature that uses the server addresses of a service address. Declaration public ServerAddressFeature(ServiceAddress serviceAddress) Parameters Type Name Description ServiceAddress serviceAddress The service address to copy the server addresses from. Properties AltServerAddresses Gets or sets the alternatives to ServerAddress. Declaration public ImmutableList<ServerAddress> AltServerAddresses { get; set; } Property Value Type Description ImmutableList<ServerAddress> The list of alternatives to ServerAddress. It is empty when ServerAddress is null. RemovedServerAddresses Gets or sets the list of ServerAddress that have been removed and will not be used for the invocation. Declaration public ImmutableList<ServerAddress> RemovedServerAddresses { get; set; } Property Value Type Description ImmutableList<ServerAddress> The list of removed ServerAddress. ServerAddress Gets or sets the main server address for the invocation. When retrying, it represents the server address that was used by the preceding attempt. Declaration public ServerAddress? ServerAddress { get; set; } Property Value Type Description ServerAddress? The main server address. It is null if there's no server address to use for the invocation. Implements IServerAddressFeature Extension Methods ServerAddressFeatureExtensions.RemoveServerAddress(IServerAddressFeature, ServerAddress) ServerAddressFeatureExtensions.RotateAddresses(IServerAddressFeature)"
  },
  "api/IceRpc.Features.ServerAddressFeatureExtensions.html": {
    "href": "api/IceRpc.Features.ServerAddressFeatureExtensions.html",
    "title": "Class ServerAddressFeatureExtensions | IceRPC",
    "keywords": "Class ServerAddressFeatureExtensions Extension methods for interface IServerAddressFeature. Inheritance object ServerAddressFeatureExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Features Assembly: IceRpc.dll Syntax public static class ServerAddressFeatureExtensions Methods RemoveServerAddress(IServerAddressFeature, ServerAddress) Tries to remove a server address from this server address feature. The server address is added to the removed server addresses of the feature. Declaration public static void RemoveServerAddress(this IServerAddressFeature feature, ServerAddress serverAddress) Parameters Type Name Description IServerAddressFeature feature The server address feature. ServerAddress serverAddress The server address to remove from the server address feature. RotateAddresses(IServerAddressFeature) Rotates the server addresses the first alt server address becomes the main server address and the main server address becomes the last alt server address. Declaration public static void RotateAddresses(this IServerAddressFeature feature) Parameters Type Name Description IServerAddressFeature feature The server address feature."
  },
  "api/IceRpc.Features.ServiceProviderFeature.html": {
    "href": "api/IceRpc.Features.ServiceProviderFeature.html",
    "title": "Class ServiceProviderFeature | IceRPC",
    "keywords": "Class ServiceProviderFeature The default implementation of IServiceProviderFeature. Inheritance object ServiceProviderFeature Implements IServiceProviderFeature Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Features Assembly: IceRpc.Extensions.DependencyInjection.dll Syntax public class ServiceProviderFeature : IServiceProviderFeature Constructors ServiceProviderFeature(IServiceProvider) Constructs a service provider feature. Declaration public ServiceProviderFeature(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider The service provider hold by this feature. Properties ServiceProvider Gets the service provider. Declaration public IServiceProvider ServiceProvider { get; } Property Value Type Description IServiceProvider The System.IServiceProvider. Implements IServiceProviderFeature"
  },
  "api/IceRpc.FieldsExtensions.html": {
    "href": "api/IceRpc.FieldsExtensions.html",
    "title": "Class FieldsExtensions | IceRPC",
    "keywords": "Class FieldsExtensions Provides extension method for field dictionaries. Inheritance object FieldsExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public static class FieldsExtensions Methods With<TKey>(IDictionary<TKey, OutgoingFieldValue>, TKey, EncodeAction) Sets an entry in the outgoing fields dictionary and returns the fields dictionary. If fields is read-only, a copy is created, modified then returned. Declaration public static IDictionary<TKey, OutgoingFieldValue> With<TKey>(this IDictionary<TKey, OutgoingFieldValue> fields, TKey key, EncodeAction value) where TKey : struct Parameters Type Name Description IDictionary<TKey, OutgoingFieldValue> fields A fields dictionary. TKey key The key of the entry to set. EncodeAction value The value of the entry to set. Returns Type Description IDictionary<TKey, OutgoingFieldValue> The fields dictionary. Type Parameters Name Description TKey The type of the field key. With<TKey>(IDictionary<TKey, OutgoingFieldValue>, TKey, ReadOnlySequence<byte>) Sets an entry in the outgoing fields dictionary and returns the fields dictionary. If fields is read-only, a copy is created, modified then returned. Declaration public static IDictionary<TKey, OutgoingFieldValue> With<TKey>(this IDictionary<TKey, OutgoingFieldValue> fields, TKey key, ReadOnlySequence<byte> value) where TKey : struct Parameters Type Name Description IDictionary<TKey, OutgoingFieldValue> fields A fields dictionary. TKey key The key of the entry to set. ReadOnlySequence<byte> value The value of the entry to set. Returns Type Description IDictionary<TKey, OutgoingFieldValue> The fields dictionary. Type Parameters Name Description TKey The type of the field key. Without<TKey>(IDictionary<TKey, OutgoingFieldValue>, TKey) Removes an entry in the fields dictionary and returns the fields dictionary. If fields is read-only and contains the value, a copy is created, modified then returned. Declaration public static IDictionary<TKey, OutgoingFieldValue> Without<TKey>(this IDictionary<TKey, OutgoingFieldValue> fields, TKey key) where TKey : struct Parameters Type Name Description IDictionary<TKey, OutgoingFieldValue> fields A fields dictionary. TKey key The key of the entry to check. Returns Type Description IDictionary<TKey, OutgoingFieldValue> The fields dictionary. Type Parameters Name Description TKey The type of the field key."
  },
  "api/IceRpc.html": {
    "href": "api/IceRpc.html",
    "title": "Namespace IceRpc | IceRPC",
    "keywords": "Namespace IceRpc Classes AdapterAlreadyActiveException This exception is thrown when a server application tries to register server addresses for an object adapter that is already active. AdapterNotFoundException This exception is thrown when an object adapter was not found. ClientConnection Represents a client connection used to send requests to a server and receive the corresponding responses. This client connection can also dispatch requests (\"callbacks\") received from the server. The client connection's underlying connection is recreated and reconnected automatically when it's closed by any event other than a call to ShutdownAsync(CancellationToken) or DisposeAsync(). ClientConnectionOptions A property bag used to configure a ClientConnection. ClientProtocolConnectionFactory The default implementation of IClientProtocolConnectionFactory. CompressionFormatByteExtensions Provides an extension method for creating a CompressionFormat from a byte. CompressionFormatSliceDecoderExtensions Provide extension methods for encoding CompressionFormat. CompressionFormatSliceEncoderExtensions Provide extension methods for encoding CompressionFormat. ConnectionCache A connection cache is an invoker that routes outgoing requests to connections it manages. This routing is based on the IServerAddressFeature and the server addresses of the service address carried by each outgoing request. The connection cache keeps at most one active connection per server address. ConnectionCacheOptions A property bag used to configure a ConnectionCache. ConnectionOptions A property bag used to configure client and server connections. DeadlinePipelineExtensions This class provides extension methods to add the deadline interceptor to a Pipeline. DeadlineRouterExtensions This class provides extension methods to add the deadline middleware to a Router. DispatchException Represents an exception thrown by the peer while dispatching a request. It's decoded from a response with a status code greater than Success. FieldsExtensions Provides extension method for field dictionaries. IceObjectProxy.Request Converts the arguments of each operation that takes arguments into a request payload. IceObjectProxy.Response Holds a ResponseDecodeFunc<T> for each remote operation defined in IIceObject. IceRpcException The IceRpc core and built-in invokers, dispatchers (including built-in middleware and interceptors) report errors by throwing this exception. Slice invocations throw DispatchException in addition to IceRpcException. IIceObjectService.Request Provides static methods that read the arguments of requests. IIceObjectService.Response Provides static methods that write the return values of responses. ILocatorRegistryService.Request Provides static methods that read the arguments of requests. ILocatorService.Request Provides static methods that read the arguments of requests. ILocatorService.Response Provides static methods that write the return values of responses. IncomingFrame Base class for incoming frames. IncomingRequest Represents a request frame received by the application. IncomingResponse Represents a response protocol frame received by the application. InlineDispatcher Adapts a dispatcher delegate to the IDispatcher interface. InlineInvoker Adapts a function to the IInvoker interface. InvalidReplicaGroupIdException This exception is thrown when the provided replica group is invalid. IProcessService.Request Provides static methods that read the arguments of requests. LocatorPipelineExtensions This class provides extension methods to install the locator interceptor in a Pipeline. LocatorProxy.Request Converts the arguments of each operation that takes arguments into a request payload. LocatorProxy.Response Holds a ResponseDecodeFunc<T> for each remote operation defined in ILocator. LocatorRegistryProxy.Request Converts the arguments of each operation that takes arguments into a request payload. LocatorRegistryProxy.Response Holds a ResponseDecodeFunc<T> for each remote operation defined in ILocatorRegistry. LoggerPipelineExtensions This class provides extension methods to add the logger interceptor to a Pipeline. LoggerRouterExtensions This class provides extension methods to add the logger middleware to a Router. MetricsPipelineExtensions This class provides extension methods to add the metrics interceptor to a Pipeline. MetricsRouterExtensions This class provides extension methods to add the metrics middleware to a Router. ObjectNotFoundException This exception is thrown when a service with the specified identity (path) was not found. OutgoingFrame Base class for outgoing frames. OutgoingRequest Represents an ice or icerpc request frame sent by the application. OutgoingResponse Represents a response protocol frame sent by the application. Pipeline A pipeline is an invoker created from zero or more interceptors installed by calling Use(Func<IInvoker, IInvoker>), and a final invoker installed by calling Into(IInvoker). Requests using this pipeline flow through the interceptors into the last invoker. The last invoker then sends the request over a connection. PipelineExtensions This class provide extension methods to add built-in interceptors to a Pipeline. ProcessProxy.Request Converts the arguments of each operation that takes arguments into a request payload. ProcessProxy.Response Holds a ResponseDecodeFunc<T> for each remote operation defined in IProcess. Protocol Protocol identifies a RPC protocol supported by IceRPC. RequestContextPipelineExtensions This class provides extension methods to add the request context interceptor to a Pipeline. RequestContextRouterExtensions This class provides extension methods to add the request context middleware to a Router. RequestFieldKeySliceDecoderExtensions Provide extension methods for encoding RequestFieldKey. RequestFieldKeySliceEncoderExtensions Provide extension methods for encoding RequestFieldKey. RequestFieldKeyUlongExtensions Provides an extension method for creating a RequestFieldKey from an ulong. ResettablePipeReaderDecorator A PipeReader decorator that allows to reset its decoratee to its initial state (from the caller's perspective). ResponseFieldKeySliceDecoderExtensions Provide extension methods for encoding ResponseFieldKey. ResponseFieldKeySliceEncoderExtensions Provide extension methods for encoding ResponseFieldKey. ResponseFieldKeyUlongExtensions Provides an extension method for creating a ResponseFieldKey from an ulong. RetryPipelineExtensions This class provides extension methods to add the retry interceptor to a Pipeline. Router A router routes incoming requests to dispatchers. RouterExtensions This class provide extension methods to add built-in middleware to a Router. Server A server accepts connections from clients and dispatches the requests it receives over these connections. ServerAddressComparer Equality comparer for ServerAddress. ServerAddressTypeConverter The server address type converter specifies how to convert a string to a serverAddress. It's used by sub-systems such as the Microsoft ConfigurationBinder to bind string values to ServerAddress properties. ServerNotFoundException This exception is thrown when a server was not found. ServerOptions A property bag used to configure a Server. ServiceAddress A service address corresponds to the URI of a service, parsed and processed for easier consumption by interceptors, ConnectionCache and other elements of the invocation pipeline. It's used to construct an OutgoingRequest. ServiceAddressTypeConverter The service address type converter specifies how to convert a string to a service address. It's used by sub-systems such as the Microsoft ConfigurationBinder to bind string values to ServiceAddress properties. StatusCodeSliceDecoderExtensions Provide extension methods for encoding StatusCode. StatusCodeSliceEncoderExtensions Provide extension methods for encoding StatusCode. StatusCodeUlongExtensions Provides an extension method for creating a StatusCode from an ulong. TelemetryPipelineExtensions This class provide extension methods to add the telemetry interceptor to a Pipeline. TelemetryRouterExtensions This class provide extension methods to add the telemetry middleware to a Router. Structs IceObjectProxy Proxy record struct. It implements IIceObject by sending requests to a remote IceRPC service. LocatorProxy Proxy record struct. It implements ILocator by sending requests to a remote IceRPC service. LocatorRegistryProxy Proxy record struct. It implements ILocatorRegistry by sending requests to a remote IceRPC service. OutgoingFieldValue Represents the value of a field that is about to be sent. It's a kind of discriminated union: only one of the struct's properties can be set. ProcessProxy Proxy record struct. It implements IProcess by sending requests to a remote IceRPC service. ServerAddress A server address specifies the address of the server-end of an ice or icerpc connection: a server listens on a server address and a client establishes a connection to a server address. Interfaces IClientProtocolConnectionFactory Represents a factory for client protocol connections. IConnectionContext Provides access to properties of the connection that received a request or response. IDispatcher A dispatcher handles (dispatches) incoming requests and returns outgoing responses. IIceObject The client-side interface for Slice interface IceObject. IIceObjectService. Provides 3 ice_ operations. Services implemented with Ice or that offer compatibility with Ice implement this interface. IIceObjectService Interface used to implement services for Slice interface IceObject. IIceObject. Provides 3 ice_ operations. Services implemented with Ice or that offer compatibility with Ice implement this interface. IInvoker An invoker sends outgoing requests and returns incoming responses. ILocator The client-side interface for Slice interface Locator. ILocatorService. Client applications use the ILocator service to resolve Ice indirect proxies. This service also allows server applications to retrieve a proxy to the associated ILocatorRegistry service where they can register their object adapters. ILocatorRegistry The client-side interface for Slice interface LocatorRegistry. ILocatorRegistryService. A server application registers the server addresses of its indirect object adapters with the LocatorRegistry service. ILocatorRegistryService Interface used to implement services for Slice interface LocatorRegistry. ILocatorRegistry. A server application registers the server addresses of its indirect object adapters with the LocatorRegistry service. ILocatorService Interface used to implement services for Slice interface Locator. ILocator. Client applications use the ILocator service to resolve Ice indirect proxies. This service also allows server applications to retrieve a proxy to the associated ILocatorRegistry service where they can register their object adapters. IMiddleware<TDep> Represents a middleware with a single injected service dependency in its DispatchAsync method. IMiddleware<TDep1, TDep2> Represents a middleware with 2 injected service dependencies in its DispatchAsync method. IMiddleware<TDep1, TDep2, TDep3> Represents a middleware with 3 injected service dependencies in its DispatchAsync method. IProcess The client-side interface for Slice interface Process. IProcessService. A server application managed by a locator implementation such as IceGrid hosts a Process service and registers a proxy to this service with the locator registry. See SetServerProcessProxyAsync(string, ProcessProxy, IFeatureCollection?, CancellationToken). IProcessService Interface used to implement services for Slice interface Process. IProcess. A server application managed by a locator implementation such as IceGrid hosts a Process service and registers a proxy to this service with the locator registry. See SetServerProcessProxyAsync(string, ProcessProxy, IFeatureCollection?, CancellationToken). IProtocolConnection Represents a connection for a Protocol. It is the building block for ClientConnection, ConnectionCache and the connections created by Server. Applications can use this interface to build their own custom client connection and connection cache classes. Enums CompressionFormat The compression format of a payload. IceRpcError The errors carried by an IceRpcException. ProtocolEventIds This enum contains event ID constants used for protocol connection related logging. RequestFieldKey The keys of fields carried by icerpc request headers. ResponseFieldKey The keys of fields carried by icerpc response headers. StatusCode The status code indicates whether the dispatch of a request has completed successfully, and, if not, which error occurred. It's carried by responses."
  },
  "api/IceRpc.IceObjectProxy.html": {
    "href": "api/IceRpc.IceObjectProxy.html",
    "title": "Struct IceObjectProxy | IceRPC",
    "keywords": "Struct IceObjectProxy Proxy record struct. It implements IIceObject by sending requests to a remote IceRPC service. Implements IIceObject IProxy IEquatable<IceObjectProxy> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: IceRpc Assembly: IceRpc.dll Syntax [TypeId(\"::Ice::Object\")] public readonly struct IceObjectProxy : IIceObject, IProxy, IEquatable<IceObjectProxy> Constructors IceObjectProxy() Constructs a proxy with the default service address and a null invoker. Declaration public IceObjectProxy() IceObjectProxy(IInvoker, ServiceAddress?, SliceEncodeOptions?) Constructs a proxy from an invoker, a service address and encode options. Declaration public IceObjectProxy(IInvoker invoker, ServiceAddress? serviceAddress = null, SliceEncodeOptions? encodeOptions = null) Parameters Type Name Description IInvoker invoker The invocation pipeline of the proxy. ServiceAddress serviceAddress The service address. Null is equivalent to DefaultServiceAddress. SliceEncodeOptions encodeOptions The encode options, used to customize the encoding of request payloads. IceObjectProxy(IInvoker, Uri, SliceEncodeOptions?) Constructs a proxy from an invoker, a service address URI and encode options. Declaration public IceObjectProxy(IInvoker invoker, Uri serviceAddressUri, SliceEncodeOptions? encodeOptions = null) Parameters Type Name Description IInvoker invoker The invocation pipeline of the proxy. Uri serviceAddressUri A URI that represents a service address. SliceEncodeOptions encodeOptions The encode options, used to customize the encoding of request payloads. Properties DefaultServiceAddress Gets the default service address for services that implement Slice interface IceObject. Its protocol is icerpc and its path is computed from the Slice interface name. Declaration public static ServiceAddress DefaultServiceAddress { get; } Property Value Type Description ServiceAddress EncodeOptions Gets or initializes the encode options, used to customize the encoding of payloads created from this proxy. Declaration public SliceEncodeOptions? EncodeOptions { get; init; } Property Value Type Description SliceEncodeOptions Invoker Gets or initializes the invocation pipeline of this proxy. Declaration public IInvoker? Invoker { get; init; } Property Value Type Description IInvoker ServiceAddress Gets or initializes the address of the remote service. Declaration public ServiceAddress ServiceAddress { get; init; } Property Value Type Description ServiceAddress Methods Equals(IceObjectProxy) Declaration public bool Equals(IceObjectProxy other) Parameters Type Name Description IceObjectProxy other Returns Type Description bool Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides System.ValueType.Equals(object) FromPath(string) Creates a relative proxy from a path. Declaration public static IceObjectProxy FromPath(string path) Parameters Type Name Description string path The path. Returns Type Description IceObjectProxy The new relative proxy. GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides System.ValueType.GetHashCode() IceIdsAsync(IFeatureCollection?, CancellationToken) Gets the Slice type IDs of all the interfaces implemented by the target service. Declaration public Task<string[]> IceIdsAsync(IFeatureCollection? features = null, CancellationToken cancellationToken = default) Parameters Type Name Description IFeatureCollection features The invocation features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task<string[]> The Slice type IDs of all these interfaces, sorted alphabetically. IceIsAAsync(string, IFeatureCollection?, CancellationToken) Tests whether the target service implements the specified interface. Declaration public Task<bool> IceIsAAsync(string id, IFeatureCollection? features = null, CancellationToken cancellationToken = default) Parameters Type Name Description string id The Slice type ID of the interface to test against. IFeatureCollection features The invocation features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task<bool> True when the target service implements this interface; otherwise, false. IcePingAsync(IFeatureCollection?, CancellationToken) Pings the service. Declaration public Task IcePingAsync(IFeatureCollection? features = null, CancellationToken cancellationToken = default) Parameters Type Name Description IFeatureCollection features The invocation features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task ToString() Declaration public override string ToString() Returns Type Description string Overrides System.ValueType.ToString() Operators operator ==(IceObjectProxy, IceObjectProxy) Declaration public static bool operator ==(IceObjectProxy left, IceObjectProxy right) Parameters Type Name Description IceObjectProxy left IceObjectProxy right Returns Type Description bool operator !=(IceObjectProxy, IceObjectProxy) Declaration public static bool operator !=(IceObjectProxy left, IceObjectProxy right) Parameters Type Name Description IceObjectProxy left IceObjectProxy right Returns Type Description bool Implements IIceObject IProxy System.IEquatable<T> Extension Methods ProxyExtensions.InvokeAsync<TProxy>(TProxy, string, PipeReader?, PipeReader?, ResponseDecodeFunc, IFeatureCollection?, bool, bool, CancellationToken) ProxyExtensions.InvokeAsync<TProxy, T>(TProxy, string, PipeReader?, PipeReader?, ResponseDecodeFunc<T>, IFeatureCollection?, bool, CancellationToken) ProxyExtensions.AsAsync<TProxy>(IProxy, IFeatureCollection?, CancellationToken) ProxyExtensions.ToProxy<TProxy>(IProxy)"
  },
  "api/IceRpc.IceObjectProxy.Request.html": {
    "href": "api/IceRpc.IceObjectProxy.Request.html",
    "title": "Class IceObjectProxy.Request | IceRPC",
    "keywords": "Class IceObjectProxy.Request Converts the arguments of each operation that takes arguments into a request payload. Inheritance object IceObjectProxy.Request Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public static class IceObjectProxy.Request Methods IceIsA(string, SliceEncodeOptions?) Creates the request payload for operation ice_isA. Declaration public static PipeReader IceIsA(string id, SliceEncodeOptions? encodeOptions = null) Parameters Type Name Description string id The Slice type ID of the interface to test against. SliceEncodeOptions encodeOptions The Slice encode options. Returns Type Description PipeReader The payload encoded with Slice1."
  },
  "api/IceRpc.IceObjectProxy.Response.html": {
    "href": "api/IceRpc.IceObjectProxy.Response.html",
    "title": "Class IceObjectProxy.Response | IceRPC",
    "keywords": "Class IceObjectProxy.Response Holds a ResponseDecodeFunc<T> for each remote operation defined in IIceObject. Inheritance object IceObjectProxy.Response Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public static class IceObjectProxy.Response Methods IceIdsAsync(IncomingResponse, OutgoingRequest, GenericProxy, CancellationToken) The ResponseDecodeFunc<T> for operation ice_ids. Declaration public static ValueTask<string[]> IceIdsAsync(IncomingResponse response, OutgoingRequest request, GenericProxy sender, CancellationToken cancellationToken) Parameters Type Name Description IncomingResponse response OutgoingRequest request GenericProxy sender CancellationToken cancellationToken Returns Type Description ValueTask<string[]> IceIsAAsync(IncomingResponse, OutgoingRequest, GenericProxy, CancellationToken) The ResponseDecodeFunc<T> for operation ice_isA. Declaration public static ValueTask<bool> IceIsAAsync(IncomingResponse response, OutgoingRequest request, GenericProxy sender, CancellationToken cancellationToken) Parameters Type Name Description IncomingResponse response OutgoingRequest request GenericProxy sender CancellationToken cancellationToken Returns Type Description ValueTask<bool> IcePingAsync(IncomingResponse, OutgoingRequest, GenericProxy, CancellationToken) The ResponseDecodeFunc for operation ice_ping. Declaration public static ValueTask IcePingAsync(IncomingResponse response, OutgoingRequest request, GenericProxy sender, CancellationToken cancellationToken) Parameters Type Name Description IncomingResponse response OutgoingRequest request GenericProxy sender CancellationToken cancellationToken Returns Type Description ValueTask"
  },
  "api/IceRpc.IceRpcError.html": {
    "href": "api/IceRpc.IceRpcError.html",
    "title": "Enum IceRpcError | IceRPC",
    "keywords": "Enum IceRpcError The errors carried by an IceRpcException. Namespace: IceRpc Assembly: IceRpc.dll Syntax public enum IceRpcError Fields Name Description AddressInUse The listener local address is in use. ConnectionAborted The connection was aborted, typically by the peer. The abort can also be caused by a network failure, such as an intermediary router going down. ConnectionClosedByPeer The peer closed the connection without reporting any error. ConnectionIdle The connection was idle and timed-out. ConnectionRefused The peer refused the connection. IceRpcError An uncategorized IceRpc error. InvocationCanceled The invocation was canceled: the invoker read the payload of the request but the request was not dispatched at all by the server. InvocationRefused The invocation was refused because the invoker (for example a connection) is closed or shutting down or no longer available prior to the start of this invocation. The payload of the request was not read at all by the invoker. LimitExceeded A limit was exceeded, such as the MaxIceRpcHeaderSize sent by the peer during connection establishment. NoConnection An invoker failed to send a request because it could not establish or locate a connection. OperationAborted The operation was aborted because an underlying resource (connection, stream) was disposed while this operation was running. ServerBusy The server rejected the connection establishment attempt because it already has too many connections. ServerUnreachable The server is unreachable. TruncatedData The reading of a transport stream completed with incomplete data."
  },
  "api/IceRpc.IceRpcException.html": {
    "href": "api/IceRpc.IceRpcException.html",
    "title": "Class IceRpcException | IceRPC",
    "keywords": "Class IceRpcException The IceRpc core and built-in invokers, dispatchers (including built-in middleware and interceptors) report errors by throwing this exception. Slice invocations throw DispatchException in addition to IceRpcException. Inheritance object Exception SystemException IOException IceRpcException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public class IceRpcException : IOException, ISerializable Constructors IceRpcException(IceRpcError, Exception?) Constructs a new instance of the IceRpcException class. Declaration public IceRpcException(IceRpcError error, Exception? innerException = null) Parameters Type Name Description IceRpcError error The error. Exception innerException The exception that caused this exception. IceRpcException(IceRpcError, string?, Exception?) Constructs a new instance of the IceRpcException class. Declaration public IceRpcException(IceRpcError error, string? message, Exception? innerException = null) Parameters Type Name Description IceRpcError error The error. string message A message that describes the exception. Exception innerException The exception that caused this exception. Properties IceRpcError Gets the IceRpc error. Declaration public IceRpcError IceRpcError { get; } Property Value Type Description IceRpcError The IceRpcError of this exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/IceRpc.IClientProtocolConnectionFactory.html": {
    "href": "api/IceRpc.IClientProtocolConnectionFactory.html",
    "title": "Interface IClientProtocolConnectionFactory | IceRPC",
    "keywords": "Interface IClientProtocolConnectionFactory Represents a factory for client protocol connections. Namespace: IceRpc Assembly: IceRpc.dll Syntax public interface IClientProtocolConnectionFactory Methods CreateConnection(ServerAddress) Creates a protocol connection to the specified server address. Declaration IProtocolConnection CreateConnection(ServerAddress serverAddress) Parameters Type Name Description ServerAddress serverAddress The address of the server. Returns Type Description IProtocolConnection The new protocol connection. The caller must call ConnectAsync(CancellationToken) on this connection to connect it."
  },
  "api/IceRpc.IConnectionContext.html": {
    "href": "api/IceRpc.IConnectionContext.html",
    "title": "Interface IConnectionContext | IceRPC",
    "keywords": "Interface IConnectionContext Provides access to properties of the connection that received a request or response. Namespace: IceRpc Assembly: IceRpc.dll Syntax public interface IConnectionContext Properties Invoker Gets the invoker implemented by the connection. Declaration IInvoker Invoker { get; } Property Value Type Description IInvoker The IInvoker to send requests and receive responses with the connection. TransportConnectionInformation Gets the transport connection information. Declaration TransportConnectionInformation TransportConnectionInformation { get; } Property Value Type Description TransportConnectionInformation The TransportConnectionInformation of the connection."
  },
  "api/IceRpc.IDispatcher.html": {
    "href": "api/IceRpc.IDispatcher.html",
    "title": "Interface IDispatcher | IceRPC",
    "keywords": "Interface IDispatcher A dispatcher handles (dispatches) incoming requests and returns outgoing responses. Namespace: IceRpc Assembly: IceRpc.dll Syntax public interface IDispatcher Methods DispatchAsync(IncomingRequest, CancellationToken) Dispatches an incoming request and returns the corresponding outgoing response. Declaration ValueTask<OutgoingResponse> DispatchAsync(IncomingRequest request, CancellationToken cancellationToken = default) Parameters Type Name Description IncomingRequest request The incoming request being dispatched. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask<OutgoingResponse> The corresponding OutgoingResponse."
  },
  "api/IceRpc.IIceObject.html": {
    "href": "api/IceRpc.IIceObject.html",
    "title": "Interface IIceObject | IceRPC",
    "keywords": "Interface IIceObject The client-side interface for Slice interface IceObject. IIceObjectService. Provides 3 ice_ operations. Services implemented with Ice or that offer compatibility with Ice implement this interface. Namespace: IceRpc Assembly: IceRpc.dll Syntax [TypeId(\"::Ice::Object\")] public interface IIceObject Methods IceIdsAsync(IFeatureCollection?, CancellationToken) Gets the Slice type IDs of all the interfaces implemented by the target service. Declaration Task<string[]> IceIdsAsync(IFeatureCollection? features = null, CancellationToken cancellationToken = default) Parameters Type Name Description IFeatureCollection features The invocation features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task<string[]> The Slice type IDs of all these interfaces, sorted alphabetically. IceIsAAsync(string, IFeatureCollection?, CancellationToken) Tests whether the target service implements the specified interface. Declaration Task<bool> IceIsAAsync(string id, IFeatureCollection? features = null, CancellationToken cancellationToken = default) Parameters Type Name Description string id The Slice type ID of the interface to test against. IFeatureCollection features The invocation features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task<bool> True when the target service implements this interface; otherwise, false. IcePingAsync(IFeatureCollection?, CancellationToken) Pings the service. Declaration Task IcePingAsync(IFeatureCollection? features = null, CancellationToken cancellationToken = default) Parameters Type Name Description IFeatureCollection features The invocation features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task"
  },
  "api/IceRpc.IIceObjectService.html": {
    "href": "api/IceRpc.IIceObjectService.html",
    "title": "Interface IIceObjectService | IceRPC",
    "keywords": "Interface IIceObjectService Interface used to implement services for Slice interface IceObject. IIceObject. Provides 3 ice_ operations. Services implemented with Ice or that offer compatibility with Ice implement this interface. Namespace: IceRpc Assembly: IceRpc.dll Syntax [TypeId(\"::Ice::Object\")] public interface IIceObjectService Methods IceIdsAsync(IFeatureCollection, CancellationToken) Gets the Slice type IDs of all the interfaces implemented by the target service. Declaration ValueTask<IEnumerable<string>> IceIdsAsync(IFeatureCollection features, CancellationToken cancellationToken) Parameters Type Name Description IFeatureCollection features The dispatch features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask<IEnumerable<string>> The Slice type IDs of all these interfaces, sorted alphabetically. IceIsAAsync(string, IFeatureCollection, CancellationToken) Tests whether the target service implements the specified interface. Declaration ValueTask<bool> IceIsAAsync(string id, IFeatureCollection features, CancellationToken cancellationToken) Parameters Type Name Description string id The Slice type ID of the interface to test against. IFeatureCollection features The dispatch features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask<bool> True when the target service implements this interface; otherwise, false. IcePingAsync(IFeatureCollection, CancellationToken) Pings the service. Declaration ValueTask IcePingAsync(IFeatureCollection features, CancellationToken cancellationToken) Parameters Type Name Description IFeatureCollection features The dispatch features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask SliceDIceIdsAsync(IIceObjectService, IncomingRequest, CancellationToken) Declaration [Operation(\"ice_ids\")] protected static ValueTask<OutgoingResponse> SliceDIceIdsAsync(IIceObjectService target, IncomingRequest request, CancellationToken cancellationToken) Parameters Type Name Description IIceObjectService target IncomingRequest request CancellationToken cancellationToken Returns Type Description ValueTask<OutgoingResponse> SliceDIceIsAAsync(IIceObjectService, IncomingRequest, CancellationToken) Declaration [Operation(\"ice_isA\")] protected static ValueTask<OutgoingResponse> SliceDIceIsAAsync(IIceObjectService target, IncomingRequest request, CancellationToken cancellationToken) Parameters Type Name Description IIceObjectService target IncomingRequest request CancellationToken cancellationToken Returns Type Description ValueTask<OutgoingResponse> SliceDIcePingAsync(IIceObjectService, IncomingRequest, CancellationToken) Declaration [Operation(\"ice_ping\")] protected static ValueTask<OutgoingResponse> SliceDIcePingAsync(IIceObjectService target, IncomingRequest request, CancellationToken cancellationToken) Parameters Type Name Description IIceObjectService target IncomingRequest request CancellationToken cancellationToken Returns Type Description ValueTask<OutgoingResponse>"
  },
  "api/IceRpc.IIceObjectService.Request.html": {
    "href": "api/IceRpc.IIceObjectService.Request.html",
    "title": "Class IIceObjectService.Request | IceRPC",
    "keywords": "Class IIceObjectService.Request Provides static methods that read the arguments of requests. Inheritance object IIceObjectService.Request Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public static class IIceObjectService.Request Methods IceIsAAsync(IncomingRequest, CancellationToken) Decodes the argument of operation IceIsA. Declaration public static ValueTask<string> IceIsAAsync(IncomingRequest request, CancellationToken cancellationToken) Parameters Type Name Description IncomingRequest request CancellationToken cancellationToken Returns Type Description ValueTask<string>"
  },
  "api/IceRpc.IIceObjectService.Response.html": {
    "href": "api/IceRpc.IIceObjectService.Response.html",
    "title": "Class IIceObjectService.Response | IceRPC",
    "keywords": "Class IIceObjectService.Response Provides static methods that write the return values of responses. Inheritance object IIceObjectService.Response Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public static class IIceObjectService.Response Methods IceIds(IEnumerable<string>, SliceEncodeOptions?) Creates a response payload for operation IceIds. Declaration public static PipeReader IceIds(IEnumerable<string> returnValue, SliceEncodeOptions? encodeOptions = null) Parameters Type Name Description IEnumerable<string> returnValue The operation return value. SliceEncodeOptions encodeOptions The Slice encode options. Returns Type Description PipeReader A new response payload. IceIsA(bool, SliceEncodeOptions?) Creates a response payload for operation IceIsA. Declaration public static PipeReader IceIsA(bool returnValue, SliceEncodeOptions? encodeOptions = null) Parameters Type Name Description bool returnValue The operation return value. SliceEncodeOptions encodeOptions The Slice encode options. Returns Type Description PipeReader A new response payload."
  },
  "api/IceRpc.IInvoker.html": {
    "href": "api/IceRpc.IInvoker.html",
    "title": "Interface IInvoker | IceRPC",
    "keywords": "Interface IInvoker An invoker sends outgoing requests and returns incoming responses. Namespace: IceRpc Assembly: IceRpc.dll Syntax public interface IInvoker Methods InvokeAsync(OutgoingRequest, CancellationToken) Sends an outgoing request and returns the corresponding incoming response. Declaration Task<IncomingResponse> InvokeAsync(OutgoingRequest request, CancellationToken cancellationToken = default) Parameters Type Name Description OutgoingRequest request The outgoing request being sent. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task<IncomingResponse> The corresponding IncomingResponse. Remarks When request is a two-way request, the returned task will not complete successfully until after the request's Payload is fully sent and the response is received from the peer. When the request is a one-way request, the returned task completes successfully with an empty response when the request's Payload is fully sent. For all requests (one-way and two-way), the sending of the request's PayloadContinuation can continue in a background task after the returned task has completed successfully."
  },
  "api/IceRpc.ILocator.html": {
    "href": "api/IceRpc.ILocator.html",
    "title": "Interface ILocator | IceRPC",
    "keywords": "Interface ILocator The client-side interface for Slice interface Locator. ILocatorService. Client applications use the ILocator service to resolve Ice indirect proxies. This service also allows server applications to retrieve a proxy to the associated ILocatorRegistry service where they can register their object adapters. Namespace: IceRpc Assembly: IceRpc.Locator.dll Syntax [TypeId(\"::Ice::Locator\")] public interface ILocator Methods FindAdapterByIdAsync(string, IFeatureCollection?, CancellationToken) Finds an object adapter by adapter ID and returns a dummy service address with the object adapter's server address(es). Declaration Task<ServiceAddress?> FindAdapterByIdAsync(string id, IFeatureCollection? features = null, CancellationToken cancellationToken = default) Parameters Type Name Description string id The adapter ID. IFeatureCollection features The invocation features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task<ServiceAddress> A dummy service address with the adapter's server address(es), or null if an object adapter with adapter ID id was not found. Exceptions Type Condition AdapterNotFoundException Thrown if an object adapter with this adapter ID was not found. The caller should treat this exception like a null return value. FindObjectByIdAsync(string, IFeatureCollection?, CancellationToken) Finds a service by identity (path) and returns a dummy service address with the server address(es) that can be used to reach this service. This dummy service address can also carry no server address and require further resolution using FindAdapterByIdAsync(string, IFeatureCollection?, CancellationToken). Declaration Task<ServiceAddress?> FindObjectByIdAsync(string id, IFeatureCollection? features = null, CancellationToken cancellationToken = default) Parameters Type Name Description string id The identity represented as a path. IFeatureCollection features The invocation features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task<ServiceAddress> A dummy service address, or null if a service with the requested identity (path) was not found. Exceptions Type Condition ObjectNotFoundException Thrown if a service with the requested identity (path) was not found. The caller should treat this exception like a null return value. GetRegistryAsync(IFeatureCollection?, CancellationToken) Gets the locator registry. Declaration Task<LocatorRegistryProxy?> GetRegistryAsync(IFeatureCollection? features = null, CancellationToken cancellationToken = default) Parameters Type Name Description IFeatureCollection features The invocation features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task<LocatorRegistryProxy?> The locator registry, or null if this locator has no associated registry."
  },
  "api/IceRpc.ILocatorRegistry.html": {
    "href": "api/IceRpc.ILocatorRegistry.html",
    "title": "Interface ILocatorRegistry | IceRPC",
    "keywords": "Interface ILocatorRegistry The client-side interface for Slice interface LocatorRegistry. ILocatorRegistryService. A server application registers the server addresses of its indirect object adapters with the LocatorRegistry service. Namespace: IceRpc Assembly: IceRpc.Locator.dll Syntax [TypeId(\"::Ice::LocatorRegistry\")] public interface ILocatorRegistry Methods SetAdapterDirectProxyAsync(string, ServiceAddress?, IFeatureCollection?, CancellationToken) Registers or unregisters the server addresses of an object adapter. Declaration Task SetAdapterDirectProxyAsync(string id, ServiceAddress? proxy, IFeatureCollection? features = null, CancellationToken cancellationToken = default) Parameters Type Name Description string id The adapter ID. ServiceAddress proxy A dummy service address created by the object adapter. proxy carries the object adapter's server addresses. The locator considers an object adapter to be active after it has registered its server addresses. When proxy is null, the server addresses are unregistered and the locator considers the object adapter inactive. IFeatureCollection features The invocation features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task Exceptions Type Condition AdapterNotFoundException Thrown if the locator only allows registered object adapters to register their active server addresses and no object adapter with this adapter ID was registered with the locator. AdapterAlreadyActiveException Thrown if an object adapter with the same adapter ID has already registered its server addresses. SetReplicatedAdapterDirectProxyAsync(string, string, ServiceAddress?, IFeatureCollection?, CancellationToken) Registers or unregisters the server addresses of an object adapter. This object adapter is a member of a replica group. Declaration Task SetReplicatedAdapterDirectProxyAsync(string adapterId, string replicaGroupId, ServiceAddress? proxy, IFeatureCollection? features = null, CancellationToken cancellationToken = default) Parameters Type Name Description string adapterId The adapter ID. string replicaGroupId The replica group ID. ServiceAddress proxy A dummy service address created by the object adapter. proxy carries the object adapter's server addresses. The locator considers an object adapter to be active after it has registered its server addresses. When proxy is null, the server addresses are unregistered and the locator considers the object adapter inactive. IFeatureCollection features The invocation features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task Exceptions Type Condition AdapterNotFoundException Thrown if the locator only allows registered object adapters to register their active server addresses and no object adapter with this adapter ID was registered with the locator. AdapterAlreadyActiveException Thrown if an object adapter with the same adapter ID has already registered its server addresses. InvalidReplicaGroupIdException Thrown if the given replica group does not match the replica group associated with the adapter ID in the locator's database. SetServerProcessProxyAsync(string, ProcessProxy, IFeatureCollection?, CancellationToken) Registers a proxy for the IProcess service of a server application. Declaration Task SetServerProcessProxyAsync(string serverId, ProcessProxy proxy, IFeatureCollection? features = null, CancellationToken cancellationToken = default) Parameters Type Name Description string serverId The server ID. ProcessProxy proxy A proxy for the Process service of the server application. IFeatureCollection features The invocation features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task Exceptions Type Condition ServerNotFoundException Thrown if the locator does not know a server application with this server ID."
  },
  "api/IceRpc.ILocatorRegistryService.html": {
    "href": "api/IceRpc.ILocatorRegistryService.html",
    "title": "Interface ILocatorRegistryService | IceRPC",
    "keywords": "Interface ILocatorRegistryService Interface used to implement services for Slice interface LocatorRegistry. ILocatorRegistry. A server application registers the server addresses of its indirect object adapters with the LocatorRegistry service. Namespace: IceRpc Assembly: IceRpc.Locator.dll Syntax [TypeId(\"::Ice::LocatorRegistry\")] public interface ILocatorRegistryService Methods SetAdapterDirectProxyAsync(string, ServiceAddress?, IFeatureCollection, CancellationToken) Registers or unregisters the server addresses of an object adapter. Declaration ValueTask SetAdapterDirectProxyAsync(string id, ServiceAddress? proxy, IFeatureCollection features, CancellationToken cancellationToken) Parameters Type Name Description string id The adapter ID. ServiceAddress proxy A dummy service address created by the object adapter. proxy carries the object adapter's server addresses. The locator considers an object adapter to be active after it has registered its server addresses. When proxy is null, the server addresses are unregistered and the locator considers the object adapter inactive. IFeatureCollection features The dispatch features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask Exceptions Type Condition AdapterNotFoundException Thrown if the locator only allows registered object adapters to register their active server addresses and no object adapter with this adapter ID was registered with the locator. AdapterAlreadyActiveException Thrown if an object adapter with the same adapter ID has already registered its server addresses. SetReplicatedAdapterDirectProxyAsync(string, string, ServiceAddress?, IFeatureCollection, CancellationToken) Registers or unregisters the server addresses of an object adapter. This object adapter is a member of a replica group. Declaration ValueTask SetReplicatedAdapterDirectProxyAsync(string adapterId, string replicaGroupId, ServiceAddress? proxy, IFeatureCollection features, CancellationToken cancellationToken) Parameters Type Name Description string adapterId The adapter ID. string replicaGroupId The replica group ID. ServiceAddress proxy A dummy service address created by the object adapter. proxy carries the object adapter's server addresses. The locator considers an object adapter to be active after it has registered its server addresses. When proxy is null, the server addresses are unregistered and the locator considers the object adapter inactive. IFeatureCollection features The dispatch features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask Exceptions Type Condition AdapterNotFoundException Thrown if the locator only allows registered object adapters to register their active server addresses and no object adapter with this adapter ID was registered with the locator. AdapterAlreadyActiveException Thrown if an object adapter with the same adapter ID has already registered its server addresses. InvalidReplicaGroupIdException Thrown if the given replica group does not match the replica group associated with the adapter ID in the locator's database. SetServerProcessProxyAsync(string, ProcessProxy, IFeatureCollection, CancellationToken) Registers a proxy for the IProcess service of a server application. Declaration ValueTask SetServerProcessProxyAsync(string serverId, ProcessProxy proxy, IFeatureCollection features, CancellationToken cancellationToken) Parameters Type Name Description string serverId The server ID. ProcessProxy proxy A proxy for the Process service of the server application. IFeatureCollection features The dispatch features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask Exceptions Type Condition ServerNotFoundException Thrown if the locator does not know a server application with this server ID. SliceDSetAdapterDirectProxyAsync(ILocatorRegistryService, IncomingRequest, CancellationToken) Declaration [Operation(\"setAdapterDirectProxy\")] protected static ValueTask<OutgoingResponse> SliceDSetAdapterDirectProxyAsync(ILocatorRegistryService target, IncomingRequest request, CancellationToken cancellationToken) Parameters Type Name Description ILocatorRegistryService target IncomingRequest request CancellationToken cancellationToken Returns Type Description ValueTask<OutgoingResponse> SliceDSetReplicatedAdapterDirectProxyAsync(ILocatorRegistryService, IncomingRequest, CancellationToken) Declaration [Operation(\"setReplicatedAdapterDirectProxy\")] protected static ValueTask<OutgoingResponse> SliceDSetReplicatedAdapterDirectProxyAsync(ILocatorRegistryService target, IncomingRequest request, CancellationToken cancellationToken) Parameters Type Name Description ILocatorRegistryService target IncomingRequest request CancellationToken cancellationToken Returns Type Description ValueTask<OutgoingResponse> SliceDSetServerProcessProxyAsync(ILocatorRegistryService, IncomingRequest, CancellationToken) Declaration [Operation(\"setServerProcessProxy\")] protected static ValueTask<OutgoingResponse> SliceDSetServerProcessProxyAsync(ILocatorRegistryService target, IncomingRequest request, CancellationToken cancellationToken) Parameters Type Name Description ILocatorRegistryService target IncomingRequest request CancellationToken cancellationToken Returns Type Description ValueTask<OutgoingResponse>"
  },
  "api/IceRpc.ILocatorRegistryService.Request.html": {
    "href": "api/IceRpc.ILocatorRegistryService.Request.html",
    "title": "Class ILocatorRegistryService.Request | IceRPC",
    "keywords": "Class ILocatorRegistryService.Request Provides static methods that read the arguments of requests. Inheritance object ILocatorRegistryService.Request Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.Locator.dll Syntax public static class ILocatorRegistryService.Request Methods SetAdapterDirectProxyAsync(IncomingRequest, CancellationToken) Decodes the arguments of operation SetAdapterDirectProxy. Declaration public static ValueTask<(string Id, ServiceAddress? Proxy)> SetAdapterDirectProxyAsync(IncomingRequest request, CancellationToken cancellationToken) Parameters Type Name Description IncomingRequest request CancellationToken cancellationToken Returns Type Description ValueTask<(string Id, ServiceAddress Proxy)> SetReplicatedAdapterDirectProxyAsync(IncomingRequest, CancellationToken) Decodes the arguments of operation SetReplicatedAdapterDirectProxy. Declaration public static ValueTask<(string AdapterId, string ReplicaGroupId, ServiceAddress? Proxy)> SetReplicatedAdapterDirectProxyAsync(IncomingRequest request, CancellationToken cancellationToken) Parameters Type Name Description IncomingRequest request CancellationToken cancellationToken Returns Type Description ValueTask<(string AdapterId, string ReplicaGroupId, ServiceAddress Proxy)> SetServerProcessProxyAsync(IncomingRequest, CancellationToken) Decodes the arguments of operation SetServerProcessProxy. Declaration public static ValueTask<(string ServerId, ProcessProxy Proxy)> SetServerProcessProxyAsync(IncomingRequest request, CancellationToken cancellationToken) Parameters Type Name Description IncomingRequest request CancellationToken cancellationToken Returns Type Description ValueTask<(string ServerId, ProcessProxy Proxy)>"
  },
  "api/IceRpc.ILocatorService.html": {
    "href": "api/IceRpc.ILocatorService.html",
    "title": "Interface ILocatorService | IceRPC",
    "keywords": "Interface ILocatorService Interface used to implement services for Slice interface Locator. ILocator. Client applications use the ILocator service to resolve Ice indirect proxies. This service also allows server applications to retrieve a proxy to the associated ILocatorRegistry service where they can register their object adapters. Namespace: IceRpc Assembly: IceRpc.Locator.dll Syntax [TypeId(\"::Ice::Locator\")] public interface ILocatorService Methods FindAdapterByIdAsync(string, IFeatureCollection, CancellationToken) Finds an object adapter by adapter ID and returns a dummy service address with the object adapter's server address(es). Declaration ValueTask<ServiceAddress?> FindAdapterByIdAsync(string id, IFeatureCollection features, CancellationToken cancellationToken) Parameters Type Name Description string id The adapter ID. IFeatureCollection features The dispatch features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask<ServiceAddress> A dummy service address with the adapter's server address(es), or null if an object adapter with adapter ID id was not found. Exceptions Type Condition AdapterNotFoundException Thrown if an object adapter with this adapter ID was not found. The caller should treat this exception like a null return value. FindObjectByIdAsync(string, IFeatureCollection, CancellationToken) Finds a service by identity (path) and returns a dummy service address with the server address(es) that can be used to reach this service. This dummy service address can also carry no server address and require further resolution using FindAdapterByIdAsync(string, IFeatureCollection?, CancellationToken). Declaration ValueTask<ServiceAddress?> FindObjectByIdAsync(string id, IFeatureCollection features, CancellationToken cancellationToken) Parameters Type Name Description string id The identity represented as a path. IFeatureCollection features The dispatch features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask<ServiceAddress> A dummy service address, or null if a service with the requested identity (path) was not found. Exceptions Type Condition ObjectNotFoundException Thrown if a service with the requested identity (path) was not found. The caller should treat this exception like a null return value. GetRegistryAsync(IFeatureCollection, CancellationToken) Gets the locator registry. Declaration ValueTask<LocatorRegistryProxy?> GetRegistryAsync(IFeatureCollection features, CancellationToken cancellationToken) Parameters Type Name Description IFeatureCollection features The dispatch features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask<LocatorRegistryProxy?> The locator registry, or null if this locator has no associated registry. SliceDFindAdapterByIdAsync(ILocatorService, IncomingRequest, CancellationToken) Declaration [Operation(\"findAdapterById\")] protected static ValueTask<OutgoingResponse> SliceDFindAdapterByIdAsync(ILocatorService target, IncomingRequest request, CancellationToken cancellationToken) Parameters Type Name Description ILocatorService target IncomingRequest request CancellationToken cancellationToken Returns Type Description ValueTask<OutgoingResponse> SliceDFindObjectByIdAsync(ILocatorService, IncomingRequest, CancellationToken) Declaration [Operation(\"findObjectById\")] protected static ValueTask<OutgoingResponse> SliceDFindObjectByIdAsync(ILocatorService target, IncomingRequest request, CancellationToken cancellationToken) Parameters Type Name Description ILocatorService target IncomingRequest request CancellationToken cancellationToken Returns Type Description ValueTask<OutgoingResponse> SliceDGetRegistryAsync(ILocatorService, IncomingRequest, CancellationToken) Declaration [Operation(\"getRegistry\")] protected static ValueTask<OutgoingResponse> SliceDGetRegistryAsync(ILocatorService target, IncomingRequest request, CancellationToken cancellationToken) Parameters Type Name Description ILocatorService target IncomingRequest request CancellationToken cancellationToken Returns Type Description ValueTask<OutgoingResponse>"
  },
  "api/IceRpc.ILocatorService.Request.html": {
    "href": "api/IceRpc.ILocatorService.Request.html",
    "title": "Class ILocatorService.Request | IceRPC",
    "keywords": "Class ILocatorService.Request Provides static methods that read the arguments of requests. Inheritance object ILocatorService.Request Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.Locator.dll Syntax public static class ILocatorService.Request Methods FindAdapterByIdAsync(IncomingRequest, CancellationToken) Decodes the argument of operation FindAdapterById. Declaration public static ValueTask<string> FindAdapterByIdAsync(IncomingRequest request, CancellationToken cancellationToken) Parameters Type Name Description IncomingRequest request CancellationToken cancellationToken Returns Type Description ValueTask<string> FindObjectByIdAsync(IncomingRequest, CancellationToken) Decodes the argument of operation FindObjectById. Declaration public static ValueTask<string> FindObjectByIdAsync(IncomingRequest request, CancellationToken cancellationToken) Parameters Type Name Description IncomingRequest request CancellationToken cancellationToken Returns Type Description ValueTask<string>"
  },
  "api/IceRpc.ILocatorService.Response.html": {
    "href": "api/IceRpc.ILocatorService.Response.html",
    "title": "Class ILocatorService.Response | IceRPC",
    "keywords": "Class ILocatorService.Response Provides static methods that write the return values of responses. Inheritance object ILocatorService.Response Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.Locator.dll Syntax public static class ILocatorService.Response Methods FindAdapterById(ServiceAddress?, SliceEncodeOptions?) Creates a response payload for operation FindAdapterById. Declaration public static PipeReader FindAdapterById(ServiceAddress? returnValue, SliceEncodeOptions? encodeOptions = null) Parameters Type Name Description ServiceAddress returnValue The operation return value. SliceEncodeOptions encodeOptions The Slice encode options. Returns Type Description PipeReader A new response payload. FindObjectById(ServiceAddress?, SliceEncodeOptions?) Creates a response payload for operation FindObjectById. Declaration public static PipeReader FindObjectById(ServiceAddress? returnValue, SliceEncodeOptions? encodeOptions = null) Parameters Type Name Description ServiceAddress returnValue The operation return value. SliceEncodeOptions encodeOptions The Slice encode options. Returns Type Description PipeReader A new response payload. GetRegistry(LocatorRegistryProxy?, SliceEncodeOptions?) Creates a response payload for operation GetRegistry. Declaration public static PipeReader GetRegistry(LocatorRegistryProxy? returnValue, SliceEncodeOptions? encodeOptions = null) Parameters Type Name Description LocatorRegistryProxy? returnValue The operation return value. SliceEncodeOptions encodeOptions The Slice encode options. Returns Type Description PipeReader A new response payload."
  },
  "api/IceRpc.IMiddleware-1.html": {
    "href": "api/IceRpc.IMiddleware-1.html",
    "title": "Interface IMiddleware<TDep> | IceRPC",
    "keywords": "Interface IMiddleware<TDep> Represents a middleware with a single injected service dependency in its DispatchAsync method. Namespace: IceRpc Assembly: IceRpc.Extensions.DependencyInjection.dll Syntax public interface IMiddleware<TDep> where TDep : notnull Type Parameters Name Description TDep The type of the injected dependency. Methods DispatchAsync(IncomingRequest, TDep, CancellationToken) Dispatches a request and returns a response. Declaration ValueTask<OutgoingResponse> DispatchAsync(IncomingRequest request, TDep dep, CancellationToken cancellationToken) Parameters Type Name Description IncomingRequest request The request being dispatch. TDep dep The injected dependency. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask<OutgoingResponse> The dispatch response."
  },
  "api/IceRpc.IMiddleware-2.html": {
    "href": "api/IceRpc.IMiddleware-2.html",
    "title": "Interface IMiddleware<TDep1, TDep2> | IceRPC",
    "keywords": "Interface IMiddleware<TDep1, TDep2> Represents a middleware with 2 injected service dependencies in its DispatchAsync method. Namespace: IceRpc Assembly: IceRpc.Extensions.DependencyInjection.dll Syntax public interface IMiddleware<TDep1, TDep2> where TDep1 : notnull where TDep2 : notnull Type Parameters Name Description TDep1 The type of the first injected dependency. TDep2 The type of the second injected dependency. Methods DispatchAsync(IncomingRequest, TDep1, TDep2, CancellationToken) Dispatches a request and returns a response. Declaration ValueTask<OutgoingResponse> DispatchAsync(IncomingRequest request, TDep1 dep1, TDep2 dep2, CancellationToken cancellationToken) Parameters Type Name Description IncomingRequest request The request being dispatch. TDep1 dep1 The first injected dependency. TDep2 dep2 The second injected dependency. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask<OutgoingResponse> The dispatch response."
  },
  "api/IceRpc.IMiddleware-3.html": {
    "href": "api/IceRpc.IMiddleware-3.html",
    "title": "Interface IMiddleware<TDep1, TDep2, TDep3> | IceRPC",
    "keywords": "Interface IMiddleware<TDep1, TDep2, TDep3> Represents a middleware with 3 injected service dependencies in its DispatchAsync method. Namespace: IceRpc Assembly: IceRpc.Extensions.DependencyInjection.dll Syntax public interface IMiddleware<TDep1, TDep2, TDep3> where TDep1 : notnull where TDep2 : notnull where TDep3 : notnull Type Parameters Name Description TDep1 The type of the first injected dependency. TDep2 The type of the second injected dependency. TDep3 The type of the third injected dependency. Methods DispatchAsync(IncomingRequest, TDep1, TDep2, TDep3, CancellationToken) Dispatches a request and returns a response. Declaration ValueTask<OutgoingResponse> DispatchAsync(IncomingRequest request, TDep1 dep1, TDep2 dep2, TDep3 dep3, CancellationToken cancellationToken) Parameters Type Name Description IncomingRequest request The request being dispatch. TDep1 dep1 The first injected dependency. TDep2 dep2 The second injected dependency. TDep3 dep3 The third injected dependency. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask<OutgoingResponse> The dispatch response."
  },
  "api/IceRpc.IncomingFrame.html": {
    "href": "api/IceRpc.IncomingFrame.html",
    "title": "Class IncomingFrame | IceRPC",
    "keywords": "Class IncomingFrame Base class for incoming frames. Inheritance object IncomingFrame IncomingRequest IncomingResponse Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public class IncomingFrame Properties ConnectionContext Gets or sets the connection context. Declaration public IConnectionContext ConnectionContext { get; set; } Property Value Type Description IConnectionContext The IConnectionContext of this frame. Payload Gets or sets the payload of this frame. Declaration public PipeReader Payload { get; set; } Property Value Type Description PipeReader The payload of this frame. Defaults to a System.IO.Pipelines.PipeReader that returns an empty sequence. Remarks IceRPC completes the payload System.IO.Pipelines.PipeReader with the System.IO.Pipelines.PipeReader.Complete(System.Exception) method. It never calls System.IO.Pipelines.PipeReader.CompleteAsync(System.Exception). The implementation of System.IO.Pipelines.PipeReader.Complete(System.Exception) should not block. Protocol Gets the protocol of this frame. Declaration public Protocol Protocol { get; } Property Value Type Description Protocol The Protocol of this frame. Extension Methods IncomingFrameExtensions.DetachPayload(IncomingFrame)"
  },
  "api/IceRpc.IncomingRequest.html": {
    "href": "api/IceRpc.IncomingRequest.html",
    "title": "Class IncomingRequest | IceRPC",
    "keywords": "Class IncomingRequest Represents a request frame received by the application. Inheritance object IncomingFrame IncomingRequest Implements IDisposable Inherited Members IncomingFrame.ConnectionContext IncomingFrame.Payload IncomingFrame.Protocol object.GetType() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public sealed class IncomingRequest : IncomingFrame, IDisposable Constructors IncomingRequest(Protocol, IConnectionContext) Constructs an incoming request. Declaration public IncomingRequest(Protocol protocol, IConnectionContext connectionContext) Parameters Type Name Description Protocol protocol The protocol of this request. IConnectionContext connectionContext The connection context of the connection that received this request. Properties Features Gets or sets the features of this request. Declaration public IFeatureCollection Features { get; set; } Property Value Type Description IFeatureCollection The IFeatureCollection of this request. Defaults to Empty. Fields Gets or sets the fields of this request. Declaration public IDictionary<RequestFieldKey, ReadOnlySequence<byte>> Fields { get; set; } Property Value Type Description IDictionary<RequestFieldKey, ReadOnlySequence<byte>> The fields of this request. Defaults to System.Collections.Immutable.ImmutableDictionary`2.Empty. Fragment Gets or initializes the fragment of the target service. Declaration public string Fragment { get; init; } Property Value Type Description string The fragment of the target service. It is always the empty string with the icerpc protocol. Defaults to the empty string. IsOneway Gets a value indicating whether this request is one-way or two-way. Declaration public bool IsOneway { get; init; } Property Value Type Description bool true for one-way requests, false otherwise. The default is false. Operation Gets or initializes the name of the operation to call on the target service. Declaration public string Operation { get; init; } Property Value Type Description string The name of the operation. Defaults to the empty string. Path Gets or initializes the path of the target service. Declaration public string Path { get; init; } Property Value Type Description string The path of the target service. Defaults to /. Methods Dispose() Disposes this incoming request. This completes the payload of this request and the payload(s) of the response associated with this request (if set). Declaration public void Dispose() ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Implements System.IDisposable Extension Methods IncomingFrameExtensions.DetachPayload(IncomingFrame) IncomingRequestExtensions.CheckNonIdempotent(IncomingRequest) IncomingRequestExtensions.CreateSliceExceptionResponse(IncomingRequest, SliceException, SliceEncoding) IncomingRequestExtensions.DecodeArgsAsync<T>(IncomingRequest, SliceEncoding, DecodeFunc<T>, IActivator?, CancellationToken) IncomingRequestExtensions.DecodeEmptyArgsAsync(IncomingRequest, SliceEncoding, CancellationToken)"
  },
  "api/IceRpc.IncomingResponse.html": {
    "href": "api/IceRpc.IncomingResponse.html",
    "title": "Class IncomingResponse | IceRPC",
    "keywords": "Class IncomingResponse Represents a response protocol frame received by the application. Inheritance object IncomingFrame IncomingResponse Inherited Members IncomingFrame.ConnectionContext IncomingFrame.Payload IncomingFrame.Protocol object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public sealed class IncomingResponse : IncomingFrame Constructors IncomingResponse(OutgoingRequest, IConnectionContext, StatusCode, string?, IDictionary<ResponseFieldKey, ReadOnlySequence<byte>>) Constructs an incoming response. Declaration public IncomingResponse(OutgoingRequest request, IConnectionContext connectionContext, StatusCode statusCode, string? errorMessage, IDictionary<ResponseFieldKey, ReadOnlySequence<byte>> fields) Parameters Type Name Description OutgoingRequest request The corresponding outgoing request. IConnectionContext connectionContext The connection context of the connection that received this response. StatusCode statusCode The status code of this response. string errorMessage The error message of this response. IDictionary<ResponseFieldKey, ReadOnlySequence<byte>> fields The fields of this response. IncomingResponse(OutgoingRequest, IConnectionContext, StatusCode, string?) Constructs an incoming response with empty fields. Declaration public IncomingResponse(OutgoingRequest request, IConnectionContext connectionContext, StatusCode statusCode = StatusCode.Success, string? errorMessage = null) Parameters Type Name Description OutgoingRequest request The corresponding outgoing request. IConnectionContext connectionContext The connection context of the connection that received this response. StatusCode statusCode The status code of this response. string errorMessage The error message of this response. Properties ErrorMessage Gets the error message of this response. Declaration public string? ErrorMessage { get; } Property Value Type Description string The error message of this response if StatusCode is different from Success; null otherwise. Fields Gets the fields of this incoming response. Declaration public IDictionary<ResponseFieldKey, ReadOnlySequence<byte>> Fields { get; } Property Value Type Description IDictionary<ResponseFieldKey, ReadOnlySequence<byte>> The fields of this incoming response. Defaults to System.Collections.Immutable.ImmutableDictionary`2.Empty. StatusCode Gets the StatusCode of this response. Declaration public StatusCode StatusCode { get; } Property Value Type Description StatusCode The StatusCode of this response. Extension Methods IncomingFrameExtensions.DetachPayload(IncomingFrame) IncomingResponseExtensions.DecodeReturnValueAsync<T>(IncomingResponse, OutgoingRequest, SliceEncoding, GenericProxy, DecodeFunc<T>, DecodeExceptionFunc?, IActivator?, CancellationToken) IncomingResponseExtensions.DecodeVoidReturnValueAsync(IncomingResponse, OutgoingRequest, SliceEncoding, GenericProxy, DecodeExceptionFunc?, IActivator?, CancellationToken)"
  },
  "api/IceRpc.InlineDispatcher.html": {
    "href": "api/IceRpc.InlineDispatcher.html",
    "title": "Class InlineDispatcher | IceRPC",
    "keywords": "Class InlineDispatcher Adapts a dispatcher delegate to the IDispatcher interface. Inheritance object InlineDispatcher Implements IDispatcher Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public class InlineDispatcher : IDispatcher Constructors InlineDispatcher(Func<IncomingRequest, CancellationToken, ValueTask<OutgoingResponse>>) Constructs an InlineDispatcher using a delegate. Declaration public InlineDispatcher(Func<IncomingRequest, CancellationToken, ValueTask<OutgoingResponse>> function) Parameters Type Name Description Func<IncomingRequest, CancellationToken, ValueTask<OutgoingResponse>> function The function that implements the dispatcher's DispatchAsync method. Methods DispatchAsync(IncomingRequest, CancellationToken) Dispatches an incoming request and returns the corresponding outgoing response. Declaration public ValueTask<OutgoingResponse> DispatchAsync(IncomingRequest request, CancellationToken cancellationToken = default) Parameters Type Name Description IncomingRequest request The incoming request being dispatched. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask<OutgoingResponse> The corresponding OutgoingResponse. Implements IDispatcher"
  },
  "api/IceRpc.InlineInvoker.html": {
    "href": "api/IceRpc.InlineInvoker.html",
    "title": "Class InlineInvoker | IceRPC",
    "keywords": "Class InlineInvoker Adapts a function to the IInvoker interface. Inheritance object InlineInvoker Implements IInvoker Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public class InlineInvoker : IInvoker Constructors InlineInvoker(Func<OutgoingRequest, CancellationToken, Task<IncomingResponse>>) Constructs an InlineInvoker using a function. Declaration public InlineInvoker(Func<OutgoingRequest, CancellationToken, Task<IncomingResponse>> function) Parameters Type Name Description Func<OutgoingRequest, CancellationToken, Task<IncomingResponse>> function The function that implements the invoker's InvokerAsync method. Methods InvokeAsync(OutgoingRequest, CancellationToken) Sends an outgoing request and returns the corresponding incoming response. Declaration public Task<IncomingResponse> InvokeAsync(OutgoingRequest request, CancellationToken cancellationToken = default) Parameters Type Name Description OutgoingRequest request The outgoing request being sent. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task<IncomingResponse> The corresponding IncomingResponse. Remarks When request is a two-way request, the returned task will not complete successfully until after the request's Payload is fully sent and the response is received from the peer. When the request is a one-way request, the returned task completes successfully with an empty response when the request's Payload is fully sent. For all requests (one-way and two-way), the sending of the request's PayloadContinuation can continue in a background task after the returned task has completed successfully. Implements IInvoker"
  },
  "api/IceRpc.InvalidReplicaGroupIdException.html": {
    "href": "api/IceRpc.InvalidReplicaGroupIdException.html",
    "title": "Class InvalidReplicaGroupIdException | IceRPC",
    "keywords": "Class InvalidReplicaGroupIdException This exception is thrown when the provided replica group is invalid. Inheritance object Exception DispatchException SliceException InvalidReplicaGroupIdException Implements ISerializable Inherited Members SliceException.Encode(ref SliceEncoder) DispatchException.ConvertToUnhandled DispatchException.StatusCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.Locator.dll Syntax [TypeId(\"::Ice::InvalidReplicaGroupIdException\")] public class InvalidReplicaGroupIdException : SliceException, ISerializable Constructors InvalidReplicaGroupIdException(ref SliceDecoder, string?) Declaration public InvalidReplicaGroupIdException(ref SliceDecoder decoder, string? message = null) Parameters Type Name Description SliceDecoder decoder string message InvalidReplicaGroupIdException(string?, Exception?) Constructs a new instance of InvalidReplicaGroupIdException. Declaration public InvalidReplicaGroupIdException(string? message = null, Exception? innerException = null) Parameters Type Name Description string message A message that describes the exception. Exception innerException The exception that is the cause of the current exception. Fields SliceTypeId Declaration public static readonly string SliceTypeId Field Value Type Description string Methods DecodeCore(ref SliceDecoder) Declaration protected override void DecodeCore(ref SliceDecoder decoder) Parameters Type Name Description SliceDecoder decoder Overrides SliceException.DecodeCore(ref SliceDecoder) EncodeCore(ref SliceEncoder) Declaration protected override void EncodeCore(ref SliceEncoder encoder) Parameters Type Name Description SliceEncoder encoder Overrides SliceException.EncodeCore(ref SliceEncoder) Implements System.Runtime.Serialization.ISerializable"
  },
  "api/IceRpc.IProcess.html": {
    "href": "api/IceRpc.IProcess.html",
    "title": "Interface IProcess | IceRPC",
    "keywords": "Interface IProcess The client-side interface for Slice interface Process. IProcessService. A server application managed by a locator implementation such as IceGrid hosts a Process service and registers a proxy to this service with the locator registry. See SetServerProcessProxyAsync(string, ProcessProxy, IFeatureCollection?, CancellationToken). Namespace: IceRpc Assembly: IceRpc.Locator.dll Syntax [TypeId(\"::Ice::Process\")] public interface IProcess Methods ShutdownAsync(IFeatureCollection?, CancellationToken) Initiates a graceful shutdown of the server application. Declaration Task ShutdownAsync(IFeatureCollection? features = null, CancellationToken cancellationToken = default) Parameters Type Name Description IFeatureCollection features The invocation features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task WriteMessageAsync(string, int, IFeatureCollection?, CancellationToken) Writes a message on the server application's stdout or stderr. Declaration Task WriteMessageAsync(string message, int fd, IFeatureCollection? features = null, CancellationToken cancellationToken = default) Parameters Type Name Description string message The message to write. int fd '1' for stdout, '2' for stderr. IFeatureCollection features The invocation features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task"
  },
  "api/IceRpc.IProcessService.html": {
    "href": "api/IceRpc.IProcessService.html",
    "title": "Interface IProcessService | IceRPC",
    "keywords": "Interface IProcessService Interface used to implement services for Slice interface Process. IProcess. A server application managed by a locator implementation such as IceGrid hosts a Process service and registers a proxy to this service with the locator registry. See SetServerProcessProxyAsync(string, ProcessProxy, IFeatureCollection?, CancellationToken). Namespace: IceRpc Assembly: IceRpc.Locator.dll Syntax [TypeId(\"::Ice::Process\")] public interface IProcessService Methods ShutdownAsync(IFeatureCollection, CancellationToken) Initiates a graceful shutdown of the server application. Declaration ValueTask ShutdownAsync(IFeatureCollection features, CancellationToken cancellationToken) Parameters Type Name Description IFeatureCollection features The dispatch features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask SliceDShutdownAsync(IProcessService, IncomingRequest, CancellationToken) Declaration [Operation(\"shutdown\")] protected static ValueTask<OutgoingResponse> SliceDShutdownAsync(IProcessService target, IncomingRequest request, CancellationToken cancellationToken) Parameters Type Name Description IProcessService target IncomingRequest request CancellationToken cancellationToken Returns Type Description ValueTask<OutgoingResponse> SliceDWriteMessageAsync(IProcessService, IncomingRequest, CancellationToken) Declaration [Operation(\"writeMessage\")] protected static ValueTask<OutgoingResponse> SliceDWriteMessageAsync(IProcessService target, IncomingRequest request, CancellationToken cancellationToken) Parameters Type Name Description IProcessService target IncomingRequest request CancellationToken cancellationToken Returns Type Description ValueTask<OutgoingResponse> WriteMessageAsync(string, int, IFeatureCollection, CancellationToken) Writes a message on the server application's stdout or stderr. Declaration ValueTask WriteMessageAsync(string message, int fd, IFeatureCollection features, CancellationToken cancellationToken) Parameters Type Name Description string message The message to write. int fd '1' for stdout, '2' for stderr. IFeatureCollection features The dispatch features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask"
  },
  "api/IceRpc.IProcessService.Request.html": {
    "href": "api/IceRpc.IProcessService.Request.html",
    "title": "Class IProcessService.Request | IceRPC",
    "keywords": "Class IProcessService.Request Provides static methods that read the arguments of requests. Inheritance object IProcessService.Request Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.Locator.dll Syntax public static class IProcessService.Request Methods WriteMessageAsync(IncomingRequest, CancellationToken) Decodes the arguments of operation WriteMessage. Declaration public static ValueTask<(string Message, int Fd)> WriteMessageAsync(IncomingRequest request, CancellationToken cancellationToken) Parameters Type Name Description IncomingRequest request CancellationToken cancellationToken Returns Type Description ValueTask<(string Message, int Fd)>"
  },
  "api/IceRpc.IProtocolConnection.html": {
    "href": "api/IceRpc.IProtocolConnection.html",
    "title": "Interface IProtocolConnection | IceRPC",
    "keywords": "Interface IProtocolConnection Represents a connection for a Protocol. It is the building block for ClientConnection, ConnectionCache and the connections created by Server. Applications can use this interface to build their own custom client connection and connection cache classes. Inherited Members IInvoker.InvokeAsync(OutgoingRequest, CancellationToken) IAsyncDisposable.DisposeAsync() Namespace: IceRpc Assembly: IceRpc.dll Syntax public interface IProtocolConnection : IInvoker, IAsyncDisposable Remarks The disposal of the protocol connection aborts invocations, cancels dispatches and disposes the underlying transport connection without waiting for the peer. To wait for invocations and dispatches to complete, call ShutdownAsync(CancellationToken) first. If the configured dispatcher does not complete promptly when its cancellation token is canceled, the disposal can hang. Methods ConnectAsync(CancellationToken) Establishes the connection to the peer. Declaration Task<(TransportConnectionInformation ConnectionInformation, Task ShutdownRequested)> ConnectAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task<(TransportConnectionInformation ConnectionInformation, Task ShutdownRequested)> A task that provides the TransportConnectionInformation of the transport connection and a task that completes when the connection itself wants to be shut down then disposed by the caller. This can happen when the peer initiates a shutdown, when the connection is inactive for too long (see InactivityTimeout), when the connection detects a protocol violation, or when the connection gets an error from its transport connection. This task can also complete with one of the following exceptions: System.Security.Authentication.AuthenticationExceptionif authentication failed. IceRpcExceptionif the connection establishment failed. System.OperationCanceledExceptionif cancellation was requested through the cancellation token. Exceptions Type Condition System.InvalidOperationException Thrown if this method is called more than once. System.ObjectDisposedException Thrown if this connection is disposed. See Also ClientProtocolConnectionFactory ShutdownAsync(CancellationToken) Gracefully shuts down the connection. Declaration Task ShutdownAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task A task that completes once the shutdown is complete. This task can also complete with one of the following exceptions: IceRpcExceptionif the connection shutdown failed. System.OperationCanceledExceptionif cancellation was requested through the cancellation token. Exceptions Type Condition System.InvalidOperationException Thrown if ConnectAsync(CancellationToken) did not complete successfully prior to this call, or if this method is called more than once. System.ObjectDisposedException Thrown if this connection is disposed. See Also ClientProtocolConnectionFactory See Also ClientProtocolConnectionFactory"
  },
  "api/IceRpc.Locator.html": {
    "href": "api/IceRpc.Locator.html",
    "title": "Namespace IceRpc.Locator | IceRPC",
    "keywords": "Namespace IceRpc.Locator Classes LocatorInterceptor A locator interceptor intercepts ice requests that have no server address and attempts to assign a usable server address (and alt-server addresses) to such requests via the IServerAddressFeature. You would usually install the retry interceptor before the locator interceptor in the invocation pipeline and use the connection cache invoker for the pipeline, with this setup the locator interceptor would be able to detect invocation retries and refreshes the server address when required, and the connection cache would take care of creating the connections for the resolved server address. LocatorLocationResolver Implements ILocationResolver using an ILocator. LocatorOptions A property bag used to configure a LocatorLocationResolver. Structs Location A location is either an adapter ID or a path. Interfaces ILocationResolver A location resolver resolves a location into one or more server addresses carried by a dummy service address, and optionally maintains a cache for these resolutions. It's the \"brain\" of LocatorInterceptor. The same location resolver can be shared by multiple locator interceptors. Enums LocationEventId This enum contains event ID constants used by log decorators of ILocationResolver, IServerAddressFinder and IServerAddressCache."
  },
  "api/IceRpc.Locator.ILocationResolver.html": {
    "href": "api/IceRpc.Locator.ILocationResolver.html",
    "title": "Interface ILocationResolver | IceRPC",
    "keywords": "Interface ILocationResolver A location resolver resolves a location into one or more server addresses carried by a dummy service address, and optionally maintains a cache for these resolutions. It's the \"brain\" of LocatorInterceptor. The same location resolver can be shared by multiple locator interceptors. Namespace: IceRpc.Locator Assembly: IceRpc.Locator.dll Syntax public interface ILocationResolver Methods ResolveAsync(Location, bool, CancellationToken) Resolves a location into one or more server addresses carried by a dummy service address. Declaration ValueTask<(ServiceAddress? ServiceAddress, bool FromCache)> ResolveAsync(Location location, bool refreshCache, CancellationToken cancellationToken) Parameters Type Name Description Location location The location to resolve. bool refreshCache When true, requests a cache refresh. CancellationToken cancellationToken The cancellation token. Returns Type Description ValueTask<(ServiceAddress ServiceAddress, bool FromCache)> A tuple with a nullable dummy service address that holds the server addresses (if resolved), and a bool that indicates whether these server addresses were retrieved from the implementation's cache. ServiceAddress is null when the location resolver fails to resolve a location. When ServiceAddress is not null, its ServerAddress is not null."
  },
  "api/IceRpc.Locator.Location.html": {
    "href": "api/IceRpc.Locator.Location.html",
    "title": "Struct Location | IceRPC",
    "keywords": "Struct Location A location is either an adapter ID or a path. Implements IEquatable<Location> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: IceRpc.Locator Assembly: IceRpc.Locator.dll Syntax public readonly struct Location : IEquatable<Location> Properties IsAdapterId Gets a value indicating whether or not this location holds an adapter ID; otherwise, false. Declaration public bool IsAdapterId { get; init; } Property Value Type Description bool Value Gets the adapter ID or path. Declaration public string Value { get; init; } Property Value Type Description string Methods Equals(Location) Declaration public bool Equals(Location other) Parameters Type Name Description Location other Returns Type Description bool Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides System.ValueType.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides System.ValueType.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description string Overrides System.ValueType.ToString() Operators operator ==(Location, Location) Declaration public static bool operator ==(Location left, Location right) Parameters Type Name Description Location left Location right Returns Type Description bool operator !=(Location, Location) Declaration public static bool operator !=(Location left, Location right) Parameters Type Name Description Location left Location right Returns Type Description bool Implements System.IEquatable<T>"
  },
  "api/IceRpc.Locator.LocationEventId.html": {
    "href": "api/IceRpc.Locator.LocationEventId.html",
    "title": "Enum LocationEventId | IceRPC",
    "keywords": "Enum LocationEventId This enum contains event ID constants used by log decorators of ILocationResolver, IServerAddressFinder and IServerAddressCache. Namespace: IceRpc.Locator Assembly: IceRpc.Locator.dll Syntax public enum LocationEventId Fields Name Description FailedToResolve The location resolver failed to resolve a location. FindFailed The server address finder failed to find server address(es) for the given location. Found The server address finder found server address(es) for the given location. FoundEntry The server address cache found the requested location. RemovedEntry An entry was removed from the server address cache. Resolved The location resolver successfully resolved a location. SetEntry An entry was set in the server address cache."
  },
  "api/IceRpc.Locator.LocatorInterceptor.html": {
    "href": "api/IceRpc.Locator.LocatorInterceptor.html",
    "title": "Class LocatorInterceptor | IceRPC",
    "keywords": "Class LocatorInterceptor A locator interceptor intercepts ice requests that have no server address and attempts to assign a usable server address (and alt-server addresses) to such requests via the IServerAddressFeature. You would usually install the retry interceptor before the locator interceptor in the invocation pipeline and use the connection cache invoker for the pipeline, with this setup the locator interceptor would be able to detect invocation retries and refreshes the server address when required, and the connection cache would take care of creating the connections for the resolved server address. Inheritance object LocatorInterceptor Implements IInvoker Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Locator Assembly: IceRpc.Locator.dll Syntax public class LocatorInterceptor : IInvoker Constructors LocatorInterceptor(IInvoker, ILocationResolver) Constructs a locator interceptor. Declaration public LocatorInterceptor(IInvoker next, ILocationResolver locationResolver) Parameters Type Name Description IInvoker next The next invoker in the invocation pipeline. ILocationResolver locationResolver The location resolver. It is usually a LocatorLocationResolver. Methods InvokeAsync(OutgoingRequest, CancellationToken) Sends an outgoing request and returns the corresponding incoming response. Declaration public Task<IncomingResponse> InvokeAsync(OutgoingRequest request, CancellationToken cancellationToken) Parameters Type Name Description OutgoingRequest request The outgoing request being sent. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task<IncomingResponse> The corresponding IncomingResponse. Remarks When request is a two-way request, the returned task will not complete successfully until after the request's Payload is fully sent and the response is received from the peer. When the request is a one-way request, the returned task completes successfully with an empty response when the request's Payload is fully sent. For all requests (one-way and two-way), the sending of the request's PayloadContinuation can continue in a background task after the returned task has completed successfully. Implements IInvoker"
  },
  "api/IceRpc.Locator.LocatorLocationResolver.html": {
    "href": "api/IceRpc.Locator.LocatorLocationResolver.html",
    "title": "Class LocatorLocationResolver | IceRPC",
    "keywords": "Class LocatorLocationResolver Implements ILocationResolver using an ILocator. Inheritance object LocatorLocationResolver Implements ILocationResolver Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Locator Assembly: IceRpc.Locator.dll Syntax public class LocatorLocationResolver : ILocationResolver Constructors LocatorLocationResolver(ILocator, LocatorOptions, ILogger) Constructs a locator location resolver. Declaration public LocatorLocationResolver(ILocator locator, LocatorOptions options, ILogger logger) Parameters Type Name Description ILocator locator The locator. LocatorOptions options The locator options. ILogger logger The logger. Methods ResolveAsync(Location, bool, CancellationToken) Resolves a location into one or more server addresses carried by a dummy service address. Declaration public ValueTask<(ServiceAddress? ServiceAddress, bool FromCache)> ResolveAsync(Location location, bool refreshCache, CancellationToken cancellationToken) Parameters Type Name Description Location location The location to resolve. bool refreshCache When true, requests a cache refresh. CancellationToken cancellationToken The cancellation token. Returns Type Description ValueTask<(ServiceAddress ServiceAddress, bool FromCache)> A tuple with a nullable dummy service address that holds the server addresses (if resolved), and a bool that indicates whether these server addresses were retrieved from the implementation's cache. ServiceAddress is null when the location resolver fails to resolve a location. When ServiceAddress is not null, its ServerAddress is not null. Implements ILocationResolver"
  },
  "api/IceRpc.Locator.LocatorOptions.html": {
    "href": "api/IceRpc.Locator.LocatorOptions.html",
    "title": "Class LocatorOptions | IceRPC",
    "keywords": "Class LocatorOptions A property bag used to configure a LocatorLocationResolver. Inheritance object LocatorOptions Implements IEquatable<LocatorOptions> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: IceRpc.Locator Assembly: IceRpc.Locator.dll Syntax public sealed record LocatorOptions : IEquatable<LocatorOptions> Constructors LocatorOptions() Declaration public LocatorOptions() Properties Background Gets or sets a value indicating whether or not the locator must enable background lookups. Declaration public bool Background { get; set; } Property Value Type Description bool When true, if the lookup finds a stale cache entry, it returns the stale entry's server address(es) and executes a call \"in the background\" to refresh this entry. Defaults to false, meaning the lookup does not return stale values. MaxCacheSize Gets or sets the maximum size of the cache. Declaration public int MaxCacheSize { get; set; } Property Value Type Description int The maximum size of the cache. 0 means no cache. Defaults to 100. RefreshThreshold Gets or sets the refresh threshold. When the age of a cache entry is less than or equal to this value, it's considered up to date and won't be updated even when the caller requests a refresh. Declaration public TimeSpan RefreshThreshold { get; set; } Property Value Type Description TimeSpan The refresh threshold. Defaults to 1 second. Ttl Gets or sets the time-to-live. This is the time period after which a cache entry is considered stale. Declaration public TimeSpan Ttl { get; set; } Property Value Type Description TimeSpan The time to live. Defaults to System.Threading.Timeout.InfiniteTimeSpan, meaning the cache entries never become stale. Methods <Clone>$() Declaration public LocatorOptions <Clone>$() Returns Type Description LocatorOptions Equals(LocatorOptions?) Declaration public bool Equals(LocatorOptions? other) Parameters Type Name Description LocatorOptions other Returns Type Description bool Equals(object?) Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Operators operator ==(LocatorOptions?, LocatorOptions?) Declaration public static bool operator ==(LocatorOptions? left, LocatorOptions? right) Parameters Type Name Description LocatorOptions left LocatorOptions right Returns Type Description bool operator !=(LocatorOptions?, LocatorOptions?) Declaration public static bool operator !=(LocatorOptions? left, LocatorOptions? right) Parameters Type Name Description LocatorOptions left LocatorOptions right Returns Type Description bool Implements System.IEquatable<T>"
  },
  "api/IceRpc.LocatorPipelineExtensions.html": {
    "href": "api/IceRpc.LocatorPipelineExtensions.html",
    "title": "Class LocatorPipelineExtensions | IceRPC",
    "keywords": "Class LocatorPipelineExtensions This class provides extension methods to install the locator interceptor in a Pipeline. Inheritance object LocatorPipelineExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.Locator.dll Syntax public static class LocatorPipelineExtensions Methods UseLocator(Pipeline, ILocator, ILoggerFactory) Adds a LocatorInterceptor to the pipeline, using the specified locator. Declaration public static Pipeline UseLocator(this Pipeline pipeline, ILocator locator, ILoggerFactory loggerFactory) Parameters Type Name Description Pipeline pipeline The pipeline being configured. ILocator locator The locator used for the resolutions. ILoggerFactory loggerFactory The logger factory used to create a Microsoft.Extensions.Logging.ILogger`1 for LocatorInterceptor. Returns Type Description Pipeline The pipeline being configured. UseLocator(Pipeline, ILocator) Adds a LocatorInterceptor to the pipeline, using the specified locator. Declaration public static Pipeline UseLocator(this Pipeline pipeline, ILocator locator) Parameters Type Name Description Pipeline pipeline The pipeline being configured. ILocator locator The locator used for the resolutions. Returns Type Description Pipeline The pipeline being configured. UseLocator(Pipeline, LocatorLocationResolver) Adds a LocatorInterceptor to the pipeline. Declaration public static Pipeline UseLocator(this Pipeline pipeline, LocatorLocationResolver locatorLocationResolver) Parameters Type Name Description Pipeline pipeline The pipeline being configured. LocatorLocationResolver locatorLocationResolver The locator-based location resolver instance. Returns Type Description Pipeline The pipeline being configured."
  },
  "api/IceRpc.LocatorProxy.html": {
    "href": "api/IceRpc.LocatorProxy.html",
    "title": "Struct LocatorProxy | IceRPC",
    "keywords": "Struct LocatorProxy Proxy record struct. It implements ILocator by sending requests to a remote IceRPC service. Implements ILocator IProxy IEquatable<LocatorProxy> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: IceRpc Assembly: IceRpc.Locator.dll Syntax [TypeId(\"::Ice::Locator\")] public readonly struct LocatorProxy : ILocator, IProxy, IEquatable<LocatorProxy> Constructors LocatorProxy() Constructs a proxy with the default service address and a null invoker. Declaration public LocatorProxy() LocatorProxy(IInvoker, ServiceAddress?, SliceEncodeOptions?) Constructs a proxy from an invoker, a service address and encode options. Declaration public LocatorProxy(IInvoker invoker, ServiceAddress? serviceAddress = null, SliceEncodeOptions? encodeOptions = null) Parameters Type Name Description IInvoker invoker The invocation pipeline of the proxy. ServiceAddress serviceAddress The service address. Null is equivalent to DefaultServiceAddress. SliceEncodeOptions encodeOptions The encode options, used to customize the encoding of request payloads. LocatorProxy(IInvoker, Uri, SliceEncodeOptions?) Constructs a proxy from an invoker, a service address URI and encode options. Declaration public LocatorProxy(IInvoker invoker, Uri serviceAddressUri, SliceEncodeOptions? encodeOptions = null) Parameters Type Name Description IInvoker invoker The invocation pipeline of the proxy. Uri serviceAddressUri A URI that represents a service address. SliceEncodeOptions encodeOptions The encode options, used to customize the encoding of request payloads. Properties DefaultServiceAddress Gets the default service address for services that implement Slice interface Locator. Its protocol is icerpc and its path is computed from the Slice interface name. Declaration public static ServiceAddress DefaultServiceAddress { get; } Property Value Type Description ServiceAddress EncodeOptions Gets or initializes the encode options, used to customize the encoding of payloads created from this proxy. Declaration public SliceEncodeOptions? EncodeOptions { get; init; } Property Value Type Description SliceEncodeOptions Invoker Gets or initializes the invocation pipeline of this proxy. Declaration public IInvoker? Invoker { get; init; } Property Value Type Description IInvoker ServiceAddress Gets or initializes the address of the remote service. Declaration public ServiceAddress ServiceAddress { get; init; } Property Value Type Description ServiceAddress Methods Equals(LocatorProxy) Declaration public bool Equals(LocatorProxy other) Parameters Type Name Description LocatorProxy other Returns Type Description bool Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides System.ValueType.Equals(object) FindAdapterByIdAsync(string, IFeatureCollection?, CancellationToken) Finds an object adapter by adapter ID and returns a dummy service address with the object adapter's server address(es). Declaration public Task<ServiceAddress?> FindAdapterByIdAsync(string id, IFeatureCollection? features = null, CancellationToken cancellationToken = default) Parameters Type Name Description string id The adapter ID. IFeatureCollection features The invocation features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task<ServiceAddress> A dummy service address with the adapter's server address(es), or null if an object adapter with adapter ID id was not found. Exceptions Type Condition AdapterNotFoundException Thrown if an object adapter with this adapter ID was not found. The caller should treat this exception like a null return value. FindObjectByIdAsync(string, IFeatureCollection?, CancellationToken) Finds a service by identity (path) and returns a dummy service address with the server address(es) that can be used to reach this service. This dummy service address can also carry no server address and require further resolution using FindAdapterByIdAsync(string, IFeatureCollection?, CancellationToken). Declaration public Task<ServiceAddress?> FindObjectByIdAsync(string id, IFeatureCollection? features = null, CancellationToken cancellationToken = default) Parameters Type Name Description string id The identity represented as a path. IFeatureCollection features The invocation features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task<ServiceAddress> A dummy service address, or null if a service with the requested identity (path) was not found. Exceptions Type Condition ObjectNotFoundException Thrown if a service with the requested identity (path) was not found. The caller should treat this exception like a null return value. FromPath(string) Creates a relative proxy from a path. Declaration public static LocatorProxy FromPath(string path) Parameters Type Name Description string path The path. Returns Type Description LocatorProxy The new relative proxy. GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides System.ValueType.GetHashCode() GetRegistryAsync(IFeatureCollection?, CancellationToken) Gets the locator registry. Declaration public Task<LocatorRegistryProxy?> GetRegistryAsync(IFeatureCollection? features = null, CancellationToken cancellationToken = default) Parameters Type Name Description IFeatureCollection features The invocation features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task<LocatorRegistryProxy?> The locator registry, or null if this locator has no associated registry. ToString() Declaration public override string ToString() Returns Type Description string Overrides System.ValueType.ToString() Operators operator ==(LocatorProxy, LocatorProxy) Declaration public static bool operator ==(LocatorProxy left, LocatorProxy right) Parameters Type Name Description LocatorProxy left LocatorProxy right Returns Type Description bool operator !=(LocatorProxy, LocatorProxy) Declaration public static bool operator !=(LocatorProxy left, LocatorProxy right) Parameters Type Name Description LocatorProxy left LocatorProxy right Returns Type Description bool Implements ILocator IProxy System.IEquatable<T>"
  },
  "api/IceRpc.LocatorProxy.Request.html": {
    "href": "api/IceRpc.LocatorProxy.Request.html",
    "title": "Class LocatorProxy.Request | IceRPC",
    "keywords": "Class LocatorProxy.Request Converts the arguments of each operation that takes arguments into a request payload. Inheritance object LocatorProxy.Request Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.Locator.dll Syntax public static class LocatorProxy.Request Methods FindAdapterById(string, SliceEncodeOptions?) Creates the request payload for operation findAdapterById. Declaration public static PipeReader FindAdapterById(string id, SliceEncodeOptions? encodeOptions = null) Parameters Type Name Description string id The adapter ID. SliceEncodeOptions encodeOptions The Slice encode options. Returns Type Description PipeReader The payload encoded with Slice1. FindObjectById(string, SliceEncodeOptions?) Creates the request payload for operation findObjectById. Declaration public static PipeReader FindObjectById(string id, SliceEncodeOptions? encodeOptions = null) Parameters Type Name Description string id The identity represented as a path. SliceEncodeOptions encodeOptions The Slice encode options. Returns Type Description PipeReader The payload encoded with Slice1."
  },
  "api/IceRpc.LocatorProxy.Response.html": {
    "href": "api/IceRpc.LocatorProxy.Response.html",
    "title": "Class LocatorProxy.Response | IceRPC",
    "keywords": "Class LocatorProxy.Response Holds a ResponseDecodeFunc<T> for each remote operation defined in ILocator. Inheritance object LocatorProxy.Response Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.Locator.dll Syntax public static class LocatorProxy.Response Methods FindAdapterByIdAsync(IncomingResponse, OutgoingRequest, GenericProxy, CancellationToken) The ResponseDecodeFunc<T> for operation findAdapterById. Declaration public static ValueTask<ServiceAddress?> FindAdapterByIdAsync(IncomingResponse response, OutgoingRequest request, GenericProxy sender, CancellationToken cancellationToken) Parameters Type Name Description IncomingResponse response OutgoingRequest request GenericProxy sender CancellationToken cancellationToken Returns Type Description ValueTask<ServiceAddress> FindObjectByIdAsync(IncomingResponse, OutgoingRequest, GenericProxy, CancellationToken) The ResponseDecodeFunc<T> for operation findObjectById. Declaration public static ValueTask<ServiceAddress?> FindObjectByIdAsync(IncomingResponse response, OutgoingRequest request, GenericProxy sender, CancellationToken cancellationToken) Parameters Type Name Description IncomingResponse response OutgoingRequest request GenericProxy sender CancellationToken cancellationToken Returns Type Description ValueTask<ServiceAddress> GetRegistryAsync(IncomingResponse, OutgoingRequest, GenericProxy, CancellationToken) The ResponseDecodeFunc<T> for operation getRegistry. Declaration public static ValueTask<LocatorRegistryProxy?> GetRegistryAsync(IncomingResponse response, OutgoingRequest request, GenericProxy sender, CancellationToken cancellationToken) Parameters Type Name Description IncomingResponse response OutgoingRequest request GenericProxy sender CancellationToken cancellationToken Returns Type Description ValueTask<LocatorRegistryProxy?>"
  },
  "api/IceRpc.LocatorRegistryProxy.html": {
    "href": "api/IceRpc.LocatorRegistryProxy.html",
    "title": "Struct LocatorRegistryProxy | IceRPC",
    "keywords": "Struct LocatorRegistryProxy Proxy record struct. It implements ILocatorRegistry by sending requests to a remote IceRPC service. Implements ILocatorRegistry IProxy IEquatable<LocatorRegistryProxy> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: IceRpc Assembly: IceRpc.Locator.dll Syntax [TypeId(\"::Ice::LocatorRegistry\")] public readonly struct LocatorRegistryProxy : ILocatorRegistry, IProxy, IEquatable<LocatorRegistryProxy> Constructors LocatorRegistryProxy() Constructs a proxy with the default service address and a null invoker. Declaration public LocatorRegistryProxy() LocatorRegistryProxy(IInvoker, ServiceAddress?, SliceEncodeOptions?) Constructs a proxy from an invoker, a service address and encode options. Declaration public LocatorRegistryProxy(IInvoker invoker, ServiceAddress? serviceAddress = null, SliceEncodeOptions? encodeOptions = null) Parameters Type Name Description IInvoker invoker The invocation pipeline of the proxy. ServiceAddress serviceAddress The service address. Null is equivalent to DefaultServiceAddress. SliceEncodeOptions encodeOptions The encode options, used to customize the encoding of request payloads. LocatorRegistryProxy(IInvoker, Uri, SliceEncodeOptions?) Constructs a proxy from an invoker, a service address URI and encode options. Declaration public LocatorRegistryProxy(IInvoker invoker, Uri serviceAddressUri, SliceEncodeOptions? encodeOptions = null) Parameters Type Name Description IInvoker invoker The invocation pipeline of the proxy. Uri serviceAddressUri A URI that represents a service address. SliceEncodeOptions encodeOptions The encode options, used to customize the encoding of request payloads. Properties DefaultServiceAddress Gets the default service address for services that implement Slice interface LocatorRegistry. Its protocol is icerpc and its path is computed from the Slice interface name. Declaration public static ServiceAddress DefaultServiceAddress { get; } Property Value Type Description ServiceAddress EncodeOptions Gets or initializes the encode options, used to customize the encoding of payloads created from this proxy. Declaration public SliceEncodeOptions? EncodeOptions { get; init; } Property Value Type Description SliceEncodeOptions Invoker Gets or initializes the invocation pipeline of this proxy. Declaration public IInvoker? Invoker { get; init; } Property Value Type Description IInvoker ServiceAddress Gets or initializes the address of the remote service. Declaration public ServiceAddress ServiceAddress { get; init; } Property Value Type Description ServiceAddress Methods Equals(LocatorRegistryProxy) Declaration public bool Equals(LocatorRegistryProxy other) Parameters Type Name Description LocatorRegistryProxy other Returns Type Description bool Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides System.ValueType.Equals(object) FromPath(string) Creates a relative proxy from a path. Declaration public static LocatorRegistryProxy FromPath(string path) Parameters Type Name Description string path The path. Returns Type Description LocatorRegistryProxy The new relative proxy. GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides System.ValueType.GetHashCode() SetAdapterDirectProxyAsync(string, ServiceAddress?, IFeatureCollection?, CancellationToken) Registers or unregisters the server addresses of an object adapter. Declaration public Task SetAdapterDirectProxyAsync(string id, ServiceAddress? proxy, IFeatureCollection? features = null, CancellationToken cancellationToken = default) Parameters Type Name Description string id The adapter ID. ServiceAddress proxy A dummy service address created by the object adapter. proxy carries the object adapter's server addresses. The locator considers an object adapter to be active after it has registered its server addresses. When proxy is null, the server addresses are unregistered and the locator considers the object adapter inactive. IFeatureCollection features The invocation features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task Exceptions Type Condition AdapterNotFoundException Thrown if the locator only allows registered object adapters to register their active server addresses and no object adapter with this adapter ID was registered with the locator. AdapterAlreadyActiveException Thrown if an object adapter with the same adapter ID has already registered its server addresses. SetReplicatedAdapterDirectProxyAsync(string, string, ServiceAddress?, IFeatureCollection?, CancellationToken) Registers or unregisters the server addresses of an object adapter. This object adapter is a member of a replica group. Declaration public Task SetReplicatedAdapterDirectProxyAsync(string adapterId, string replicaGroupId, ServiceAddress? proxy, IFeatureCollection? features = null, CancellationToken cancellationToken = default) Parameters Type Name Description string adapterId The adapter ID. string replicaGroupId The replica group ID. ServiceAddress proxy A dummy service address created by the object adapter. proxy carries the object adapter's server addresses. The locator considers an object adapter to be active after it has registered its server addresses. When proxy is null, the server addresses are unregistered and the locator considers the object adapter inactive. IFeatureCollection features The invocation features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task Exceptions Type Condition AdapterNotFoundException Thrown if the locator only allows registered object adapters to register their active server addresses and no object adapter with this adapter ID was registered with the locator. AdapterAlreadyActiveException Thrown if an object adapter with the same adapter ID has already registered its server addresses. InvalidReplicaGroupIdException Thrown if the given replica group does not match the replica group associated with the adapter ID in the locator's database. SetServerProcessProxyAsync(string, ProcessProxy, IFeatureCollection?, CancellationToken) Registers a proxy for the IProcess service of a server application. Declaration public Task SetServerProcessProxyAsync(string serverId, ProcessProxy proxy, IFeatureCollection? features = null, CancellationToken cancellationToken = default) Parameters Type Name Description string serverId The server ID. ProcessProxy proxy A proxy for the Process service of the server application. IFeatureCollection features The invocation features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task Exceptions Type Condition ServerNotFoundException Thrown if the locator does not know a server application with this server ID. ToString() Declaration public override string ToString() Returns Type Description string Overrides System.ValueType.ToString() Operators operator ==(LocatorRegistryProxy, LocatorRegistryProxy) Declaration public static bool operator ==(LocatorRegistryProxy left, LocatorRegistryProxy right) Parameters Type Name Description LocatorRegistryProxy left LocatorRegistryProxy right Returns Type Description bool operator !=(LocatorRegistryProxy, LocatorRegistryProxy) Declaration public static bool operator !=(LocatorRegistryProxy left, LocatorRegistryProxy right) Parameters Type Name Description LocatorRegistryProxy left LocatorRegistryProxy right Returns Type Description bool Implements ILocatorRegistry IProxy System.IEquatable<T>"
  },
  "api/IceRpc.LocatorRegistryProxy.Request.html": {
    "href": "api/IceRpc.LocatorRegistryProxy.Request.html",
    "title": "Class LocatorRegistryProxy.Request | IceRPC",
    "keywords": "Class LocatorRegistryProxy.Request Converts the arguments of each operation that takes arguments into a request payload. Inheritance object LocatorRegistryProxy.Request Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.Locator.dll Syntax public static class LocatorRegistryProxy.Request Methods SetAdapterDirectProxy(string, ServiceAddress?, SliceEncodeOptions?) Creates the request payload for operation setAdapterDirectProxy. Declaration public static PipeReader SetAdapterDirectProxy(string id, ServiceAddress? proxy, SliceEncodeOptions? encodeOptions = null) Parameters Type Name Description string id The adapter ID. ServiceAddress proxy A dummy service address created by the object adapter. proxy carries the object adapter's server addresses. The locator considers an object adapter to be active after it has registered its server addresses. When proxy is null, the server addresses are unregistered and the locator considers the object adapter inactive. SliceEncodeOptions encodeOptions The Slice encode options. Returns Type Description PipeReader The payload encoded with Slice1. SetReplicatedAdapterDirectProxy(string, string, ServiceAddress?, SliceEncodeOptions?) Creates the request payload for operation setReplicatedAdapterDirectProxy. Declaration public static PipeReader SetReplicatedAdapterDirectProxy(string adapterId, string replicaGroupId, ServiceAddress? proxy, SliceEncodeOptions? encodeOptions = null) Parameters Type Name Description string adapterId The adapter ID. string replicaGroupId The replica group ID. ServiceAddress proxy A dummy service address created by the object adapter. proxy carries the object adapter's server addresses. The locator considers an object adapter to be active after it has registered its server addresses. When proxy is null, the server addresses are unregistered and the locator considers the object adapter inactive. SliceEncodeOptions encodeOptions The Slice encode options. Returns Type Description PipeReader The payload encoded with Slice1. SetServerProcessProxy(string, ProcessProxy, SliceEncodeOptions?) Creates the request payload for operation setServerProcessProxy. Declaration public static PipeReader SetServerProcessProxy(string serverId, ProcessProxy proxy, SliceEncodeOptions? encodeOptions = null) Parameters Type Name Description string serverId The server ID. ProcessProxy proxy A proxy for the Process service of the server application. SliceEncodeOptions encodeOptions The Slice encode options. Returns Type Description PipeReader The payload encoded with Slice1."
  },
  "api/IceRpc.LocatorRegistryProxy.Response.html": {
    "href": "api/IceRpc.LocatorRegistryProxy.Response.html",
    "title": "Class LocatorRegistryProxy.Response | IceRPC",
    "keywords": "Class LocatorRegistryProxy.Response Holds a ResponseDecodeFunc<T> for each remote operation defined in ILocatorRegistry. Inheritance object LocatorRegistryProxy.Response Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.Locator.dll Syntax public static class LocatorRegistryProxy.Response Methods SetAdapterDirectProxyAsync(IncomingResponse, OutgoingRequest, GenericProxy, CancellationToken) The ResponseDecodeFunc for operation setAdapterDirectProxy. Declaration public static ValueTask SetAdapterDirectProxyAsync(IncomingResponse response, OutgoingRequest request, GenericProxy sender, CancellationToken cancellationToken) Parameters Type Name Description IncomingResponse response OutgoingRequest request GenericProxy sender CancellationToken cancellationToken Returns Type Description ValueTask SetReplicatedAdapterDirectProxyAsync(IncomingResponse, OutgoingRequest, GenericProxy, CancellationToken) The ResponseDecodeFunc for operation setReplicatedAdapterDirectProxy. Declaration public static ValueTask SetReplicatedAdapterDirectProxyAsync(IncomingResponse response, OutgoingRequest request, GenericProxy sender, CancellationToken cancellationToken) Parameters Type Name Description IncomingResponse response OutgoingRequest request GenericProxy sender CancellationToken cancellationToken Returns Type Description ValueTask SetServerProcessProxyAsync(IncomingResponse, OutgoingRequest, GenericProxy, CancellationToken) The ResponseDecodeFunc for operation setServerProcessProxy. Declaration public static ValueTask SetServerProcessProxyAsync(IncomingResponse response, OutgoingRequest request, GenericProxy sender, CancellationToken cancellationToken) Parameters Type Name Description IncomingResponse response OutgoingRequest request GenericProxy sender CancellationToken cancellationToken Returns Type Description ValueTask"
  },
  "api/IceRpc.Logger.html": {
    "href": "api/IceRpc.Logger.html",
    "title": "Namespace IceRpc.Logger | IceRPC",
    "keywords": "Namespace IceRpc.Logger Classes LoggerInterceptor An interceptor that writes a log entry to an Microsoft.Extensions.Logging.ILogger for each invocation. LoggerMiddleware A middleware that writes a log entry to an Microsoft.Extensions.Logging.ILogger for each dispatch. Enums LoggerInterceptorEventId This enumeration contains event ID constants used by the logger interceptor. LoggerMiddlewareEventId This enumeration contains event ID constants used by the logger middleware."
  },
  "api/IceRpc.Logger.LoggerInterceptor.html": {
    "href": "api/IceRpc.Logger.LoggerInterceptor.html",
    "title": "Class LoggerInterceptor | IceRPC",
    "keywords": "Class LoggerInterceptor An interceptor that writes a log entry to an Microsoft.Extensions.Logging.ILogger for each invocation. Inheritance object LoggerInterceptor Implements IInvoker Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Logger Assembly: IceRpc.Logger.dll Syntax public class LoggerInterceptor : IInvoker Constructors LoggerInterceptor(IInvoker, ILogger) Constructs a logger interceptor. Declaration public LoggerInterceptor(IInvoker next, ILogger logger) Parameters Type Name Description IInvoker next The next invoker in the invocation pipeline. ILogger logger The logger to log to. Methods InvokeAsync(OutgoingRequest, CancellationToken) Sends an outgoing request and returns the corresponding incoming response. Declaration public Task<IncomingResponse> InvokeAsync(OutgoingRequest request, CancellationToken cancellationToken) Parameters Type Name Description OutgoingRequest request The outgoing request being sent. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task<IncomingResponse> The corresponding IncomingResponse. Remarks When request is a two-way request, the returned task will not complete successfully until after the request's Payload is fully sent and the response is received from the peer. When the request is a one-way request, the returned task completes successfully with an empty response when the request's Payload is fully sent. For all requests (one-way and two-way), the sending of the request's PayloadContinuation can continue in a background task after the returned task has completed successfully. Implements IInvoker"
  },
  "api/IceRpc.Logger.LoggerInterceptorEventId.html": {
    "href": "api/IceRpc.Logger.LoggerInterceptorEventId.html",
    "title": "Enum LoggerInterceptorEventId | IceRPC",
    "keywords": "Enum LoggerInterceptorEventId This enumeration contains event ID constants used by the logger interceptor. Namespace: IceRpc.Logger Assembly: IceRpc.Logger.dll Syntax public enum LoggerInterceptorEventId Fields Name Description Invoke The invocation was successful as far as IceRPC is concerned. Its result type can nevertheless contain a failure. InvokeException The invocation failed with an exception."
  },
  "api/IceRpc.Logger.LoggerMiddleware.html": {
    "href": "api/IceRpc.Logger.LoggerMiddleware.html",
    "title": "Class LoggerMiddleware | IceRPC",
    "keywords": "Class LoggerMiddleware A middleware that writes a log entry to an Microsoft.Extensions.Logging.ILogger for each dispatch. Inheritance object LoggerMiddleware Implements IDispatcher Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Logger Assembly: IceRpc.Logger.dll Syntax public class LoggerMiddleware : IDispatcher Constructors LoggerMiddleware(IDispatcher, ILogger) Constructs a logger middleware. Declaration public LoggerMiddleware(IDispatcher next, ILogger logger) Parameters Type Name Description IDispatcher next The next dispatcher in the dispatch pipeline. ILogger logger The logger to log to. Methods DispatchAsync(IncomingRequest, CancellationToken) Dispatches an incoming request and returns the corresponding outgoing response. Declaration public ValueTask<OutgoingResponse> DispatchAsync(IncomingRequest request, CancellationToken cancellationToken) Parameters Type Name Description IncomingRequest request The incoming request being dispatched. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask<OutgoingResponse> The corresponding OutgoingResponse. Implements IDispatcher"
  },
  "api/IceRpc.Logger.LoggerMiddlewareEventId.html": {
    "href": "api/IceRpc.Logger.LoggerMiddlewareEventId.html",
    "title": "Enum LoggerMiddlewareEventId | IceRPC",
    "keywords": "Enum LoggerMiddlewareEventId This enumeration contains event ID constants used by the logger middleware. Namespace: IceRpc.Logger Assembly: IceRpc.Logger.dll Syntax public enum LoggerMiddlewareEventId Fields Name Description Dispatch The dispatch was successful as far as IceRPC is concerned. Its result type can nevertheless contain a failure. DispatchException The dispatch failed with an exception."
  },
  "api/IceRpc.LoggerPipelineExtensions.html": {
    "href": "api/IceRpc.LoggerPipelineExtensions.html",
    "title": "Class LoggerPipelineExtensions | IceRPC",
    "keywords": "Class LoggerPipelineExtensions This class provides extension methods to add the logger interceptor to a Pipeline. Inheritance object LoggerPipelineExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.Logger.dll Syntax public static class LoggerPipelineExtensions Methods UseLogger(Pipeline, ILogger) Adds a LoggerInterceptor to the pipeline. Declaration public static Pipeline UseLogger(this Pipeline pipeline, ILogger logger) Parameters Type Name Description Pipeline pipeline The pipeline being configured. ILogger logger The logger to log to. Returns Type Description Pipeline The pipeline being configured. UseLogger(Pipeline, ILoggerFactory) Adds a LoggerInterceptor to the pipeline. Declaration public static Pipeline UseLogger(this Pipeline pipeline, ILoggerFactory loggerFactory) Parameters Type Name Description Pipeline pipeline The pipeline being configured. ILoggerFactory loggerFactory The logger factory used to create a Microsoft.Extensions.Logging.ILogger`1 for LoggerInterceptor. Returns Type Description Pipeline The pipeline being configured."
  },
  "api/IceRpc.LoggerRouterExtensions.html": {
    "href": "api/IceRpc.LoggerRouterExtensions.html",
    "title": "Class LoggerRouterExtensions | IceRPC",
    "keywords": "Class LoggerRouterExtensions This class provides extension methods to add the logger middleware to a Router. Inheritance object LoggerRouterExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.Logger.dll Syntax public static class LoggerRouterExtensions Methods UseLogger(Router, ILogger) Adds a LoggerMiddleware to this router. Declaration public static Router UseLogger(this Router router, ILogger logger) Parameters Type Name Description Router router The router being configured. ILogger logger The logger to log to. Returns Type Description Router The router being configured. UseLogger(Router, ILoggerFactory) Adds a LoggerMiddleware to this router. Declaration public static Router UseLogger(this Router router, ILoggerFactory loggerFactory) Parameters Type Name Description Router router The router being configured. ILoggerFactory loggerFactory The logger factory used to create a Microsoft.Extensions.Logging.ILogger`1 for LoggerMiddleware. Returns Type Description Router The router being configured."
  },
  "api/IceRpc.Metrics.html": {
    "href": "api/IceRpc.Metrics.html",
    "title": "Namespace IceRpc.Metrics | IceRPC",
    "keywords": "Namespace IceRpc.Metrics Classes MetricsInterceptor An interceptor that publishes invocation metrics using a singleton meter named \"IceRpc.Invocation\". MetricsMiddleware A middleware that publishes dispatch metrics using a singleton meter named \"IceRpc.Dispatch\"."
  },
  "api/IceRpc.Metrics.MetricsInterceptor.html": {
    "href": "api/IceRpc.Metrics.MetricsInterceptor.html",
    "title": "Class MetricsInterceptor | IceRPC",
    "keywords": "Class MetricsInterceptor An interceptor that publishes invocation metrics using a singleton meter named \"IceRpc.Invocation\". Inheritance object MetricsInterceptor Implements IInvoker Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Metrics Assembly: IceRpc.Metrics.dll Syntax public class MetricsInterceptor : IInvoker Constructors MetricsInterceptor(IInvoker) Constructs a metrics interceptor. Declaration public MetricsInterceptor(IInvoker next) Parameters Type Name Description IInvoker next The next invoker in the invocation pipeline. See Also System.Diagnostics.Metrics.Meter Methods InvokeAsync(OutgoingRequest, CancellationToken) Sends an outgoing request and returns the corresponding incoming response. Declaration public Task<IncomingResponse> InvokeAsync(OutgoingRequest request, CancellationToken cancellationToken) Parameters Type Name Description OutgoingRequest request The outgoing request being sent. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task<IncomingResponse> The corresponding IncomingResponse. Remarks When request is a two-way request, the returned task will not complete successfully until after the request's Payload is fully sent and the response is received from the peer. When the request is a one-way request, the returned task completes successfully with an empty response when the request's Payload is fully sent. For all requests (one-way and two-way), the sending of the request's PayloadContinuation can continue in a background task after the returned task has completed successfully. See Also System.Diagnostics.Metrics.Meter Implements IInvoker See Also System.Diagnostics.Metrics.Meter"
  },
  "api/IceRpc.Metrics.MetricsMiddleware.html": {
    "href": "api/IceRpc.Metrics.MetricsMiddleware.html",
    "title": "Class MetricsMiddleware | IceRPC",
    "keywords": "Class MetricsMiddleware A middleware that publishes dispatch metrics using a singleton meter named \"IceRpc.Dispatch\". Inheritance object MetricsMiddleware Implements IDispatcher Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Metrics Assembly: IceRpc.Metrics.dll Syntax public class MetricsMiddleware : IDispatcher Constructors MetricsMiddleware(IDispatcher) Constructs a metrics middleware. Declaration public MetricsMiddleware(IDispatcher next) Parameters Type Name Description IDispatcher next The next dispatcher in the dispatch pipeline. See Also System.Diagnostics.Metrics.Meter Methods DispatchAsync(IncomingRequest, CancellationToken) Dispatches an incoming request and returns the corresponding outgoing response. Declaration public ValueTask<OutgoingResponse> DispatchAsync(IncomingRequest request, CancellationToken cancellationToken) Parameters Type Name Description IncomingRequest request The incoming request being dispatched. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask<OutgoingResponse> The corresponding OutgoingResponse. See Also System.Diagnostics.Metrics.Meter Implements IDispatcher See Also System.Diagnostics.Metrics.Meter"
  },
  "api/IceRpc.MetricsPipelineExtensions.html": {
    "href": "api/IceRpc.MetricsPipelineExtensions.html",
    "title": "Class MetricsPipelineExtensions | IceRPC",
    "keywords": "Class MetricsPipelineExtensions This class provides extension methods to add the metrics interceptor to a Pipeline. Inheritance object MetricsPipelineExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.Metrics.dll Syntax public static class MetricsPipelineExtensions Methods UseMetrics(Pipeline) Adds a MetricsInterceptor to the pipeline. Declaration public static Pipeline UseMetrics(this Pipeline pipeline) Parameters Type Name Description Pipeline pipeline The pipeline being configured. Returns Type Description Pipeline The pipeline being configured."
  },
  "api/IceRpc.MetricsRouterExtensions.html": {
    "href": "api/IceRpc.MetricsRouterExtensions.html",
    "title": "Class MetricsRouterExtensions | IceRPC",
    "keywords": "Class MetricsRouterExtensions This class provides extension methods to add the metrics middleware to a Router. Inheritance object MetricsRouterExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.Metrics.dll Syntax public static class MetricsRouterExtensions Methods UseMetrics(Router) Adds a MetricsMiddleware to the router. Declaration public static Router UseMetrics(this Router router) Parameters Type Name Description Router router The router being configured. Returns Type Description Router The router being configured."
  },
  "api/IceRpc.ObjectNotFoundException.html": {
    "href": "api/IceRpc.ObjectNotFoundException.html",
    "title": "Class ObjectNotFoundException | IceRPC",
    "keywords": "Class ObjectNotFoundException This exception is thrown when a service with the specified identity (path) was not found. Inheritance object Exception DispatchException SliceException ObjectNotFoundException Implements ISerializable Inherited Members SliceException.Encode(ref SliceEncoder) DispatchException.ConvertToUnhandled DispatchException.StatusCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.Locator.dll Syntax [TypeId(\"::Ice::ObjectNotFoundException\")] public class ObjectNotFoundException : SliceException, ISerializable Constructors ObjectNotFoundException(ref SliceDecoder, string?) Declaration public ObjectNotFoundException(ref SliceDecoder decoder, string? message = null) Parameters Type Name Description SliceDecoder decoder string message ObjectNotFoundException(string?, Exception?) Constructs a new instance of ObjectNotFoundException. Declaration public ObjectNotFoundException(string? message = null, Exception? innerException = null) Parameters Type Name Description string message A message that describes the exception. Exception innerException The exception that is the cause of the current exception. Fields SliceTypeId Declaration public static readonly string SliceTypeId Field Value Type Description string Methods DecodeCore(ref SliceDecoder) Declaration protected override void DecodeCore(ref SliceDecoder decoder) Parameters Type Name Description SliceDecoder decoder Overrides SliceException.DecodeCore(ref SliceDecoder) EncodeCore(ref SliceEncoder) Declaration protected override void EncodeCore(ref SliceEncoder encoder) Parameters Type Name Description SliceEncoder encoder Overrides SliceException.EncodeCore(ref SliceEncoder) Implements System.Runtime.Serialization.ISerializable"
  },
  "api/IceRpc.OutgoingFieldValue.html": {
    "href": "api/IceRpc.OutgoingFieldValue.html",
    "title": "Struct OutgoingFieldValue | IceRPC",
    "keywords": "Struct OutgoingFieldValue Represents the value of a field that is about to be sent. It's a kind of discriminated union: only one of the struct's properties can be set. Implements IEquatable<OutgoingFieldValue> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: IceRpc Assembly: IceRpc.dll Syntax public readonly struct OutgoingFieldValue : IEquatable<OutgoingFieldValue> Constructors OutgoingFieldValue(EncodeAction) Constructs an outgoing field value that holds an encode action. Declaration public OutgoingFieldValue(EncodeAction encodeAction) Parameters Type Name Description EncodeAction encodeAction The action used to encode the field value. OutgoingFieldValue(ReadOnlySequence<byte>) Constructs an outgoing field value that holds a byte sequence. Declaration public OutgoingFieldValue(ReadOnlySequence<byte> byteSequence) Parameters Type Name Description ReadOnlySequence<byte> byteSequence The field encoded value. Properties ByteSequence Gets the value of this outgoing field. Declaration public ReadOnlySequence<byte> ByteSequence { get; } Property Value Type Description ReadOnlySequence<byte> The value of this outgoing field. Defaults to an empty byte sequence. Remarks ByteSequence is set when the outgoing field value is constructed with OutgoingFieldValue(ReadOnlySequence<byte>). EncodeAction Gets the action used to encode the field value using the Slice2 encoding. The action is executed when the fields are about to be sent. Declaration public EncodeAction? EncodeAction { get; } Property Value Type Description EncodeAction The encode action of this outgoing field. Defaults to null. Remarks EncodeAction is set when the outgoing field value is constructed with OutgoingFieldValue(EncodeAction). Methods Encode(ref SliceEncoder, int) Encodes this field value using a Slice encoder. Declaration public void Encode(ref SliceEncoder encoder, int sizeLength = 2) Parameters Type Name Description SliceEncoder encoder The Slice encoder. int sizeLength The number of bytes to use to encode the size when EncodeAction is not null. Equals(OutgoingFieldValue) Declaration public bool Equals(OutgoingFieldValue other) Parameters Type Name Description OutgoingFieldValue other Returns Type Description bool Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides System.ValueType.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides System.ValueType.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description string Overrides System.ValueType.ToString() Operators operator ==(OutgoingFieldValue, OutgoingFieldValue) Declaration public static bool operator ==(OutgoingFieldValue left, OutgoingFieldValue right) Parameters Type Name Description OutgoingFieldValue left OutgoingFieldValue right Returns Type Description bool operator !=(OutgoingFieldValue, OutgoingFieldValue) Declaration public static bool operator !=(OutgoingFieldValue left, OutgoingFieldValue right) Parameters Type Name Description OutgoingFieldValue left OutgoingFieldValue right Returns Type Description bool Implements System.IEquatable<T>"
  },
  "api/IceRpc.OutgoingFrame.html": {
    "href": "api/IceRpc.OutgoingFrame.html",
    "title": "Class OutgoingFrame | IceRPC",
    "keywords": "Class OutgoingFrame Base class for outgoing frames. Inheritance object OutgoingFrame OutgoingRequest OutgoingResponse Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public abstract class OutgoingFrame Properties Payload Gets or sets the payload of this frame. Declaration public PipeReader Payload { get; set; } Property Value Type Description PipeReader The payload of this frame. Defaults to a System.IO.Pipelines.PipeReader that returns an empty sequence. Remarks IceRPC completes the payload System.IO.Pipelines.PipeReader with the System.IO.Pipelines.PipeReader.Complete(System.Exception) method. It never calls System.IO.Pipelines.PipeReader.CompleteAsync(System.Exception). The implementation of System.IO.Pipelines.PipeReader.Complete(System.Exception) should not block. PayloadContinuation Gets or sets the payload continuation of this frame. The payload continuation is a continuation of Payload. The receiver cannot distinguish any seam between payload and payload continuation in the Payload it receives. Declaration public PipeReader? PayloadContinuation { get; set; } Property Value Type Description PipeReader The payload continuation of this frame. Defaults to null meaning no continuation. Remarks IceRPC completes the payload continuation System.IO.Pipelines.PipeReader with the System.IO.Pipelines.PipeReader.Complete(System.Exception) method. It never calls System.IO.Pipelines.PipeReader.CompleteAsync(System.Exception). The implementation of System.IO.Pipelines.PipeReader.Complete(System.Exception) should not block. Protocol Gets the protocol of this frame. Declaration public Protocol Protocol { get; } Property Value Type Description Protocol The Protocol value of this frame. Methods Use(Func<PipeWriter, PipeWriter>) Installs a payload writer interceptor in this outgoing frame. This interceptor is executed just before sending Payload, and is typically used to compress both Payload and PayloadContinuation. Declaration public OutgoingFrame Use(Func<PipeWriter, PipeWriter> payloadWriterInterceptor) Parameters Type Name Description Func<PipeWriter, PipeWriter> payloadWriterInterceptor The payload writer interceptor to install. Returns Type Description OutgoingFrame This outgoing frame. Remarks IceRPC completes the payload writer System.IO.Pipelines.PipeWriter with the System.IO.Pipelines.PipeWriter.Complete(System.Exception) method. It never calls System.IO.Pipelines.PipeWriter.CompleteAsync(System.Exception). The implementation of System.IO.Pipelines.PipeWriter.Complete(System.Exception) should not block."
  },
  "api/IceRpc.OutgoingRequest.html": {
    "href": "api/IceRpc.OutgoingRequest.html",
    "title": "Class OutgoingRequest | IceRPC",
    "keywords": "Class OutgoingRequest Represents an ice or icerpc request frame sent by the application. Inheritance object OutgoingFrame OutgoingRequest Implements IDisposable Inherited Members OutgoingFrame.Use(Func<PipeWriter, PipeWriter>) OutgoingFrame.Payload OutgoingFrame.PayloadContinuation OutgoingFrame.Protocol object.GetType() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public sealed class OutgoingRequest : OutgoingFrame, IDisposable Constructors OutgoingRequest(ServiceAddress) Constructs an outgoing request. Declaration public OutgoingRequest(ServiceAddress serviceAddress) Parameters Type Name Description ServiceAddress serviceAddress The address of the target service. Properties Features Gets or sets the features of this request. Declaration public IFeatureCollection Features { get; set; } Property Value Type Description IFeatureCollection The IFeatureCollection of this request. Defaults to Empty. Fields Gets or sets the fields of this request. Declaration public IDictionary<RequestFieldKey, OutgoingFieldValue> Fields { get; set; } Property Value Type Description IDictionary<RequestFieldKey, OutgoingFieldValue> The fields of this request. Defaults to System.Collections.Immutable.ImmutableDictionary`2.Empty. IsOneway Gets a value indicating whether this request is one-way or two-way. Declaration public bool IsOneway { get; init; } Property Value Type Description bool true for one-way requests, false otherwise. The default is false. Operation Gets or initializes the name of the operation to call on the target service. Declaration public string Operation { get; init; } Property Value Type Description string The name of the operation. The default is the empty string. ServiceAddress Gets the address of the target service. Declaration public ServiceAddress ServiceAddress { get; } Property Value Type Description ServiceAddress The ServiceAddress of this request. Methods Dispose() Disposes this outgoing request. This completes the payload and payload continuation of this request, and the response associated with this request (if already received). Declaration public void Dispose() ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Implements System.IDisposable"
  },
  "api/IceRpc.OutgoingResponse.html": {
    "href": "api/IceRpc.OutgoingResponse.html",
    "title": "Class OutgoingResponse | IceRPC",
    "keywords": "Class OutgoingResponse Represents a response protocol frame sent by the application. Inheritance object OutgoingFrame OutgoingResponse Inherited Members OutgoingFrame.Use(Func<PipeWriter, PipeWriter>) OutgoingFrame.Payload OutgoingFrame.PayloadContinuation OutgoingFrame.Protocol object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public sealed class OutgoingResponse : OutgoingFrame Constructors OutgoingResponse(IncomingRequest, DispatchException) Constructs an outgoing response for a dispatch exception. Declaration public OutgoingResponse(IncomingRequest request, DispatchException dispatchException) Parameters Type Name Description IncomingRequest request The incoming request. DispatchException dispatchException The dispatchException. OutgoingResponse(IncomingRequest, StatusCode, string) Constructs an outgoing response. Declaration public OutgoingResponse(IncomingRequest request, StatusCode statusCode, string errorMessage) Parameters Type Name Description IncomingRequest request The incoming request. StatusCode statusCode The status code. It must be greater than Success. string errorMessage The error message. OutgoingResponse(IncomingRequest) Constructs an outgoing response with the Success status code and a null error message. Declaration public OutgoingResponse(IncomingRequest request) Parameters Type Name Description IncomingRequest request The incoming request. Properties ErrorMessage Gets the error message of this response. Declaration public string? ErrorMessage { get; } Property Value Type Description string The error message of this response if StatusCode is different from Success; null otherwise. Fields Gets or sets the fields of this response. Declaration public IDictionary<ResponseFieldKey, OutgoingFieldValue> Fields { get; set; } Property Value Type Description IDictionary<ResponseFieldKey, OutgoingFieldValue> The fields of this incoming response. Defaults to System.Collections.Immutable.ImmutableDictionary`2.Empty. StatusCode Gets the status code of this response. Declaration public StatusCode StatusCode { get; } Property Value Type Description StatusCode The StatusCode of this response."
  },
  "api/IceRpc.Pipeline.html": {
    "href": "api/IceRpc.Pipeline.html",
    "title": "Class Pipeline | IceRPC",
    "keywords": "Class Pipeline A pipeline is an invoker created from zero or more interceptors installed by calling Use(Func<IInvoker, IInvoker>), and a final invoker installed by calling Into(IInvoker). Requests using this pipeline flow through the interceptors into the last invoker. The last invoker then sends the request over a connection. Inheritance object Pipeline Implements IInvoker Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public sealed class Pipeline : IInvoker Constructors Pipeline() Constructs a pipeline. Declaration public Pipeline() Methods Into(IInvoker) Sets the last invoker of this pipeline. The pipeline flows into this invoker. Declaration public Pipeline Into(IInvoker lastInvoker) Parameters Type Name Description IInvoker lastInvoker The last invoker. Returns Type Description Pipeline This pipeline. Exceptions Type Condition System.InvalidOperationException Thrown if this method is called after the first call to InvokeAsync(OutgoingRequest, CancellationToken). InvokeAsync(OutgoingRequest, CancellationToken) Sends an outgoing request and returns the corresponding incoming response. Declaration public Task<IncomingResponse> InvokeAsync(OutgoingRequest request, CancellationToken cancellationToken = default) Parameters Type Name Description OutgoingRequest request The outgoing request being sent. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task<IncomingResponse> The corresponding IncomingResponse. Remarks When request is a two-way request, the returned task will not complete successfully until after the request's Payload is fully sent and the response is received from the peer. When the request is a one-way request, the returned task completes successfully with an empty response when the request's Payload is fully sent. For all requests (one-way and two-way), the sending of the request's PayloadContinuation can continue in a background task after the returned task has completed successfully. Use(Func<IInvoker, IInvoker>) Installs an interceptor at the end of the pipeline. Declaration public Pipeline Use(Func<IInvoker, IInvoker> interceptor) Parameters Type Name Description Func<IInvoker, IInvoker> interceptor The interceptor to install. Returns Type Description Pipeline This pipeline. Exceptions Type Condition System.InvalidOperationException Thrown if this method is called after the first call to InvokeAsync(OutgoingRequest, CancellationToken). Implements IInvoker Extension Methods PipelineExtensions.UseFeature<TFeature>(Pipeline, TFeature)"
  },
  "api/IceRpc.PipelineExtensions.html": {
    "href": "api/IceRpc.PipelineExtensions.html",
    "title": "Class PipelineExtensions | IceRPC",
    "keywords": "Class PipelineExtensions This class provide extension methods to add built-in interceptors to a Pipeline. Inheritance object PipelineExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public static class PipelineExtensions Methods UseFeature<TFeature>(Pipeline, TFeature) Adds an interceptor that sets a feature in all requests. Declaration public static Pipeline UseFeature<TFeature>(this Pipeline pipeline, TFeature feature) Parameters Type Name Description Pipeline pipeline The pipeline being configured. TFeature feature The value of the feature to set. Returns Type Description Pipeline The pipeline being configured. Type Parameters Name Description TFeature The type of the feature."
  },
  "api/IceRpc.ProcessProxy.html": {
    "href": "api/IceRpc.ProcessProxy.html",
    "title": "Struct ProcessProxy | IceRPC",
    "keywords": "Struct ProcessProxy Proxy record struct. It implements IProcess by sending requests to a remote IceRPC service. Implements IProcess IProxy IEquatable<ProcessProxy> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: IceRpc Assembly: IceRpc.Locator.dll Syntax [TypeId(\"::Ice::Process\")] public readonly struct ProcessProxy : IProcess, IProxy, IEquatable<ProcessProxy> Constructors ProcessProxy() Constructs a proxy with the default service address and a null invoker. Declaration public ProcessProxy() ProcessProxy(IInvoker, ServiceAddress?, SliceEncodeOptions?) Constructs a proxy from an invoker, a service address and encode options. Declaration public ProcessProxy(IInvoker invoker, ServiceAddress? serviceAddress = null, SliceEncodeOptions? encodeOptions = null) Parameters Type Name Description IInvoker invoker The invocation pipeline of the proxy. ServiceAddress serviceAddress The service address. Null is equivalent to DefaultServiceAddress. SliceEncodeOptions encodeOptions The encode options, used to customize the encoding of request payloads. ProcessProxy(IInvoker, Uri, SliceEncodeOptions?) Constructs a proxy from an invoker, a service address URI and encode options. Declaration public ProcessProxy(IInvoker invoker, Uri serviceAddressUri, SliceEncodeOptions? encodeOptions = null) Parameters Type Name Description IInvoker invoker The invocation pipeline of the proxy. Uri serviceAddressUri A URI that represents a service address. SliceEncodeOptions encodeOptions The encode options, used to customize the encoding of request payloads. Properties DefaultServiceAddress Gets the default service address for services that implement Slice interface Process. Its protocol is icerpc and its path is computed from the Slice interface name. Declaration public static ServiceAddress DefaultServiceAddress { get; } Property Value Type Description ServiceAddress EncodeOptions Gets or initializes the encode options, used to customize the encoding of payloads created from this proxy. Declaration public SliceEncodeOptions? EncodeOptions { get; init; } Property Value Type Description SliceEncodeOptions Invoker Gets or initializes the invocation pipeline of this proxy. Declaration public IInvoker? Invoker { get; init; } Property Value Type Description IInvoker ServiceAddress Gets or initializes the address of the remote service. Declaration public ServiceAddress ServiceAddress { get; init; } Property Value Type Description ServiceAddress Methods Equals(ProcessProxy) Declaration public bool Equals(ProcessProxy other) Parameters Type Name Description ProcessProxy other Returns Type Description bool Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides System.ValueType.Equals(object) FromPath(string) Creates a relative proxy from a path. Declaration public static ProcessProxy FromPath(string path) Parameters Type Name Description string path The path. Returns Type Description ProcessProxy The new relative proxy. GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides System.ValueType.GetHashCode() ShutdownAsync(IFeatureCollection?, CancellationToken) Initiates a graceful shutdown of the server application. Declaration public Task ShutdownAsync(IFeatureCollection? features = null, CancellationToken cancellationToken = default) Parameters Type Name Description IFeatureCollection features The invocation features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task ToString() Declaration public override string ToString() Returns Type Description string Overrides System.ValueType.ToString() WriteMessageAsync(string, int, IFeatureCollection?, CancellationToken) Writes a message on the server application's stdout or stderr. Declaration public Task WriteMessageAsync(string message, int fd, IFeatureCollection? features = null, CancellationToken cancellationToken = default) Parameters Type Name Description string message The message to write. int fd '1' for stdout, '2' for stderr. IFeatureCollection features The invocation features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task Operators operator ==(ProcessProxy, ProcessProxy) Declaration public static bool operator ==(ProcessProxy left, ProcessProxy right) Parameters Type Name Description ProcessProxy left ProcessProxy right Returns Type Description bool operator !=(ProcessProxy, ProcessProxy) Declaration public static bool operator !=(ProcessProxy left, ProcessProxy right) Parameters Type Name Description ProcessProxy left ProcessProxy right Returns Type Description bool Implements IProcess IProxy System.IEquatable<T>"
  },
  "api/IceRpc.ProcessProxy.Request.html": {
    "href": "api/IceRpc.ProcessProxy.Request.html",
    "title": "Class ProcessProxy.Request | IceRPC",
    "keywords": "Class ProcessProxy.Request Converts the arguments of each operation that takes arguments into a request payload. Inheritance object ProcessProxy.Request Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.Locator.dll Syntax public static class ProcessProxy.Request Methods WriteMessage(string, int, SliceEncodeOptions?) Creates the request payload for operation writeMessage. Declaration public static PipeReader WriteMessage(string message, int fd, SliceEncodeOptions? encodeOptions = null) Parameters Type Name Description string message The message to write. int fd '1' for stdout, '2' for stderr. SliceEncodeOptions encodeOptions The Slice encode options. Returns Type Description PipeReader The payload encoded with Slice1."
  },
  "api/IceRpc.ProcessProxy.Response.html": {
    "href": "api/IceRpc.ProcessProxy.Response.html",
    "title": "Class ProcessProxy.Response | IceRPC",
    "keywords": "Class ProcessProxy.Response Holds a ResponseDecodeFunc<T> for each remote operation defined in IProcess. Inheritance object ProcessProxy.Response Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.Locator.dll Syntax public static class ProcessProxy.Response Methods ShutdownAsync(IncomingResponse, OutgoingRequest, GenericProxy, CancellationToken) The ResponseDecodeFunc for operation shutdown. Declaration public static ValueTask ShutdownAsync(IncomingResponse response, OutgoingRequest request, GenericProxy sender, CancellationToken cancellationToken) Parameters Type Name Description IncomingResponse response OutgoingRequest request GenericProxy sender CancellationToken cancellationToken Returns Type Description ValueTask WriteMessageAsync(IncomingResponse, OutgoingRequest, GenericProxy, CancellationToken) The ResponseDecodeFunc for operation writeMessage. Declaration public static ValueTask WriteMessageAsync(IncomingResponse response, OutgoingRequest request, GenericProxy sender, CancellationToken cancellationToken) Parameters Type Name Description IncomingResponse response OutgoingRequest request GenericProxy sender CancellationToken cancellationToken Returns Type Description ValueTask"
  },
  "api/IceRpc.Protocol.html": {
    "href": "api/IceRpc.Protocol.html",
    "title": "Class Protocol | IceRPC",
    "keywords": "Class Protocol Protocol identifies a RPC protocol supported by IceRPC. Inheritance object Protocol Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public class Protocol Properties DefaultPort Gets the default port for this protocol. Declaration public ushort DefaultPort { get; } Property Value Type Description ushort The default port value. Defaults to 4061 for the ice protocol and 4062 for the icerpc protocol. HasFields Gets a value indicating whether or not this protocol supports arbitrary application-defined fields in request and response headers. Declaration public bool HasFields { get; } Property Value Type Description bool true if the protocol supports arbitrary fields; false otherwise. Ice Gets the ice protocol. Declaration public static Protocol Ice { get; } Property Value Type Description Protocol The Protocol instance for the ice protocol. IceRpc Gets the icerpc protocol. Declaration public static Protocol IceRpc { get; } Property Value Type Description Protocol The Protocol instance for the icerpc protocol. Name Gets the name of this protocol. Declaration public string Name { get; } Property Value Type Description string The protocol name. Methods Parse(string) Parses a string into a protocol. Declaration public static Protocol Parse(string name) Parameters Type Name Description string name The name of the protocol. Returns Type Description Protocol A protocol with the given name in lowercase. Exceptions Type Condition System.FormatException Thrown when name is not ice or icerpc. ToString() Converts this protocol into a string. Declaration public override string ToString() Returns Type Description string The name of the protocol. Overrides object.ToString() TryParse(string, out Protocol?) Tries to parse a string into a protocol. Declaration public static bool TryParse(string name, out Protocol? protocol) Parameters Type Name Description string name The name of the protocol. Protocol protocol The protocol parsed from the name. Returns Type Description bool true when name was successfully parsed into a protocol;false otherwise."
  },
  "api/IceRpc.ProtocolEventIds.html": {
    "href": "api/IceRpc.ProtocolEventIds.html",
    "title": "Enum ProtocolEventIds | IceRPC",
    "keywords": "Enum ProtocolEventIds This enum contains event ID constants used for protocol connection related logging. Namespace: IceRpc Assembly: IceRpc.dll Syntax public enum ProtocolEventIds Fields Name Description ConnectionAccepted The protocol listener accepted a new connection. ConnectionAcceptFailed The protocol listener failed to accept a new connection. This is a critical error. ConnectionAcceptFailedWithRetryableException The protocol listener failed to accept a new connection but continues accepting more connections. ConnectionConnected The connection establishment completed successfully. ConnectionConnectFailed The connection establishment failed. This is the last event for this connection. ConnectionDisposed A connected connection was disposed. This is the last event for this connection. ConnectionShutdown The shutdown of a connected connection completed successfully. ConnectionShutdownFailed The shutdown of a connected connection failed. DispatchFailed The dispatch started and failed to return a response. DispatchRefused The dispatch was refused before the incoming request could be read and decoded. RequestPayloadContinuationFailed The sending of the payload continuation of a request failed. StartAcceptingConnections The listener starts accepting connections. StopAcceptingConnections The listener stops accepting connections."
  },
  "api/IceRpc.RequestContext.html": {
    "href": "api/IceRpc.RequestContext.html",
    "title": "Namespace IceRpc.RequestContext | IceRPC",
    "keywords": "Namespace IceRpc.RequestContext Classes RequestContextFeature The default implementation of IRequestContextFeature. RequestContextInterceptor An interceptor that encodes the request context into a request field. RequestContextMiddleware A middleware that decodes the request context field into a request context feature. Interfaces IRequestContextFeature A feature that represents an dictionary{string, string} that can be transmitted with both ice and icerpc requests. This feature is encoded and decoded by the IceRPC core."
  },
  "api/IceRpc.RequestContext.IRequestContextFeature.html": {
    "href": "api/IceRpc.RequestContext.IRequestContextFeature.html",
    "title": "Interface IRequestContextFeature | IceRPC",
    "keywords": "Interface IRequestContextFeature A feature that represents an dictionary{string, string} that can be transmitted with both ice and icerpc requests. This feature is encoded and decoded by the IceRPC core. Namespace: IceRpc.RequestContext Assembly: IceRpc.RequestContext.dll Syntax public interface IRequestContextFeature Properties Value Gets or sets the value of this context feature. Declaration IDictionary<string, string> Value { get; set; } Property Value Type Description IDictionary<string, string> The request context feature."
  },
  "api/IceRpc.RequestContext.RequestContextFeature.html": {
    "href": "api/IceRpc.RequestContext.RequestContextFeature.html",
    "title": "Class RequestContextFeature | IceRPC",
    "keywords": "Class RequestContextFeature The default implementation of IRequestContextFeature. Inheritance object RequestContextFeature Implements IRequestContextFeature Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.RequestContext Assembly: IceRpc.RequestContext.dll Syntax public sealed class RequestContextFeature : IRequestContextFeature Constructors RequestContextFeature() Declaration public RequestContextFeature() Properties Value Gets or sets the value of this context feature. Declaration public IDictionary<string, string> Value { get; set; } Property Value Type Description IDictionary<string, string> The request context feature. Implements IRequestContextFeature"
  },
  "api/IceRpc.RequestContext.RequestContextInterceptor.html": {
    "href": "api/IceRpc.RequestContext.RequestContextInterceptor.html",
    "title": "Class RequestContextInterceptor | IceRPC",
    "keywords": "Class RequestContextInterceptor An interceptor that encodes the request context into a request field. Inheritance object RequestContextInterceptor Implements IInvoker Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.RequestContext Assembly: IceRpc.RequestContext.dll Syntax public class RequestContextInterceptor : IInvoker Constructors RequestContextInterceptor(IInvoker) Constructs a request context interceptor. Declaration public RequestContextInterceptor(IInvoker next) Parameters Type Name Description IInvoker next The next invoker in the invocation pipeline. Methods InvokeAsync(OutgoingRequest, CancellationToken) Sends an outgoing request and returns the corresponding incoming response. Declaration public Task<IncomingResponse> InvokeAsync(OutgoingRequest request, CancellationToken cancellationToken) Parameters Type Name Description OutgoingRequest request The outgoing request being sent. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task<IncomingResponse> The corresponding IncomingResponse. Remarks When request is a two-way request, the returned task will not complete successfully until after the request's Payload is fully sent and the response is received from the peer. When the request is a one-way request, the returned task completes successfully with an empty response when the request's Payload is fully sent. For all requests (one-way and two-way), the sending of the request's PayloadContinuation can continue in a background task after the returned task has completed successfully. Implements IInvoker"
  },
  "api/IceRpc.RequestContext.RequestContextMiddleware.html": {
    "href": "api/IceRpc.RequestContext.RequestContextMiddleware.html",
    "title": "Class RequestContextMiddleware | IceRPC",
    "keywords": "Class RequestContextMiddleware A middleware that decodes the request context field into a request context feature. Inheritance object RequestContextMiddleware Implements IDispatcher Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.RequestContext Assembly: IceRpc.RequestContext.dll Syntax public class RequestContextMiddleware : IDispatcher Constructors RequestContextMiddleware(IDispatcher) Constructs a request context middleware. Declaration public RequestContextMiddleware(IDispatcher next) Parameters Type Name Description IDispatcher next The next dispatcher in the dispatch pipeline. Methods DispatchAsync(IncomingRequest, CancellationToken) Dispatches an incoming request and returns the corresponding outgoing response. Declaration public ValueTask<OutgoingResponse> DispatchAsync(IncomingRequest request, CancellationToken cancellationToken) Parameters Type Name Description IncomingRequest request The incoming request being dispatched. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask<OutgoingResponse> The corresponding OutgoingResponse. Implements IDispatcher"
  },
  "api/IceRpc.RequestContextPipelineExtensions.html": {
    "href": "api/IceRpc.RequestContextPipelineExtensions.html",
    "title": "Class RequestContextPipelineExtensions | IceRPC",
    "keywords": "Class RequestContextPipelineExtensions This class provides extension methods to add the request context interceptor to a Pipeline. Inheritance object RequestContextPipelineExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.RequestContext.dll Syntax public static class RequestContextPipelineExtensions Methods UseRequestContext(Pipeline) Adds a RequestContextInterceptor to the pipeline. Declaration public static Pipeline UseRequestContext(this Pipeline pipeline) Parameters Type Name Description Pipeline pipeline The pipeline being configured. Returns Type Description Pipeline The pipeline being configured."
  },
  "api/IceRpc.RequestContextRouterExtensions.html": {
    "href": "api/IceRpc.RequestContextRouterExtensions.html",
    "title": "Class RequestContextRouterExtensions | IceRPC",
    "keywords": "Class RequestContextRouterExtensions This class provides extension methods to add the request context middleware to a Router. Inheritance object RequestContextRouterExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.RequestContext.dll Syntax public static class RequestContextRouterExtensions Methods UseRequestContext(Router) Adds a RequestContextMiddleware to the router. Declaration public static Router UseRequestContext(this Router router) Parameters Type Name Description Router router The router being configured. Returns Type Description Router The router being configured."
  },
  "api/IceRpc.RequestFieldKey.html": {
    "href": "api/IceRpc.RequestFieldKey.html",
    "title": "Enum RequestFieldKey | IceRPC",
    "keywords": "Enum RequestFieldKey The keys of fields carried by icerpc request headers. Namespace: IceRpc Assembly: IceRpc.dll Syntax public enum RequestFieldKey : ulong Fields Name Description CompressionFormat The compression format of the payload. Context The string-string dictionary field. Deadline The deadline of the request, provided \"for info\" to the service. Idempotent The idempotent field. TraceContext The W3C Trace Context field used by the telemetry interceptor and middleware."
  },
  "api/IceRpc.RequestFieldKeySliceDecoderExtensions.html": {
    "href": "api/IceRpc.RequestFieldKeySliceDecoderExtensions.html",
    "title": "Class RequestFieldKeySliceDecoderExtensions | IceRPC",
    "keywords": "Class RequestFieldKeySliceDecoderExtensions Provide extension methods for encoding RequestFieldKey. Inheritance object RequestFieldKeySliceDecoderExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public static class RequestFieldKeySliceDecoderExtensions Methods DecodeRequestFieldKey(ref SliceDecoder) Decodes a RequestFieldKey enum. Declaration public static RequestFieldKey DecodeRequestFieldKey(this ref SliceDecoder decoder) Parameters Type Name Description SliceDecoder decoder The Slice decoder. Returns Type Description RequestFieldKey The decoded RequestFieldKey enumerator value."
  },
  "api/IceRpc.RequestFieldKeySliceEncoderExtensions.html": {
    "href": "api/IceRpc.RequestFieldKeySliceEncoderExtensions.html",
    "title": "Class RequestFieldKeySliceEncoderExtensions | IceRPC",
    "keywords": "Class RequestFieldKeySliceEncoderExtensions Provide extension methods for encoding RequestFieldKey. Inheritance object RequestFieldKeySliceEncoderExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public static class RequestFieldKeySliceEncoderExtensions Methods EncodeRequestFieldKey(ref SliceEncoder, RequestFieldKey) Encodes a RequestFieldKey enum. Declaration public static void EncodeRequestFieldKey(this ref SliceEncoder encoder, RequestFieldKey value) Parameters Type Name Description SliceEncoder encoder The Slice encoder. RequestFieldKey value The RequestFieldKey enumerator value to encode."
  },
  "api/IceRpc.RequestFieldKeyUlongExtensions.html": {
    "href": "api/IceRpc.RequestFieldKeyUlongExtensions.html",
    "title": "Class RequestFieldKeyUlongExtensions | IceRPC",
    "keywords": "Class RequestFieldKeyUlongExtensions Provides an extension method for creating a RequestFieldKey from an ulong. Inheritance object RequestFieldKeyUlongExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public static class RequestFieldKeyUlongExtensions Methods AsRequestFieldKey(ulong) Converts a ulong into the corresponding RequestFieldKey enumerator. Declaration public static RequestFieldKey AsRequestFieldKey(this ulong value) Parameters Type Name Description ulong value The value being converted. Returns Type Description RequestFieldKey The enumerator."
  },
  "api/IceRpc.ResettablePipeReaderDecorator.html": {
    "href": "api/IceRpc.ResettablePipeReaderDecorator.html",
    "title": "Class ResettablePipeReaderDecorator | IceRPC",
    "keywords": "Class ResettablePipeReaderDecorator A PipeReader decorator that allows to reset its decoratee to its initial state (from the caller's perspective). Inheritance object PipeReader ResettablePipeReaderDecorator Inherited Members PipeReader.ReadAtLeastAsync(int, CancellationToken) PipeReader.AsStream(bool) PipeReader.CompleteAsync(Exception) PipeReader.OnWriterCompleted(Action<Exception, object>, object) PipeReader.Create(Stream, StreamPipeReaderOptions) PipeReader.Create(ReadOnlySequence<byte>) PipeReader.CopyToAsync(PipeWriter, CancellationToken) PipeReader.CopyToAsync(Stream, CancellationToken) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public sealed class ResettablePipeReaderDecorator : PipeReader Constructors ResettablePipeReaderDecorator(PipeReader, int) Constructs a resettable pipe reader decorator. This decorator avoids consuming the read data to allow restart reading from the beginning. The decorator becomes non-resettable and IsResettable returns false if the buffered data exceeds the maxBufferSize, if the reading fails or if it's canceled with CancelPendingRead(). Declaration public ResettablePipeReaderDecorator(PipeReader decoratee, int maxBufferSize) Parameters Type Name Description PipeReader decoratee The pipe reader being decorated. int maxBufferSize The maximum size of buffered data in bytes. Properties IsResettable Gets or sets a value indicating whether this decorator can be reset. Declaration public bool IsResettable { get; set; } Property Value Type Description bool true if this decorator can be reset; false otherwise. Defaults to true. Methods AdvanceTo(SequencePosition, SequencePosition) Declaration public override void AdvanceTo(SequencePosition consumed, SequencePosition examined) Parameters Type Name Description SequencePosition consumed SequencePosition examined Overrides System.IO.Pipelines.PipeReader.AdvanceTo(System.SequencePosition, System.SequencePosition) AdvanceTo(SequencePosition) Declaration public override void AdvanceTo(SequencePosition consumed) Parameters Type Name Description SequencePosition consumed Overrides System.IO.Pipelines.PipeReader.AdvanceTo(System.SequencePosition) CancelPendingRead() Declaration public override void CancelPendingRead() Overrides System.IO.Pipelines.PipeReader.CancelPendingRead() Complete(Exception?) Declaration public override void Complete(Exception? exception = null) Parameters Type Name Description Exception exception Overrides System.IO.Pipelines.PipeReader.Complete(System.Exception) ReadAsync(CancellationToken) Declaration public override ValueTask<ReadResult> ReadAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description ValueTask<ReadResult> Overrides System.IO.Pipelines.PipeReader.ReadAsync(System.Threading.CancellationToken) ReadAtLeastAsyncCore(int, CancellationToken) Declaration protected override ValueTask<ReadResult> ReadAtLeastAsyncCore(int minimumSize, CancellationToken cancellationToken = default) Parameters Type Name Description int minimumSize CancellationToken cancellationToken Returns Type Description ValueTask<ReadResult> Overrides System.IO.Pipelines.PipeReader.ReadAtLeastAsyncCore(int, System.Threading.CancellationToken) Reset() Resets this pipe reader. Declaration public void Reset() Exceptions Type Condition System.InvalidOperationException Thrown if IsResettable is false. TryRead(out ReadResult) Declaration public override bool TryRead(out ReadResult result) Parameters Type Name Description ReadResult result Returns Type Description bool Overrides System.IO.Pipelines.PipeReader.TryRead(out System.IO.Pipelines.ReadResult) Extension Methods PipeReaderExtensions.ToAsyncEnumerable<T>(PipeReader, SliceEncoding, DecodeFunc<T>, int, ISliceFeature?) PipeReaderExtensions.ToAsyncEnumerable<T>(PipeReader, SliceEncoding, DecodeFunc<T>, GenericProxy?, ISliceFeature?)"
  },
  "api/IceRpc.ResponseFieldKey.html": {
    "href": "api/IceRpc.ResponseFieldKey.html",
    "title": "Enum ResponseFieldKey | IceRPC",
    "keywords": "Enum ResponseFieldKey The keys of fields carried by icerpc response headers. Namespace: IceRpc Assembly: IceRpc.dll Syntax public enum ResponseFieldKey : ulong Fields Name Description CompressionFormat The compression format of the payload."
  },
  "api/IceRpc.ResponseFieldKeySliceDecoderExtensions.html": {
    "href": "api/IceRpc.ResponseFieldKeySliceDecoderExtensions.html",
    "title": "Class ResponseFieldKeySliceDecoderExtensions | IceRPC",
    "keywords": "Class ResponseFieldKeySliceDecoderExtensions Provide extension methods for encoding ResponseFieldKey. Inheritance object ResponseFieldKeySliceDecoderExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public static class ResponseFieldKeySliceDecoderExtensions Methods DecodeResponseFieldKey(ref SliceDecoder) Decodes a ResponseFieldKey enum. Declaration public static ResponseFieldKey DecodeResponseFieldKey(this ref SliceDecoder decoder) Parameters Type Name Description SliceDecoder decoder The Slice decoder. Returns Type Description ResponseFieldKey The decoded ResponseFieldKey enumerator value."
  },
  "api/IceRpc.ResponseFieldKeySliceEncoderExtensions.html": {
    "href": "api/IceRpc.ResponseFieldKeySliceEncoderExtensions.html",
    "title": "Class ResponseFieldKeySliceEncoderExtensions | IceRPC",
    "keywords": "Class ResponseFieldKeySliceEncoderExtensions Provide extension methods for encoding ResponseFieldKey. Inheritance object ResponseFieldKeySliceEncoderExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public static class ResponseFieldKeySliceEncoderExtensions Methods EncodeResponseFieldKey(ref SliceEncoder, ResponseFieldKey) Encodes a ResponseFieldKey enum. Declaration public static void EncodeResponseFieldKey(this ref SliceEncoder encoder, ResponseFieldKey value) Parameters Type Name Description SliceEncoder encoder The Slice encoder. ResponseFieldKey value The ResponseFieldKey enumerator value to encode."
  },
  "api/IceRpc.ResponseFieldKeyUlongExtensions.html": {
    "href": "api/IceRpc.ResponseFieldKeyUlongExtensions.html",
    "title": "Class ResponseFieldKeyUlongExtensions | IceRPC",
    "keywords": "Class ResponseFieldKeyUlongExtensions Provides an extension method for creating a ResponseFieldKey from an ulong. Inheritance object ResponseFieldKeyUlongExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public static class ResponseFieldKeyUlongExtensions Methods AsResponseFieldKey(ulong) Converts a ulong into the corresponding ResponseFieldKey enumerator. Declaration public static ResponseFieldKey AsResponseFieldKey(this ulong value) Parameters Type Name Description ulong value The value being converted. Returns Type Description ResponseFieldKey The enumerator."
  },
  "api/IceRpc.Retry.html": {
    "href": "api/IceRpc.Retry.html",
    "title": "Namespace IceRpc.Retry | IceRPC",
    "keywords": "Namespace IceRpc.Retry Classes RetryInterceptor The retry interceptor is responsible for retrying requests when there is a retryable failure. RetryOptions A property bag used to configure a RetryInterceptor."
  },
  "api/IceRpc.Retry.RetryInterceptor.html": {
    "href": "api/IceRpc.Retry.RetryInterceptor.html",
    "title": "Class RetryInterceptor | IceRPC",
    "keywords": "Class RetryInterceptor The retry interceptor is responsible for retrying requests when there is a retryable failure. Inheritance object RetryInterceptor Implements IInvoker Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Retry Assembly: IceRpc.Retry.dll Syntax public class RetryInterceptor : IInvoker Constructors RetryInterceptor(IInvoker, RetryOptions, ILogger) Constructs a retry interceptor. Declaration public RetryInterceptor(IInvoker next, RetryOptions options, ILogger logger) Parameters Type Name Description IInvoker next The next invoker in the invocation pipeline. RetryOptions options The options to configure the retry interceptor. ILogger logger The logger. Methods InvokeAsync(OutgoingRequest, CancellationToken) Sends an outgoing request and returns the corresponding incoming response. Declaration public Task<IncomingResponse> InvokeAsync(OutgoingRequest request, CancellationToken cancellationToken) Parameters Type Name Description OutgoingRequest request The outgoing request being sent. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task<IncomingResponse> The corresponding IncomingResponse. Remarks When request is a two-way request, the returned task will not complete successfully until after the request's Payload is fully sent and the response is received from the peer. When the request is a one-way request, the returned task completes successfully with an empty response when the request's Payload is fully sent. For all requests (one-way and two-way), the sending of the request's PayloadContinuation can continue in a background task after the returned task has completed successfully. Implements IInvoker"
  },
  "api/IceRpc.Retry.RetryOptions.html": {
    "href": "api/IceRpc.Retry.RetryOptions.html",
    "title": "Class RetryOptions | IceRPC",
    "keywords": "Class RetryOptions A property bag used to configure a RetryInterceptor. Inheritance object RetryOptions Implements IEquatable<RetryOptions> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: IceRpc.Retry Assembly: IceRpc.Retry.dll Syntax public sealed record RetryOptions : IEquatable<RetryOptions> Constructors RetryOptions() Declaration public RetryOptions() Properties MaxAttempts Gets or sets the maximum number of attempts for retrying a request. Declaration public int MaxAttempts { get; set; } Property Value Type Description int The maximum number of attempts for retrying a request. Defaults to 2 attempts. MaxPayloadSize Gets or sets the maximum size of the request payload in bytes for which retries would be considered. Requests with a larger payload or a payload continuation are never retried. Declaration public int MaxPayloadSize { get; set; } Property Value Type Description int The maximum request payload size in bytes for which retries will be attempted. Defaults to 1 MB. Remarks The ability to retry depends on keeping the request payload around until a successful response has been received or retries are no longer possible, this setting affects the working memory that the application will consume. Methods <Clone>$() Declaration public RetryOptions <Clone>$() Returns Type Description RetryOptions Equals(RetryOptions?) Declaration public bool Equals(RetryOptions? other) Parameters Type Name Description RetryOptions other Returns Type Description bool Equals(object?) Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Operators operator ==(RetryOptions?, RetryOptions?) Declaration public static bool operator ==(RetryOptions? left, RetryOptions? right) Parameters Type Name Description RetryOptions left RetryOptions right Returns Type Description bool operator !=(RetryOptions?, RetryOptions?) Declaration public static bool operator !=(RetryOptions? left, RetryOptions? right) Parameters Type Name Description RetryOptions left RetryOptions right Returns Type Description bool Implements System.IEquatable<T>"
  },
  "api/IceRpc.RetryPipelineExtensions.html": {
    "href": "api/IceRpc.RetryPipelineExtensions.html",
    "title": "Class RetryPipelineExtensions | IceRPC",
    "keywords": "Class RetryPipelineExtensions This class provides extension methods to add the retry interceptor to a Pipeline. Inheritance object RetryPipelineExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.Retry.dll Syntax public static class RetryPipelineExtensions Methods UseRetry(Pipeline, RetryOptions, ILoggerFactory) Adds a RetryInterceptor to the pipeline. Declaration public static Pipeline UseRetry(this Pipeline pipeline, RetryOptions options, ILoggerFactory loggerFactory) Parameters Type Name Description Pipeline pipeline The pipeline being configured. RetryOptions options The options to configure the RetryInterceptor. ILoggerFactory loggerFactory The logger factory used to create a Microsoft.Extensions.Logging.ILogger`1 for RetryInterceptor. Returns Type Description Pipeline The pipeline being configured. UseRetry(Pipeline, RetryOptions) Adds a RetryInterceptor to the pipeline. Declaration public static Pipeline UseRetry(this Pipeline pipeline, RetryOptions options) Parameters Type Name Description Pipeline pipeline The pipeline being configured. RetryOptions options The options to configure the RetryInterceptor. Returns Type Description Pipeline The pipeline being configured. UseRetry(Pipeline) Adds a RetryInterceptor that uses the default RetryOptions to the pipeline. Declaration public static Pipeline UseRetry(this Pipeline pipeline) Parameters Type Name Description Pipeline pipeline The pipeline being configured. Returns Type Description Pipeline The pipeline being configured."
  },
  "api/IceRpc.Router.html": {
    "href": "api/IceRpc.Router.html",
    "title": "Class Router | IceRPC",
    "keywords": "Class Router A router routes incoming requests to dispatchers. Inheritance object Router Implements IDispatcher Inherited Members object.GetType() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public sealed class Router : IDispatcher Constructors Router() Constructs a top-level router. Declaration public Router() Router(string) Constructs a router with an absolute prefix. Declaration public Router(string absolutePrefix) Parameters Type Name Description string absolutePrefix The absolute prefix of the new router. It must start with a /. Exceptions Type Condition System.FormatException Thrown if absolutePrefix is not a valid path. Properties AbsolutePrefix Gets the absolute path-prefix of this router. The absolute path of a service added to this Router is: $\"{AbsolutePrefix}{path}\" where path corresponds to the argument given to Map(string, IDispatcher). Declaration public string AbsolutePrefix { get; } Property Value Type Description string The absolute prefix of this router. It is either an empty string or a string with two or more characters starting with a /. Methods DispatchAsync(IncomingRequest, CancellationToken) Dispatches an incoming request and returns the corresponding outgoing response. Declaration public ValueTask<OutgoingResponse> DispatchAsync(IncomingRequest request, CancellationToken cancellationToken = default) Parameters Type Name Description IncomingRequest request The incoming request being dispatched. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask<OutgoingResponse> The corresponding OutgoingResponse. Map(string, IDispatcher) Registers a route with a path. If there is an existing route at the same path, it is replaced. Declaration public Router Map(string path, IDispatcher dispatcher) Parameters Type Name Description string path The path of this route. It must match exactly the path of the request. In particular, it must start with a /. IDispatcher dispatcher The target of this route. It is typically a service. Returns Type Description Router This router. Exceptions Type Condition System.FormatException Thrown if path is not a valid path. System.InvalidOperationException Thrown if DispatchAsync(IncomingRequest, CancellationToken) was already called on this router. See Also Mount(string, IDispatcher) Mount(string, IDispatcher) Registers a route with a prefix. If there is an existing route at the same prefix, it is replaced. Declaration public Router Mount(string prefix, IDispatcher dispatcher) Parameters Type Name Description string prefix The prefix of this route. This prefix will be compared with the start of the path of the request. IDispatcher dispatcher The target of this route. Returns Type Description Router This router. Exceptions Type Condition System.FormatException Thrown if prefix is not a valid path. System.InvalidOperationException Thrown if DispatchAsync(IncomingRequest, CancellationToken) was already called on this router. See Also Map(string, IDispatcher) ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Use(Func<IDispatcher, IDispatcher>) Installs a middleware in this router. A middleware must be installed before calling DispatchAsync(IncomingRequest, CancellationToken). Declaration public Router Use(Func<IDispatcher, IDispatcher> middleware) Parameters Type Name Description Func<IDispatcher, IDispatcher> middleware The middleware to install. Returns Type Description Router This router. Exceptions Type Condition System.InvalidOperationException Thrown if DispatchAsync(IncomingRequest, CancellationToken) was already called on this router. Implements IDispatcher Extension Methods RouterExtensions.Map<TService>(Router, IDispatcher) RouterExtensions.Route(Router, string, Action<Router>) RouterExtensions.UseDispatchInformation(Router) RouterExtensions.UseFeature<TFeature>(Router, TFeature)"
  },
  "api/IceRpc.RouterExtensions.html": {
    "href": "api/IceRpc.RouterExtensions.html",
    "title": "Class RouterExtensions | IceRPC",
    "keywords": "Class RouterExtensions This class provide extension methods to add built-in middleware to a Router. Inheritance object RouterExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public static class RouterExtensions Methods Map<TService>(Router, IDispatcher) Registers a route to a service that uses the service default path as the route path. If there is an existing route at the same path, it is replaced. Declaration public static Router Map<TService>(this Router router, IDispatcher service) where TService : class Parameters Type Name Description Router router The router being configured. IDispatcher service The target service of this route. Returns Type Description Router The router being configured. Type Parameters Name Description TService The service type used to get the default path. Exceptions Type Condition System.InvalidOperationException Thrown if DispatchAsync(IncomingRequest, CancellationToken) was already called on this router. See Also Mount(string, IDispatcher) Route(Router, string, Action<Router>) Creates a sub-router, configures this sub-router and mounts it (with Mount(string, IDispatcher)) at the given prefix. Declaration public static Router Route(this Router router, string prefix, Action<Router> configure) Parameters Type Name Description Router router The router being configured. string prefix The prefix of the route to the sub-router. Action<Router> configure A delegate that configures the new sub-router. Returns Type Description Router The new sub-router. Exceptions Type Condition System.FormatException Thrown if prefix is not a valid path. UseDispatchInformation(Router) Adds a middleware that creates and inserts the IDispatchInformationFeature feature in all requests. Declaration public static Router UseDispatchInformation(this Router router) Parameters Type Name Description Router router The router being configured. Returns Type Description Router The router being configured. UseFeature<TFeature>(Router, TFeature) Adds a middleware that sets a feature in all requests. Declaration public static Router UseFeature<TFeature>(this Router router, TFeature feature) Parameters Type Name Description Router router The router being configured. TFeature feature The value of the feature to set in all requests. Returns Type Description Router The router being configured. Type Parameters Name Description TFeature The type of the feature."
  },
  "api/IceRpc.Server.html": {
    "href": "api/IceRpc.Server.html",
    "title": "Class Server | IceRPC",
    "keywords": "Class Server A server accepts connections from clients and dispatches the requests it receives over these connections. Inheritance object Server Implements IAsyncDisposable Inherited Members object.GetType() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public sealed class Server : IAsyncDisposable Constructors Server(IDispatcher, ServerAddress, SslServerAuthenticationOptions?, IDuplexServerTransport?, IMultiplexedServerTransport?, ILogger?) Constructs a server with the specified dispatcher, server address and authentication options. All other properties use the ServerOptions defaults. Declaration public Server(IDispatcher dispatcher, ServerAddress serverAddress, SslServerAuthenticationOptions? serverAuthenticationOptions = null, IDuplexServerTransport? duplexServerTransport = null, IMultiplexedServerTransport? multiplexedServerTransport = null, ILogger? logger = null) Parameters Type Name Description IDispatcher dispatcher The dispatcher of the server. ServerAddress serverAddress The server address of the server. SslServerAuthenticationOptions serverAuthenticationOptions The SSL server authentication options. When not null, the server will accept only secure connections. IDuplexServerTransport duplexServerTransport The transport used to create ice protocol connections. null is equivalent to Default. IMultiplexedServerTransport multiplexedServerTransport The transport used to create icerpc protocol connections. null is equivalent to Default. ILogger logger The logger. null is equivalent to Microsoft.Extensions.Logging.Abstractions.NullLogger.Instance. Server(IDispatcher, SslServerAuthenticationOptions?, IDuplexServerTransport?, IMultiplexedServerTransport?, ILogger?) Constructs a server with the specified dispatcher and authentication options. All other properties use the ServerOptions defaults. Declaration public Server(IDispatcher dispatcher, SslServerAuthenticationOptions? serverAuthenticationOptions = null, IDuplexServerTransport? duplexServerTransport = null, IMultiplexedServerTransport? multiplexedServerTransport = null, ILogger? logger = null) Parameters Type Name Description IDispatcher dispatcher The dispatcher of the server. SslServerAuthenticationOptions serverAuthenticationOptions The SSL server authentication options. When not null, the server will accept only secure connections. IDuplexServerTransport duplexServerTransport The transport used to create ice protocol connections. null is equivalent to Default. IMultiplexedServerTransport multiplexedServerTransport The transport used to create icerpc protocol connections. null is equivalent to Default. ILogger logger The logger. null is equivalent to Microsoft.Extensions.Logging.Abstractions.NullLogger.Instance. Server(IDispatcher, Uri, SslServerAuthenticationOptions?, IDuplexServerTransport?, IMultiplexedServerTransport?, ILogger?) Constructs a server with the specified dispatcher, server address URI and authentication options. All other properties use the ServerOptions defaults. Declaration public Server(IDispatcher dispatcher, Uri serverAddressUri, SslServerAuthenticationOptions? serverAuthenticationOptions = null, IDuplexServerTransport? duplexServerTransport = null, IMultiplexedServerTransport? multiplexedServerTransport = null, ILogger? logger = null) Parameters Type Name Description IDispatcher dispatcher The dispatcher of the server. Uri serverAddressUri A URI that represents the server address of the server. SslServerAuthenticationOptions serverAuthenticationOptions The SSL server authentication options. When not null, the server will accept only secure connections. IDuplexServerTransport duplexServerTransport The transport used to create ice protocol connections. null is equivalent to Default. IMultiplexedServerTransport multiplexedServerTransport The transport used to create icerpc protocol connections. null is equivalent to Default. ILogger logger The logger. null is equivalent to Microsoft.Extensions.Logging.Abstractions.NullLogger.Instance. Server(ServerOptions, IDuplexServerTransport?, IMultiplexedServerTransport?, ILogger?) Constructs a server. Declaration public Server(ServerOptions options, IDuplexServerTransport? duplexServerTransport = null, IMultiplexedServerTransport? multiplexedServerTransport = null, ILogger? logger = null) Parameters Type Name Description ServerOptions options The server options. IDuplexServerTransport duplexServerTransport The transport used to create ice protocol connections. The null value is equivalent to Default. IMultiplexedServerTransport multiplexedServerTransport The transport used to create icerpc protocol connections. The null value is equivalent to Default. ILogger logger The logger. null is equivalent to Microsoft.Extensions.Logging.Abstractions.NullLogger.Instance. Methods DisposeAsync() Releases all resources allocated by this server. The server stops listening for new connections and disposes the connections it accepted from clients. Declaration public ValueTask DisposeAsync() Returns Type Description ValueTask A value task that completes when the disposal of all connections accepted by the server has completed. This includes connections that were active when this method is called and connections whose disposal was initiated prior to this call. Remarks The disposal of an underlying connection of the server aborts invocations, cancels dispatches and disposes the underlying transport connection without waiting for the peer. To wait for invocations and dispatches to complete, call ShutdownAsync(CancellationToken) first. If the configured dispatcher does not complete promptly when its cancellation token is canceled, the disposal can hang. Listen() Starts accepting connections on the configured server address. Requests received over these connections are then dispatched by the configured dispatcher. Declaration public ServerAddress Listen() Returns Type Description ServerAddress The server address this server is listening on and that a client would connect to. This address is the same as ServerAddress except its Transport property is always non-null and its port number is never 0 when the host is an IP address. Exceptions Type Condition IceRpcException Thrown when the server transport fails to listen on the configured ServerAddress. System.InvalidOperationException Thrown when the server is already listening, shut down or shutting down. System.ObjectDisposedException Throw when the server is disposed. ShutdownAsync(CancellationToken) Gracefully shuts down this server: the server stops accepting new connections and shuts down gracefully all its connections. Declaration public Task ShutdownAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task A task that completes successfully once the shutdown of all connections accepted by the server has completed. This includes connections that were active when this method is called and connections whose shutdown was initiated prior to this call. This task can also complete with one of the following exceptions: IceRpcException with error OperationAborted if the server is disposed while being shut down. System.OperationCanceledExceptionif cancellation was requested through the cancellation token. System.TimeoutExceptionif the shutdown timed out. Exceptions Type Condition System.InvalidOperationException Thrown if this method is called more than once. System.ObjectDisposedException Thrown if the server is disposed. ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Implements System.IAsyncDisposable"
  },
  "api/IceRpc.ServerAddress.html": {
    "href": "api/IceRpc.ServerAddress.html",
    "title": "Struct ServerAddress | IceRPC",
    "keywords": "Struct ServerAddress A server address specifies the address of the server-end of an ice or icerpc connection: a server listens on a server address and a client establishes a connection to a server address. Implements IEquatable<ServerAddress> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: IceRpc Assembly: IceRpc.dll Syntax [TypeConverter(typeof(ServerAddressTypeConverter))] public readonly struct ServerAddress : IEquatable<ServerAddress> Constructors ServerAddress() Constructs a server address with default values. Declaration public ServerAddress() ServerAddress(Protocol) Constructs a server address from a supported protocol. Declaration public ServerAddress(Protocol protocol) Parameters Type Name Description Protocol protocol The protocol. ServerAddress(Uri) Constructs a server address from a System.Uri. Declaration public ServerAddress(Uri uri) Parameters Type Name Description Uri uri An absolute URI. Exceptions Type Condition System.ArgumentException Thrown if uri is not an absolute URI, or if its scheme is not a supported protocol, or if it has a non-empty path or fragment, or if it has an empty host, or if its query can't be parsed or if it has an alt-server query parameter. Properties Host Gets or initializes the host. Declaration public string Host { get; init; } Property Value Type Description string The host of this server address. Defaults to ::0 meaning that the server will listen on all the network interfaces. This default value is parsed into System.Net.IPAddress.IPv6Any. OriginalUri Gets the URI used to create this server address. Declaration public Uri? OriginalUri { get; } Property Value Type Description Uri The System.Uri of this server address if it was constructed from an URI; null otherwise. Params Gets or initializes transport-specific parameters. Declaration public ImmutableDictionary<string, string> Params { get; init; } Property Value Type Description ImmutableDictionary<string, string> The server address parameters. Defaults to System.Collections.Immutable.ImmutableDictionary`2.Empty. Port Gets or initializes the port number. Declaration public ushort Port { get; init; } Property Value Type Description ushort The port number of this server address. Defaults to DefaultPort. Protocol Gets the protocol of this server address. Declaration public Protocol Protocol { get; } Property Value Type Description Protocol Either IceRpc or Ice. Transport Gets or initializes the transport. Declaration public string? Transport { get; init; } Property Value Type Description string The name of the transport, or null if the transport is unspecified. Defaults to null. Methods Equals(ServerAddress) Checks if this server address is equal to another server address. Declaration public bool Equals(ServerAddress other) Parameters Type Name Description ServerAddress other The other server address. Returns Type Description bool true when the two server addresses have the same properties, including the same parameters; false otherwise. Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides System.ValueType.Equals(object) GetHashCode() Computes the hash code for this server address. Declaration public override int GetHashCode() Returns Type Description int The hash code. Overrides System.ValueType.GetHashCode() ToString() Converts this server address into a string. Declaration public override string ToString() Returns Type Description string The string representation of this server address. Overrides System.ValueType.ToString() ToUri() Converts this server address into a URI. Declaration public Uri ToUri() Returns Type Description Uri The URI. Operators operator ==(ServerAddress, ServerAddress) Declaration public static bool operator ==(ServerAddress left, ServerAddress right) Parameters Type Name Description ServerAddress left ServerAddress right Returns Type Description bool operator !=(ServerAddress, ServerAddress) Declaration public static bool operator !=(ServerAddress left, ServerAddress right) Parameters Type Name Description ServerAddress left ServerAddress right Returns Type Description bool Implements System.IEquatable<T>"
  },
  "api/IceRpc.ServerAddressComparer.html": {
    "href": "api/IceRpc.ServerAddressComparer.html",
    "title": "Class ServerAddressComparer | IceRPC",
    "keywords": "Class ServerAddressComparer Equality comparer for ServerAddress. Inheritance object EqualityComparer<ServerAddress> ServerAddressComparer Implements IEqualityComparer IEqualityComparer<ServerAddress> Inherited Members EqualityComparer<ServerAddress>.Equals(ServerAddress, ServerAddress) EqualityComparer<ServerAddress>.GetHashCode(ServerAddress) EqualityComparer<ServerAddress>.Default object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public abstract class ServerAddressComparer : EqualityComparer<ServerAddress>, IEqualityComparer, IEqualityComparer<ServerAddress> Constructors ServerAddressComparer() Declaration protected ServerAddressComparer() Properties OptionalTransport Gets a server address comparer that compares all server address properties, except a transport mismatch where the transport of one of the server addresses is null results in equality. Declaration public static ServerAddressComparer OptionalTransport { get; } Property Value Type Description ServerAddressComparer A ServerAddressComparer instance that compares server address properties with the exception of the Transport properties which are only compared if non-null. Implements System.Collections.IEqualityComparer System.Collections.Generic.IEqualityComparer<T>"
  },
  "api/IceRpc.ServerAddressTypeConverter.html": {
    "href": "api/IceRpc.ServerAddressTypeConverter.html",
    "title": "Class ServerAddressTypeConverter | IceRPC",
    "keywords": "Class ServerAddressTypeConverter The server address type converter specifies how to convert a string to a serverAddress. It's used by sub-systems such as the Microsoft ConfigurationBinder to bind string values to ServerAddress properties. Inheritance object TypeConverter ServerAddressTypeConverter Inherited Members TypeConverter.CanConvertFrom(Type) TypeConverter.CanConvertTo(Type) TypeConverter.CanConvertTo(ITypeDescriptorContext, Type) TypeConverter.ConvertFrom(object) TypeConverter.ConvertFromInvariantString(string) TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, string) TypeConverter.ConvertFromString(string) TypeConverter.ConvertFromString(ITypeDescriptorContext, string) TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, string) TypeConverter.ConvertTo(object, Type) TypeConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, object, Type) TypeConverter.ConvertToInvariantString(object) TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, object) TypeConverter.ConvertToString(object) TypeConverter.ConvertToString(ITypeDescriptorContext, object) TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, object) TypeConverter.CreateInstance(IDictionary) TypeConverter.CreateInstance(ITypeDescriptorContext, IDictionary) TypeConverter.GetConvertFromException(object) TypeConverter.GetConvertToException(object, Type) TypeConverter.GetCreateInstanceSupported() TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext) TypeConverter.GetProperties(object) TypeConverter.GetProperties(ITypeDescriptorContext, object) TypeConverter.GetProperties(ITypeDescriptorContext, object, Attribute[]) TypeConverter.GetPropertiesSupported() TypeConverter.GetPropertiesSupported(ITypeDescriptorContext) TypeConverter.GetStandardValues() TypeConverter.GetStandardValues(ITypeDescriptorContext) TypeConverter.GetStandardValuesExclusive() TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext) TypeConverter.GetStandardValuesSupported() TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext) TypeConverter.IsValid(object) TypeConverter.IsValid(ITypeDescriptorContext, object) TypeConverter.SortProperties(PropertyDescriptorCollection, string[]) object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public class ServerAddressTypeConverter : TypeConverter Constructors ServerAddressTypeConverter() Declaration public ServerAddressTypeConverter() Methods CanConvertFrom(ITypeDescriptorContext?, Type) Declaration public override bool CanConvertFrom(ITypeDescriptorContext? context, Type sourceType) Parameters Type Name Description ITypeDescriptorContext context Type sourceType Returns Type Description bool Overrides System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type) ConvertFrom(ITypeDescriptorContext?, CultureInfo?, object) Declaration public override object? ConvertFrom(ITypeDescriptorContext? context, CultureInfo? culture, object value) Parameters Type Name Description ITypeDescriptorContext context CultureInfo culture object value Returns Type Description object Overrides System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, object)"
  },
  "api/IceRpc.ServerNotFoundException.html": {
    "href": "api/IceRpc.ServerNotFoundException.html",
    "title": "Class ServerNotFoundException | IceRPC",
    "keywords": "Class ServerNotFoundException This exception is thrown when a server was not found. Inheritance object Exception DispatchException SliceException ServerNotFoundException Implements ISerializable Inherited Members SliceException.Encode(ref SliceEncoder) DispatchException.ConvertToUnhandled DispatchException.StatusCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.Locator.dll Syntax [TypeId(\"::Ice::ServerNotFoundException\")] public class ServerNotFoundException : SliceException, ISerializable Constructors ServerNotFoundException(ref SliceDecoder, string?) Declaration public ServerNotFoundException(ref SliceDecoder decoder, string? message = null) Parameters Type Name Description SliceDecoder decoder string message ServerNotFoundException(string?, Exception?) Constructs a new instance of ServerNotFoundException. Declaration public ServerNotFoundException(string? message = null, Exception? innerException = null) Parameters Type Name Description string message A message that describes the exception. Exception innerException The exception that is the cause of the current exception. Fields SliceTypeId Declaration public static readonly string SliceTypeId Field Value Type Description string Methods DecodeCore(ref SliceDecoder) Declaration protected override void DecodeCore(ref SliceDecoder decoder) Parameters Type Name Description SliceDecoder decoder Overrides SliceException.DecodeCore(ref SliceDecoder) EncodeCore(ref SliceEncoder) Declaration protected override void EncodeCore(ref SliceEncoder encoder) Parameters Type Name Description SliceEncoder encoder Overrides SliceException.EncodeCore(ref SliceEncoder) Implements System.Runtime.Serialization.ISerializable"
  },
  "api/IceRpc.ServerOptions.html": {
    "href": "api/IceRpc.ServerOptions.html",
    "title": "Class ServerOptions | IceRPC",
    "keywords": "Class ServerOptions A property bag used to configure a Server. Inheritance object ServerOptions Implements IEquatable<ServerOptions> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: IceRpc Assembly: IceRpc.dll Syntax public sealed record ServerOptions : IEquatable<ServerOptions> Constructors ServerOptions() Declaration public ServerOptions() Properties ConnectionOptions Gets or sets the connection options for server connections. Declaration public ConnectionOptions ConnectionOptions { get; set; } Property Value Type Description ConnectionOptions The connection options. Defaults to a default constructed ConnectionOptions. ConnectTimeout Gets or sets the connection establishment timeout for connections accepted by the server. Declaration public TimeSpan ConnectTimeout { get; set; } Property Value Type Description TimeSpan Defaults to 10 seconds. MaxConnections Gets or sets the maximum number of accepted server connections. Once the maximum number of connections has been reached, the server will refuse any new connections. Declaration public int MaxConnections { get; set; } Property Value Type Description int The maximum number of connections. Defaults to 0, meaning unlimited. MaxPendingConnections Gets or sets the maximum number of server connections waiting for connection establishment to complete. Once the maximum number of pending connections has been reached, the server will stop accepting new connections to ensure that the transport rejects new connections once its connection backlog is full. Declaration public int MaxPendingConnections { get; set; } Property Value Type Description int The maximum number of connection waiting for connection establishment to complete. Defaults to 100. ServerAddress Gets or sets the server's address. The server address host is usually an IP address, and it cannot be a DNS name. Declaration public ServerAddress ServerAddress { get; set; } Property Value Type Description ServerAddress The ServerAddress of this Server. Defaults to a ServerAddress constructed with IceRpc. ServerAuthenticationOptions Gets or sets the SSL server authentication options. Declaration public SslServerAuthenticationOptions? ServerAuthenticationOptions { get; set; } Property Value Type Description SslServerAuthenticationOptions The SSL server authentication options. When not null, the server will accept only secure connections. ShutdownTimeout Gets or sets the shutdown timeout. This timeout is used when gracefully shutting down a connection managed by the server. Declaration public TimeSpan ShutdownTimeout { get; set; } Property Value Type Description TimeSpan Defaults to 10 seconds. Methods <Clone>$() Declaration public ServerOptions <Clone>$() Returns Type Description ServerOptions Equals(ServerOptions?) Declaration public bool Equals(ServerOptions? other) Parameters Type Name Description ServerOptions other Returns Type Description bool Equals(object?) Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Operators operator ==(ServerOptions?, ServerOptions?) Declaration public static bool operator ==(ServerOptions? left, ServerOptions? right) Parameters Type Name Description ServerOptions left ServerOptions right Returns Type Description bool operator !=(ServerOptions?, ServerOptions?) Declaration public static bool operator !=(ServerOptions? left, ServerOptions? right) Parameters Type Name Description ServerOptions left ServerOptions right Returns Type Description bool Implements System.IEquatable<T>"
  },
  "api/IceRpc.ServiceAddress.html": {
    "href": "api/IceRpc.ServiceAddress.html",
    "title": "Class ServiceAddress | IceRPC",
    "keywords": "Class ServiceAddress A service address corresponds to the URI of a service, parsed and processed for easier consumption by interceptors, ConnectionCache and other elements of the invocation pipeline. It's used to construct an OutgoingRequest. Inheritance object ServiceAddress Implements IEquatable<ServiceAddress> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: IceRpc Assembly: IceRpc.dll Syntax [TypeConverter(typeof(ServiceAddressTypeConverter))] public sealed record ServiceAddress : IEquatable<ServiceAddress> Constructors ServiceAddress(Protocol?) Constructs a service address from a protocol. Declaration public ServiceAddress(Protocol? protocol = null) Parameters Type Name Description Protocol protocol The protocol, or null for a relative service address. Exceptions Type Condition System.ArgumentException Thrown when protocol is not null or a supported protocol. ServiceAddress(Uri) Constructs a service address from a URI. Declaration public ServiceAddress(Uri uri) Parameters Type Name Description Uri uri The Uri. Properties AltServerAddresses Gets or initializes the secondary server addresses of this service address. Declaration public ImmutableList<ServerAddress> AltServerAddresses { get; init; } Property Value Type Description ImmutableList<ServerAddress> The secondary server addresses of this service address. Defaults to System.Collections.Immutable.ImmutableList`1.Empty. Fragment Gets or initializes the fragment. Declaration public string Fragment { get; init; } Property Value Type Description string The fragment of this service address. Defaults to an empty string. OriginalUri Gets the URI used to create this service address. Declaration public Uri? OriginalUri { get; } Property Value Type Description Uri The System.Uri of this service address if it was constructed from an URI and if URI-derived properties have not been updated. The setting of an URI-derived property such as ServerAddress sets OriginalUri to null. Params Gets or initializes the parameters of this service address. Declaration public ImmutableDictionary<string, string> Params { get; init; } Property Value Type Description ImmutableDictionary<string, string> The params dictionary. Always empty if ServerAddress is not null. Defaults to System.Collections.Immutable.ImmutableDictionary`2.Empty. Path Gets or initializes the path of this service address. Declaration public string Path { get; init; } Property Value Type Description string The path of this service address. Defaults to /. Protocol Gets the protocol of this service address. Declaration public Protocol? Protocol { get; } Property Value Type Description Protocol The protocol of the service address. It corresponds to the URI scheme and is null for a relative service address. ServerAddress Gets or initializes the main server address of this service address. Declaration public ServerAddress? ServerAddress { get; init; } Property Value Type Description ServerAddress? The main server address of this service address, or null if this service address has no server address. Methods <Clone>$() Declaration public ServiceAddress <Clone>$() Returns Type Description ServiceAddress Equals(ServiceAddress?) Declaration public bool Equals(ServiceAddress? other) Parameters Type Name Description ServiceAddress other Returns Type Description bool Equals(object?) Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() ToString() Converts this service address into a string. Declaration public override string ToString() Returns Type Description string The string representation of this service address. Overrides object.ToString() ToUri() Converts this service address into a Uri. Declaration public Uri ToUri() Returns Type Description Uri An Uri representing this service address. Operators operator ==(ServiceAddress?, ServiceAddress?) Declaration public static bool operator ==(ServiceAddress? left, ServiceAddress? right) Parameters Type Name Description ServiceAddress left ServiceAddress right Returns Type Description bool operator !=(ServiceAddress?, ServiceAddress?) Declaration public static bool operator !=(ServiceAddress? left, ServiceAddress? right) Parameters Type Name Description ServiceAddress left ServiceAddress right Returns Type Description bool Implements System.IEquatable<T>"
  },
  "api/IceRpc.ServiceAddressTypeConverter.html": {
    "href": "api/IceRpc.ServiceAddressTypeConverter.html",
    "title": "Class ServiceAddressTypeConverter | IceRPC",
    "keywords": "Class ServiceAddressTypeConverter The service address type converter specifies how to convert a string to a service address. It's used by sub-systems such as the Microsoft ConfigurationBinder to bind string values to ServiceAddress properties. Inheritance object TypeConverter ServiceAddressTypeConverter Inherited Members TypeConverter.CanConvertFrom(Type) TypeConverter.CanConvertTo(Type) TypeConverter.CanConvertTo(ITypeDescriptorContext, Type) TypeConverter.ConvertFrom(object) TypeConverter.ConvertFromInvariantString(string) TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, string) TypeConverter.ConvertFromString(string) TypeConverter.ConvertFromString(ITypeDescriptorContext, string) TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, string) TypeConverter.ConvertTo(object, Type) TypeConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, object, Type) TypeConverter.ConvertToInvariantString(object) TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, object) TypeConverter.ConvertToString(object) TypeConverter.ConvertToString(ITypeDescriptorContext, object) TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, object) TypeConverter.CreateInstance(IDictionary) TypeConverter.CreateInstance(ITypeDescriptorContext, IDictionary) TypeConverter.GetConvertFromException(object) TypeConverter.GetConvertToException(object, Type) TypeConverter.GetCreateInstanceSupported() TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext) TypeConverter.GetProperties(object) TypeConverter.GetProperties(ITypeDescriptorContext, object) TypeConverter.GetProperties(ITypeDescriptorContext, object, Attribute[]) TypeConverter.GetPropertiesSupported() TypeConverter.GetPropertiesSupported(ITypeDescriptorContext) TypeConverter.GetStandardValues() TypeConverter.GetStandardValues(ITypeDescriptorContext) TypeConverter.GetStandardValuesExclusive() TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext) TypeConverter.GetStandardValuesSupported() TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext) TypeConverter.IsValid(object) TypeConverter.IsValid(ITypeDescriptorContext, object) TypeConverter.SortProperties(PropertyDescriptorCollection, string[]) object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public class ServiceAddressTypeConverter : TypeConverter Constructors ServiceAddressTypeConverter() Declaration public ServiceAddressTypeConverter() Methods CanConvertFrom(ITypeDescriptorContext?, Type) Declaration public override bool CanConvertFrom(ITypeDescriptorContext? context, Type sourceType) Parameters Type Name Description ITypeDescriptorContext context Type sourceType Returns Type Description bool Overrides System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type) ConvertFrom(ITypeDescriptorContext?, CultureInfo?, object) Declaration public override object? ConvertFrom(ITypeDescriptorContext? context, CultureInfo? culture, object value) Parameters Type Name Description ITypeDescriptorContext context CultureInfo culture object value Returns Type Description object Overrides System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, object)"
  },
  "api/IceRpc.Slice.AsyncEnumerableExtensions.html": {
    "href": "api/IceRpc.Slice.AsyncEnumerableExtensions.html",
    "title": "Class AsyncEnumerableExtensions | IceRPC",
    "keywords": "Class AsyncEnumerableExtensions Extension methods for System.Collections.Generic.IAsyncEnumerable<T>. Inheritance object AsyncEnumerableExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public static class AsyncEnumerableExtensions Methods ToPipeReader<T>(IAsyncEnumerable<T>, EncodeAction<T>, bool, SliceEncoding, SliceEncodeOptions?) Encodes an async enumerable into a stream of bytes represented by a System.IO.Pipelines.PipeReader. Declaration public static PipeReader ToPipeReader<T>(this IAsyncEnumerable<T> asyncEnumerable, EncodeAction<T> encodeAction, bool useSegments, SliceEncoding encoding = SliceEncoding.Slice2, SliceEncodeOptions? encodeOptions = null) Parameters Type Name Description IAsyncEnumerable<T> asyncEnumerable The async enumerable to encode into a stream of bytes. EncodeAction<T> encodeAction The action used to encode one element. bool useSegments true if an element can be encoded on a variable number of bytes; otherwise, false. SliceEncoding encoding The Slice encoding to use. SliceEncodeOptions encodeOptions The Slice encode options. Returns Type Description PipeReader A pipe reader that represents the encoded stream of bytes. Type Parameters Name Description T The async enumerable element type."
  },
  "api/IceRpc.Slice.BitSequenceReader.html": {
    "href": "api/IceRpc.Slice.BitSequenceReader.html",
    "title": "Struct BitSequenceReader | IceRPC",
    "keywords": "Struct BitSequenceReader A reader for a bit sequence. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public ref struct BitSequenceReader Constructors BitSequenceReader(ReadOnlySequence<byte>) Constructs a bit sequence reader over a bit sequence. Declaration public BitSequenceReader(ReadOnlySequence<byte> bitSequence) Parameters Type Name Description ReadOnlySequence<byte> bitSequence The bit sequence, as a buffer of bytes. Methods Read() Reads the next bit in the bit sequence. Declaration public bool Read() Returns Type Description bool true when the next bit is set; otherwise, false."
  },
  "api/IceRpc.Slice.BitSequenceWriter.html": {
    "href": "api/IceRpc.Slice.BitSequenceWriter.html",
    "title": "Struct BitSequenceWriter | IceRPC",
    "keywords": "Struct BitSequenceWriter A writer for a bit sequence. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public ref struct BitSequenceWriter Methods Write(bool) Writes the bit at the current position in the underlying bit sequence and moves to the next position. Declaration public void Write(bool value) Parameters Type Name Description bool value true to set the bit and false to unset it."
  },
  "api/IceRpc.Slice.ClassFormat.html": {
    "href": "api/IceRpc.Slice.ClassFormat.html",
    "title": "Enum ClassFormat | IceRPC",
    "keywords": "Enum ClassFormat This enumeration describes the possible formats when encoding classes. Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public enum ClassFormat Fields Name Description Compact The Compact format assumes the sender and receiver have the same Slice definitions for classes. If an application receives a derived class it does not know, it is not capable of decoding it into a known base class because there is not enough information in the encoded payload. The Compact format is the default. Sliced The Sliced format allows the receiver to slice off unknown slices. If an application receives a derived class it does not know, it can create a base class while preserving the unknown derived slices."
  },
  "api/IceRpc.Slice.CompactTypeIdAttribute.html": {
    "href": "api/IceRpc.Slice.CompactTypeIdAttribute.html",
    "title": "Class CompactTypeIdAttribute | IceRPC",
    "keywords": "Class CompactTypeIdAttribute This attribute class is used by the generated code to assign a compact Slice type ID to C# classes mapped from Slice classes. Inheritance object Attribute CompactTypeIdAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax [AttributeUsage(AttributeTargets.Class, Inherited = false)] public sealed class CompactTypeIdAttribute : Attribute Constructors CompactTypeIdAttribute(int) Constructs a CompactTypeIdAttribute. Declaration public CompactTypeIdAttribute(int value) Parameters Type Name Description int value The compact type ID. Properties Value Gets the compact Slice type ID. Declaration public int Value { get; } Property Value Type Description int The compact Slice type ID numeric value."
  },
  "api/IceRpc.Slice.DecodeExceptionFunc.html": {
    "href": "api/IceRpc.Slice.DecodeExceptionFunc.html",
    "title": "Delegate DecodeExceptionFunc | IceRPC",
    "keywords": "Delegate DecodeExceptionFunc A delegate that decodes a Slice exception from a Slice decoder. Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public delegate SliceException DecodeExceptionFunc(ref SliceDecoder decoder, string? message) Parameters Type Name Description SliceDecoder decoder The Slice decoder. string message The exception message. Returns Type Description SliceException The decoded Slice exception. Constructors DecodeExceptionFunc(object, nint) Declaration public DecodeExceptionFunc(object @object, nint method) Parameters Type Name Description object object nint method Methods BeginInvoke(ref SliceDecoder, string?, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(ref SliceDecoder decoder, string? message, AsyncCallback callback, object @object) Parameters Type Name Description SliceDecoder decoder string message AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(ref SliceDecoder, IAsyncResult) Declaration public virtual SliceException EndInvoke(ref SliceDecoder decoder, IAsyncResult result) Parameters Type Name Description SliceDecoder decoder IAsyncResult result Returns Type Description SliceException Invoke(ref SliceDecoder, string?) Declaration public virtual SliceException Invoke(ref SliceDecoder decoder, string? message) Parameters Type Name Description SliceDecoder decoder string message Returns Type Description SliceException"
  },
  "api/IceRpc.Slice.DecodeFunc-1.html": {
    "href": "api/IceRpc.Slice.DecodeFunc-1.html",
    "title": "Delegate DecodeFunc<T> | IceRPC",
    "keywords": "Delegate DecodeFunc<T> A delegate that decodes a value from a Slice decoder. Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public delegate T DecodeFunc<T>(ref SliceDecoder decoder) Parameters Type Name Description SliceDecoder decoder The Slice decoder. Returns Type Description T The value. Type Parameters Name Description T The type of the value to decode. Constructors DecodeFunc(object, nint) Declaration public DecodeFunc(object @object, nint method) Parameters Type Name Description object object nint method Methods BeginInvoke(ref SliceDecoder, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(ref SliceDecoder decoder, AsyncCallback callback, object @object) Parameters Type Name Description SliceDecoder decoder AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(ref SliceDecoder, IAsyncResult) Declaration public virtual T EndInvoke(ref SliceDecoder decoder, IAsyncResult result) Parameters Type Name Description SliceDecoder decoder IAsyncResult result Returns Type Description T Invoke(ref SliceDecoder) Declaration public virtual T Invoke(ref SliceDecoder decoder) Parameters Type Name Description SliceDecoder decoder Returns Type Description T"
  },
  "api/IceRpc.Slice.EncodeAction-1.html": {
    "href": "api/IceRpc.Slice.EncodeAction-1.html",
    "title": "Delegate EncodeAction<T> | IceRPC",
    "keywords": "Delegate EncodeAction<T> A delegate that encodes a value with an Slice encoder. Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public delegate void EncodeAction<in T>(ref SliceEncoder encoder, T value) Parameters Type Name Description SliceEncoder encoder The Slice encoder. T value The value to encode with the encoder. Type Parameters Name Description T The type of the value to encode. Constructors EncodeAction(object, nint) Declaration public EncodeAction(object @object, nint method) Parameters Type Name Description object object nint method Methods BeginInvoke(ref SliceEncoder, T, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(ref SliceEncoder encoder, T value, AsyncCallback callback, object @object) Parameters Type Name Description SliceEncoder encoder T value AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(ref SliceEncoder, IAsyncResult) Declaration public virtual void EndInvoke(ref SliceEncoder encoder, IAsyncResult result) Parameters Type Name Description SliceEncoder encoder IAsyncResult result Invoke(ref SliceEncoder, T) Declaration public virtual void Invoke(ref SliceEncoder encoder, T value) Parameters Type Name Description SliceEncoder encoder T value"
  },
  "api/IceRpc.Slice.EncodeAction.html": {
    "href": "api/IceRpc.Slice.EncodeAction.html",
    "title": "Delegate EncodeAction | IceRPC",
    "keywords": "Delegate EncodeAction A delegate that encodes into an Slice encoder. Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public delegate void EncodeAction(ref SliceEncoder encoder) Parameters Type Name Description SliceEncoder encoder The Slice encoder. Constructors EncodeAction(object, nint) Declaration public EncodeAction(object @object, nint method) Parameters Type Name Description object object nint method Methods BeginInvoke(ref SliceEncoder, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(ref SliceEncoder encoder, AsyncCallback callback, object @object) Parameters Type Name Description SliceEncoder encoder AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(ref SliceEncoder, IAsyncResult) Declaration public virtual void EndInvoke(ref SliceEncoder encoder, IAsyncResult result) Parameters Type Name Description SliceEncoder encoder IAsyncResult result Invoke(ref SliceEncoder) Declaration public virtual void Invoke(ref SliceEncoder encoder) Parameters Type Name Description SliceEncoder encoder"
  },
  "api/IceRpc.Slice.FieldsExtensions.html": {
    "href": "api/IceRpc.Slice.FieldsExtensions.html",
    "title": "Class FieldsExtensions | IceRPC",
    "keywords": "Class FieldsExtensions Provides extension method for field dictionaries. Inheritance object FieldsExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public static class FieldsExtensions Methods DecodeValue<TKey, TValue>(IDictionary<TKey, ReadOnlySequence<byte>>, TKey, DecodeFunc<TValue>) Retrieves the decoded field value associated with a field key. Declaration public static TValue? DecodeValue<TKey, TValue>(this IDictionary<TKey, ReadOnlySequence<byte>> fields, TKey key, DecodeFunc<TValue> decodeFunc) where TKey : struct Parameters Type Name Description IDictionary<TKey, ReadOnlySequence<byte>> fields The field dictionary. TKey key The key to lookup in the field dictionary. DecodeFunc<TValue> decodeFunc The function used to decode the field value. Returns Type Description TValue The decoded field value, or default if the key was not found in fields. Type Parameters Name Description TKey The type of the field keys. TValue The type of the decoded field value."
  },
  "api/IceRpc.Slice.GenericProxy.html": {
    "href": "api/IceRpc.Slice.GenericProxy.html",
    "title": "Struct GenericProxy | IceRPC",
    "keywords": "Struct GenericProxy Provides an implementation of IProxy that does not implement any Slice interface. It's used to create concrete untyped proxies. Implements IProxy IEquatable<GenericProxy> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public readonly struct GenericProxy : IProxy, IEquatable<GenericProxy> Properties EncodeOptions Gets or initializes the encode options, used to customize the encoding of payloads created from this proxy. Declaration public SliceEncodeOptions? EncodeOptions { get; init; } Property Value Type Description SliceEncodeOptions See Also ProxyFactory Invoker Gets or initializes the invocation pipeline of this proxy. Declaration public IInvoker? Invoker { get; init; } Property Value Type Description IInvoker See Also ProxyFactory ServiceAddress Gets or initializes the address of the remote service. Declaration public ServiceAddress ServiceAddress { get; init; } Property Value Type Description ServiceAddress See Also ProxyFactory Methods Equals(GenericProxy) Declaration public bool Equals(GenericProxy other) Parameters Type Name Description GenericProxy other Returns Type Description bool See Also ProxyFactory Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides System.ValueType.Equals(object) See Also ProxyFactory FromProxy<TProxy>(TProxy) Creates a generic proxy from a proxy struct of type TProxy. Declaration public static GenericProxy FromProxy<TProxy>(TProxy proxy) where TProxy : struct, IProxy Parameters Type Name Description TProxy proxy The source proxy. Returns Type Description GenericProxy A new generic proxy. Type Parameters Name Description TProxy The type of the source proxy. See Also ProxyFactory GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides System.ValueType.GetHashCode() See Also ProxyFactory ToString() Declaration public override string ToString() Returns Type Description string Overrides System.ValueType.ToString() See Also ProxyFactory Operators operator ==(GenericProxy, GenericProxy) Declaration public static bool operator ==(GenericProxy left, GenericProxy right) Parameters Type Name Description GenericProxy left GenericProxy right Returns Type Description bool See Also ProxyFactory operator !=(GenericProxy, GenericProxy) Declaration public static bool operator !=(GenericProxy left, GenericProxy right) Parameters Type Name Description GenericProxy left GenericProxy right Returns Type Description bool See Also ProxyFactory Implements IProxy System.IEquatable<T> Extension Methods ProxyExtensions.InvokeAsync<TProxy>(TProxy, string, PipeReader?, PipeReader?, ResponseDecodeFunc, IFeatureCollection?, bool, bool, CancellationToken) ProxyExtensions.InvokeAsync<TProxy, T>(TProxy, string, PipeReader?, PipeReader?, ResponseDecodeFunc<T>, IFeatureCollection?, bool, CancellationToken) ProxyExtensions.AsAsync<TProxy>(IProxy, IFeatureCollection?, CancellationToken) ProxyExtensions.ToProxy<TProxy>(IProxy) See Also ProxyFactory"
  },
  "api/IceRpc.Slice.html": {
    "href": "api/IceRpc.Slice.html",
    "title": "Namespace IceRpc.Slice | IceRPC",
    "keywords": "Namespace IceRpc.Slice Classes AsyncEnumerableExtensions Extension methods for System.Collections.Generic.IAsyncEnumerable<T>. CompactTypeIdAttribute This attribute class is used by the generated code to assign a compact Slice type ID to C# classes mapped from Slice classes. FieldsExtensions Provides extension method for field dictionaries. IdentityPathSliceDecoderExtensions Provides an extension method for decoding a path encoded as an Ice identity. IdentityPathSliceEncoderExtensions Provides an extension method for encoding a path as an Ice identity. IncomingFrameExtensions Extension methods for IncomingFrame. IncomingRequestExtensions Extension methods to decode the payload of an incoming request when this payload is encoded with the Slice encoding. IncomingResponseExtensions Extension methods to decode the payloads of incoming responses when such payloads are encoded with the Slice encoding. OperationAttribute This attribute class is used by the generated code to mark operations that can be called from Service.DispatchAsync. PipeReaderExtensions Extension methods for System.IO.Pipelines.PipeReader. ProxyExtensions Provides extension methods for interface IProxy and generated proxy structs that implement this interface. Service Base class of all services that implement Slice-defined interfaces. Slice2Definitions Enumerations and constants used by Slice2. SliceAttribute An assembly attribute for assemblies that contain Slice generated code. SliceClass Base class for classes defined in Slice. SliceDecoderExtensions Provides extension methods for SliceDecoder. SliceEncodeOptions A property bag used to configure the encoding of payloads. SliceEncoderExtensions Provides extension methods for SliceEncoder. SliceEncodingExtensions Extension methods for SliceEncoding. SliceException Base class for exceptions defined in Slice. SliceFeature The default implementation for ISliceFeature. SliceInfo SliceInfo encapsulates the details of a slice for an unknown class encoded with the Slice1 encoding. TypeExtensions This class adds extension methods to System.Type. TypeIdAttribute This attribute class is used by the generated code to assign a Slice type ID to C# classes, interfaces and structs mapped from Slice interfaces, classes and exceptions. UnknownSlicedClass UnknownSlicedClass represents a fully sliced class instance. The local IceRPC runtime does not know this type or any of its base classes (other than SliceClass). Structs BitSequenceReader A reader for a bit sequence. BitSequenceWriter A writer for a bit sequence. GenericProxy Provides an implementation of IProxy that does not implement any Slice interface. It's used to create concrete untyped proxies. SliceDecoder SliceDecoder class encoding methods. SliceEncoder SliceEncoder class encoding methods. Interfaces IActivator Slice decoders use activators to create instances of Slice classes and exceptions from Slice type IDs. IProxy A proxy is a local ambassador for a remote service. ISliceFeature A feature to customize the encoding and decoding of request and response payloads. Enums ClassFormat This enumeration describes the possible formats when encoding classes. SliceEncoding The versions of the Slice encoding supported by this IceRPC runtime. TagFormat With Slice1, each tagged parameter has a specific tag format. This tag format describes how the data is encoded and how it can be skipped by the decoding code if the tagged parameter is present in the buffer but is not known to the receiver. The tag format is encoded in 3 bits as a result only values in the range 0 to 7 are encoded. Delegates DecodeExceptionFunc A delegate that decodes a Slice exception from a Slice decoder. DecodeFunc<T> A delegate that decodes a value from a Slice decoder. EncodeAction A delegate that encodes into an Slice encoder. EncodeAction<T> A delegate that encodes a value with an Slice encoder. ResponseDecodeFunc A function that decodes the \"void\" return value from a Slice-encoded response. ResponseDecodeFunc<T> A function that decodes the return value from a Slice-encoded response."
  },
  "api/IceRpc.Slice.IActivator.html": {
    "href": "api/IceRpc.Slice.IActivator.html",
    "title": "Interface IActivator | IceRPC",
    "keywords": "Interface IActivator Slice decoders use activators to create instances of Slice classes and exceptions from Slice type IDs. Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public interface IActivator Methods CreateClassInstance(string, ref SliceDecoder) Creates an instance of a Slice class based on a type ID. Declaration object? CreateClassInstance(string typeId, ref SliceDecoder decoder) Parameters Type Name Description string typeId The Slice type ID. SliceDecoder decoder The decoder. Returns Type Description object A new instance of the class identified by typeId. CreateExceptionInstance(string, ref SliceDecoder, string?) Creates an instance of a Slice exception based on a type ID. Declaration object? CreateExceptionInstance(string typeId, ref SliceDecoder decoder, string? message) Parameters Type Name Description string typeId The Slice type ID. SliceDecoder decoder The decoder. string message The exception message. Returns Type Description object A new instance of the class identified by typeId."
  },
  "api/IceRpc.Slice.IdentityPathSliceDecoderExtensions.html": {
    "href": "api/IceRpc.Slice.IdentityPathSliceDecoderExtensions.html",
    "title": "Class IdentityPathSliceDecoderExtensions | IceRPC",
    "keywords": "Class IdentityPathSliceDecoderExtensions Provides an extension method for decoding a path encoded as an Ice identity. Inheritance object IdentityPathSliceDecoderExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public static class IdentityPathSliceDecoderExtensions Methods DecodeIdentityPath(ref SliceDecoder) Decodes a path encoded as an Ice identity. Declaration public static string DecodeIdentityPath(this ref SliceDecoder decoder) Parameters Type Name Description SliceDecoder decoder The Slice decoder. Returns Type Description string The decoded Ice identity path."
  },
  "api/IceRpc.Slice.IdentityPathSliceEncoderExtensions.html": {
    "href": "api/IceRpc.Slice.IdentityPathSliceEncoderExtensions.html",
    "title": "Class IdentityPathSliceEncoderExtensions | IceRPC",
    "keywords": "Class IdentityPathSliceEncoderExtensions Provides an extension method for encoding a path as an Ice identity. Inheritance object IdentityPathSliceEncoderExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public static class IdentityPathSliceEncoderExtensions Methods EncodeIdentityPath(ref SliceEncoder, string) Encodes a path as an Ice identity. Declaration public static void EncodeIdentityPath(this ref SliceEncoder encoder, string value) Parameters Type Name Description SliceEncoder encoder The Slice encoder. string value The path to encode as an Ice identity."
  },
  "api/IceRpc.Slice.IncomingFrameExtensions.html": {
    "href": "api/IceRpc.Slice.IncomingFrameExtensions.html",
    "title": "Class IncomingFrameExtensions | IceRPC",
    "keywords": "Class IncomingFrameExtensions Extension methods for IncomingFrame. Inheritance object IncomingFrameExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public static class IncomingFrameExtensions Methods DetachPayload(IncomingFrame) Detaches the payload from the incoming frame. The caller takes ownership of the returned payload pipe reader, and Payload becomes invalid. Declaration public static PipeReader DetachPayload(this IncomingFrame incoming) Parameters Type Name Description IncomingFrame incoming The incoming frame. Returns Type Description PipeReader The payload pipe reader."
  },
  "api/IceRpc.Slice.IncomingRequestExtensions.html": {
    "href": "api/IceRpc.Slice.IncomingRequestExtensions.html",
    "title": "Class IncomingRequestExtensions | IceRPC",
    "keywords": "Class IncomingRequestExtensions Extension methods to decode the payload of an incoming request when this payload is encoded with the Slice encoding. Inheritance object IncomingRequestExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public static class IncomingRequestExtensions Methods CheckNonIdempotent(IncomingRequest) The generated code calls this method to ensure that when an operation is not declared idempotent, the request is not marked idempotent. If the request is marked idempotent, it means the caller incorrectly believes this operation is idempotent. Declaration public static void CheckNonIdempotent(this IncomingRequest request) Parameters Type Name Description IncomingRequest request The request to check. CreateSliceExceptionResponse(IncomingRequest, SliceException, SliceEncoding) Creates an outgoing response with status code ApplicationError with a Slice exception payload. Declaration public static OutgoingResponse CreateSliceExceptionResponse(this IncomingRequest request, SliceException sliceException, SliceEncoding encoding) Parameters Type Name Description IncomingRequest request The incoming request. SliceException sliceException The Slice exception to encode in the payload. SliceEncoding encoding The encoding used for the request payload. Returns Type Description OutgoingResponse The new outgoing response. Exceptions Type Condition System.ArgumentException Thrown if the ConvertToUnhandled property of sliceException is true. System.NotSupportedException Thrown when sliceException does not support encoding encoding. DecodeArgsAsync<T>(IncomingRequest, SliceEncoding, DecodeFunc<T>, IActivator?, CancellationToken) Decodes a request payload into a list of arguments. Declaration public static ValueTask<T> DecodeArgsAsync<T>(this IncomingRequest request, SliceEncoding encoding, DecodeFunc<T> decodeFunc, IActivator? defaultActivator = null, CancellationToken cancellationToken = default) Parameters Type Name Description IncomingRequest request The incoming request. SliceEncoding encoding The encoding of the request's payload. DecodeFunc<T> decodeFunc The decode function for the arguments from the payload. IActivator defaultActivator The activator to use when the activator provided by the request's ISliceFeature is null. Used only when encoding is Slice1. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask<T> The request arguments. Type Parameters Name Description T The type of the request parameters. DecodeEmptyArgsAsync(IncomingRequest, SliceEncoding, CancellationToken) Verifies that a request payload carries no argument or only unknown tagged arguments. Declaration public static ValueTask DecodeEmptyArgsAsync(this IncomingRequest request, SliceEncoding encoding, CancellationToken cancellationToken = default) Parameters Type Name Description IncomingRequest request The incoming request. SliceEncoding encoding The encoding of the request payload. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask A value task that completes when the checking is complete."
  },
  "api/IceRpc.Slice.IncomingResponseExtensions.html": {
    "href": "api/IceRpc.Slice.IncomingResponseExtensions.html",
    "title": "Class IncomingResponseExtensions | IceRPC",
    "keywords": "Class IncomingResponseExtensions Extension methods to decode the payloads of incoming responses when such payloads are encoded with the Slice encoding. Inheritance object IncomingResponseExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public static class IncomingResponseExtensions Methods DecodeReturnValueAsync<T>(IncomingResponse, OutgoingRequest, SliceEncoding, GenericProxy, DecodeFunc<T>, DecodeExceptionFunc?, IActivator?, CancellationToken) Decodes a response payload. Declaration public static ValueTask<T> DecodeReturnValueAsync<T>(this IncomingResponse response, OutgoingRequest request, SliceEncoding encoding, GenericProxy sender, DecodeFunc<T> decodeReturnValue, DecodeExceptionFunc? decodeException = null, IActivator? defaultActivator = null, CancellationToken cancellationToken = default) Parameters Type Name Description IncomingResponse response The incoming response. OutgoingRequest request The outgoing request. SliceEncoding encoding The encoding of the response payload. Must be Slice2 or greater. GenericProxy sender The proxy that sent the request. DecodeFunc<T> decodeReturnValue A function that decodes the return value. DecodeExceptionFunc decodeException A function that decodes the exception thrown by the operation. Used only when encoding is not Slice1. IActivator defaultActivator The activator to use when the activator provided by the request's ISliceFeature is null. Used only when encoding is Slice1. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask<T> The return value. Type Parameters Name Description T The type of the return value. Exceptions Type Condition DispatchException Thrown if the status code of the response is greater than ApplicationError. When both decodeException is null and encoding is not Slice1, it is also thrown for status code ApplicationError. DecodeVoidReturnValueAsync(IncomingResponse, OutgoingRequest, SliceEncoding, GenericProxy, DecodeExceptionFunc?, IActivator?, CancellationToken) Verifies that a response payload carries no return value or only tagged return values. Declaration public static ValueTask DecodeVoidReturnValueAsync(this IncomingResponse response, OutgoingRequest request, SliceEncoding encoding, GenericProxy sender, DecodeExceptionFunc? decodeException = null, IActivator? defaultActivator = null, CancellationToken cancellationToken = default) Parameters Type Name Description IncomingResponse response The incoming response. OutgoingRequest request The outgoing request. SliceEncoding encoding The encoding of the response payload. Must be Slice2 or greater. GenericProxy sender The proxy that sent the request. DecodeExceptionFunc decodeException A function that decodes the exception thrown by the operation. Used only when encoding is not Slice1. IActivator defaultActivator The activator to use when the activator provided by the request's ISliceFeature is null. Used only when encoding is Slice1. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask A value task representing the asynchronous completion of the operation. Exceptions Type Condition DispatchException Thrown if the status code of the response is greater than ApplicationError. When both decodeException is null and encoding is not Slice1, it is also thrown for status code ApplicationError."
  },
  "api/IceRpc.Slice.IProxy.html": {
    "href": "api/IceRpc.Slice.IProxy.html",
    "title": "Interface IProxy | IceRPC",
    "keywords": "Interface IProxy A proxy is a local ambassador for a remote service. Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public interface IProxy Properties EncodeOptions Gets or initializes the encode options, used to customize the encoding of payloads created from this proxy. Declaration SliceEncodeOptions? EncodeOptions { get; init; } Property Value Type Description SliceEncodeOptions Invoker Gets or initializes the invocation pipeline of this proxy. Declaration IInvoker? Invoker { get; init; } Property Value Type Description IInvoker ServiceAddress Gets or initializes the address of the remote service. Declaration ServiceAddress ServiceAddress { get; init; } Property Value Type Description ServiceAddress Extension Methods ProxyExtensions.AsAsync<TProxy>(IProxy, IFeatureCollection?, CancellationToken) ProxyExtensions.ToProxy<TProxy>(IProxy)"
  },
  "api/IceRpc.Slice.ISliceFeature.html": {
    "href": "api/IceRpc.Slice.ISliceFeature.html",
    "title": "Interface ISliceFeature | IceRPC",
    "keywords": "Interface ISliceFeature A feature to customize the encoding and decoding of request and response payloads. Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public interface ISliceFeature Properties Activator Gets the activator to use when decoding Slice1-encoded classes and exceptions. Declaration IActivator? Activator { get; } Property Value Type Description IActivator The activator. When null, the decoding of a request or response payload uses the activator injected by the Slice generated code. EncodeOptions Gets the options to use when encoding the payload of an outgoing response. Declaration SliceEncodeOptions? EncodeOptions { get; } Property Value Type Description SliceEncodeOptions The Slice encode options. null is equivalent to Default. MaxCollectionAllocation Gets the maximum collection allocation when decoding a payload, in bytes. Declaration int MaxCollectionAllocation { get; } Property Value Type Description int MaxDepth Gets the maximum depth when decoding a class recursively. Declaration int MaxDepth { get; } Property Value Type Description int MaxSegmentSize Gets the maximum size of a Slice payload segment, in bytes. A Slice payload segment corresponds to the encoded arguments of an operation, the encoded return values of an operation, or a portion of a stream of variable-size elements. Declaration int MaxSegmentSize { get; } Property Value Type Description int ProxyFactory Gets the proxy factory to use when decoding proxies in request or response payloads. Declaration Func<ServiceAddress, GenericProxy?, GenericProxy>? ProxyFactory { get; } Property Value Type Description Func<ServiceAddress, GenericProxy?, GenericProxy>"
  },
  "api/IceRpc.Slice.OperationAttribute.html": {
    "href": "api/IceRpc.Slice.OperationAttribute.html",
    "title": "Class OperationAttribute | IceRPC",
    "keywords": "Class OperationAttribute This attribute class is used by the generated code to mark operations that can be called from Service.DispatchAsync. Inheritance object Attribute OperationAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax [AttributeUsage(AttributeTargets.Method, Inherited = false)] public sealed class OperationAttribute : Attribute Constructors OperationAttribute(string) Constructs an OperationAttribute. Declaration public OperationAttribute(string value) Parameters Type Name Description string value The operation name. Properties Value Gets the operation name. Declaration public string Value { get; } Property Value Type Description string The operation name."
  },
  "api/IceRpc.Slice.PipeReaderExtensions.html": {
    "href": "api/IceRpc.Slice.PipeReaderExtensions.html",
    "title": "Class PipeReaderExtensions | IceRPC",
    "keywords": "Class PipeReaderExtensions Extension methods for System.IO.Pipelines.PipeReader. Inheritance object PipeReaderExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public static class PipeReaderExtensions Methods ToAsyncEnumerable<T>(PipeReader, SliceEncoding, DecodeFunc<T>, int, ISliceFeature?) Creates an async enumerable over a pipe reader to decode streamed members. Declaration public static IAsyncEnumerable<T> ToAsyncEnumerable<T>(this PipeReader reader, SliceEncoding encoding, DecodeFunc<T> decodeFunc, int elementSize, ISliceFeature? sliceFeature = null) Parameters Type Name Description PipeReader reader The pipe reader. SliceEncoding encoding The Slice encoding version. DecodeFunc<T> decodeFunc The function used to decode the streamed member. int elementSize The size in bytes of one element. ISliceFeature sliceFeature The Slice feature to customize the decoding. Returns Type Description IAsyncEnumerable<T> The async enumerable to decode and return the streamed members. Type Parameters Name Description T The type of the element being decoded. Remarks The reader ownership is transferred to the returned async enumerable. The caller should no longer use the reader after this call. Exceptions Type Condition System.ArgumentException Thrown if elementSize is equal of inferior to 0. ToAsyncEnumerable<T>(PipeReader, SliceEncoding, DecodeFunc<T>, GenericProxy?, ISliceFeature?) Creates an async enumerable over a pipe reader to decode variable size streamed elements. Declaration public static IAsyncEnumerable<T> ToAsyncEnumerable<T>(this PipeReader reader, SliceEncoding encoding, DecodeFunc<T> decodeFunc, GenericProxy? templateProxy = null, ISliceFeature? sliceFeature = null) Parameters Type Name Description PipeReader reader The pipe reader. SliceEncoding encoding The Slice encoding version. DecodeFunc<T> decodeFunc The function used to decode the streamed member. GenericProxy? templateProxy The template proxy. ISliceFeature sliceFeature The slice feature to customize the decoding. Returns Type Description IAsyncEnumerable<T> The async enumerable to decode and return the streamed members. Type Parameters Name Description T The stream element type. Remarks The reader ownership is transferred to the returned async enumerable. The caller should no longer use the reader after this call."
  },
  "api/IceRpc.Slice.ProxyExtensions.html": {
    "href": "api/IceRpc.Slice.ProxyExtensions.html",
    "title": "Class ProxyExtensions | IceRPC",
    "keywords": "Class ProxyExtensions Provides extension methods for interface IProxy and generated proxy structs that implement this interface. Inheritance object ProxyExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public static class ProxyExtensions Methods AsAsync<TProxy>(IProxy, IFeatureCollection?, CancellationToken) Tests whether the target service implements the interface implemented by TProxy. This method is a wrapper for IceIsAAsync(string, IFeatureCollection?, CancellationToken) and may not be implemented by all services. Declaration public static Task<TProxy?> AsAsync<TProxy>(this IProxy proxy, IFeatureCollection? features = null, CancellationToken cancellationToken = default) where TProxy : struct, IProxy Parameters Type Name Description IProxy proxy The source proxy being tested. IFeatureCollection features The invocation features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task<TProxy?> A new TProxy instance, or null. Type Parameters Name Description TProxy The type of the target proxy struct. InvokeAsync<TProxy>(TProxy, string, PipeReader?, PipeReader?, ResponseDecodeFunc, IFeatureCollection?, bool, bool, CancellationToken) Sends a request to a service and decodes the \"void\" response. Declaration public static Task InvokeAsync<TProxy>(this TProxy proxy, string operation, PipeReader? payload, PipeReader? payloadContinuation, ResponseDecodeFunc responseDecodeFunc, IFeatureCollection? features, bool idempotent = false, bool oneway = false, CancellationToken cancellationToken = default) where TProxy : struct, IProxy Parameters Type Name Description TProxy proxy A proxy for the remote service. string operation The name of the operation, as specified in Slice. PipeReader payload The payload of the request. null is equivalent to an empty payload. PipeReader payloadContinuation The payload continuation of the request. ResponseDecodeFunc responseDecodeFunc The decode function for the response payload. It decodes and throws an exception when the status code of the response is ApplicationError. IFeatureCollection features The invocation features. bool idempotent When true, the request is idempotent. bool oneway When true, the request is sent one-way and an empty response is returned immediately after sending the request. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task A task that completes when the void response is returned. Type Parameters Name Description TProxy The type of the proxy struct. Exceptions Type Condition SliceException Thrown if the response carries a failure. InvokeAsync<TProxy, T>(TProxy, string, PipeReader?, PipeReader?, ResponseDecodeFunc<T>, IFeatureCollection?, bool, CancellationToken) Sends a request to a service and decodes the response. Declaration public static Task<T> InvokeAsync<TProxy, T>(this TProxy proxy, string operation, PipeReader? payload, PipeReader? payloadContinuation, ResponseDecodeFunc<T> responseDecodeFunc, IFeatureCollection? features, bool idempotent = false, CancellationToken cancellationToken = default) where TProxy : struct, IProxy Parameters Type Name Description TProxy proxy A proxy to the remote service. string operation The name of the operation, as specified in Slice. PipeReader payload The payload of the request. null is equivalent to an empty payload. PipeReader payloadContinuation The optional payload continuation of the request. ResponseDecodeFunc<T> responseDecodeFunc The decode function for the response payload. It decodes and throws an exception when the status code of the response is ApplicationError. IFeatureCollection features The invocation features. bool idempotent When true, the request is idempotent. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task<T> The operation's return value. Type Parameters Name Description TProxy The type of the proxy struct. T The response type. Exceptions Type Condition SliceException Thrown if the response carries a Slice exception. ToProxy<TProxy>(IProxy) Converts a proxy into a proxy struct. This conversion always succeeds. Declaration public static TProxy ToProxy<TProxy>(this IProxy proxy) where TProxy : struct, IProxy Parameters Type Name Description IProxy proxy The source proxy. Returns Type Description TProxy A new instance of TProxy. Type Parameters Name Description TProxy The type of the target proxy struct."
  },
  "api/IceRpc.Slice.ResponseDecodeFunc-1.html": {
    "href": "api/IceRpc.Slice.ResponseDecodeFunc-1.html",
    "title": "Delegate ResponseDecodeFunc<T> | IceRPC",
    "keywords": "Delegate ResponseDecodeFunc<T> A function that decodes the return value from a Slice-encoded response. Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public delegate ValueTask<T> ResponseDecodeFunc<T>(IncomingResponse response, OutgoingRequest request, GenericProxy sender, CancellationToken cancellationToken) Parameters Type Name Description IncomingResponse response The incoming response. OutgoingRequest request The outgoing request. GenericProxy sender The proxy that sent the request. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask<T> A value task that contains the return value or a SliceException when the status code of the response is ApplicationError. Type Parameters Name Description T The type of the return value to read. Constructors ResponseDecodeFunc(object, nint) Declaration public ResponseDecodeFunc(object @object, nint method) Parameters Type Name Description object object nint method Methods BeginInvoke(IncomingResponse, OutgoingRequest, GenericProxy, CancellationToken, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(IncomingResponse response, OutgoingRequest request, GenericProxy sender, CancellationToken cancellationToken, AsyncCallback callback, object @object) Parameters Type Name Description IncomingResponse response OutgoingRequest request GenericProxy sender CancellationToken cancellationToken AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual ValueTask<T> EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description ValueTask<T> Invoke(IncomingResponse, OutgoingRequest, GenericProxy, CancellationToken) Declaration public virtual ValueTask<T> Invoke(IncomingResponse response, OutgoingRequest request, GenericProxy sender, CancellationToken cancellationToken) Parameters Type Name Description IncomingResponse response OutgoingRequest request GenericProxy sender CancellationToken cancellationToken Returns Type Description ValueTask<T>"
  },
  "api/IceRpc.Slice.ResponseDecodeFunc.html": {
    "href": "api/IceRpc.Slice.ResponseDecodeFunc.html",
    "title": "Delegate ResponseDecodeFunc | IceRPC",
    "keywords": "Delegate ResponseDecodeFunc A function that decodes the \"void\" return value from a Slice-encoded response. Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public delegate ValueTask ResponseDecodeFunc(IncomingResponse response, OutgoingRequest request, GenericProxy sender, CancellationToken cancellationToken) Parameters Type Name Description IncomingResponse response The incoming response. OutgoingRequest request The outgoing request. GenericProxy sender The proxy that sent the request. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask A value task that contains a SliceException when the status code of the response is ApplicationError. Constructors ResponseDecodeFunc(object, nint) Declaration public ResponseDecodeFunc(object @object, nint method) Parameters Type Name Description object object nint method Methods BeginInvoke(IncomingResponse, OutgoingRequest, GenericProxy, CancellationToken, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(IncomingResponse response, OutgoingRequest request, GenericProxy sender, CancellationToken cancellationToken, AsyncCallback callback, object @object) Parameters Type Name Description IncomingResponse response OutgoingRequest request GenericProxy sender CancellationToken cancellationToken AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual ValueTask EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description ValueTask Invoke(IncomingResponse, OutgoingRequest, GenericProxy, CancellationToken) Declaration public virtual ValueTask Invoke(IncomingResponse response, OutgoingRequest request, GenericProxy sender, CancellationToken cancellationToken) Parameters Type Name Description IncomingResponse response OutgoingRequest request GenericProxy sender CancellationToken cancellationToken Returns Type Description ValueTask"
  },
  "api/IceRpc.Slice.Service.html": {
    "href": "api/IceRpc.Slice.Service.html",
    "title": "Class Service | IceRPC",
    "keywords": "Class Service Base class of all services that implement Slice-defined interfaces. Inheritance object Service Implements IDispatcher IIceObjectService Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public class Service : IDispatcher, IIceObjectService Constructors Service() Constructs a new service. Declaration public Service() Methods DispatchAsync(IncomingRequest, CancellationToken) Dispatches an incoming request and returns the corresponding outgoing response. Declaration public ValueTask<OutgoingResponse> DispatchAsync(IncomingRequest request, CancellationToken cancellationToken) Parameters Type Name Description IncomingRequest request The incoming request being dispatched. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask<OutgoingResponse> The corresponding OutgoingResponse. IceIdsAsync(IFeatureCollection, CancellationToken) Gets the Slice type IDs of all the interfaces implemented by the target service. Declaration public virtual ValueTask<IEnumerable<string>> IceIdsAsync(IFeatureCollection features, CancellationToken cancellationToken) Parameters Type Name Description IFeatureCollection features The dispatch features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask<IEnumerable<string>> The Slice type IDs of all these interfaces, sorted alphabetically. IceIsAAsync(string, IFeatureCollection, CancellationToken) Tests whether the target service implements the specified interface. Declaration public virtual ValueTask<bool> IceIsAAsync(string id, IFeatureCollection features, CancellationToken cancellationToken) Parameters Type Name Description string id The Slice type ID of the interface to test against. IFeatureCollection features The dispatch features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask<bool> True when the target service implements this interface; otherwise, false. IcePingAsync(IFeatureCollection, CancellationToken) Pings the service. Declaration public virtual ValueTask IcePingAsync(IFeatureCollection features, CancellationToken cancellationToken) Parameters Type Name Description IFeatureCollection features The dispatch features. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask Implements IDispatcher IIceObjectService"
  },
  "api/IceRpc.Slice.Slice2Definitions.html": {
    "href": "api/IceRpc.Slice.Slice2Definitions.html",
    "title": "Class Slice2Definitions | IceRPC",
    "keywords": "Class Slice2Definitions Enumerations and constants used by Slice2. Inheritance object Slice2Definitions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public static class Slice2Definitions Fields TagEndMarker A marker that indicates the end of a (possibly empty) sequence of tagged members. Declaration public const int TagEndMarker = -1 Field Value Type Description int"
  },
  "api/IceRpc.Slice.SliceAttribute.html": {
    "href": "api/IceRpc.Slice.SliceAttribute.html",
    "title": "Class SliceAttribute | IceRPC",
    "keywords": "Class SliceAttribute An assembly attribute for assemblies that contain Slice generated code. Inheritance object Attribute SliceAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)] public sealed class SliceAttribute : Attribute Constructors SliceAttribute(string) Constructs a new instance of SliceAttribute. Declaration public SliceAttribute(string sourceFileName) Parameters Type Name Description string sourceFileName The name of the source file. Properties SourceFileName Gets the name of the file that contains the Slice definitions. Declaration public string SourceFileName { get; } Property Value Type Description string"
  },
  "api/IceRpc.Slice.SliceClass.html": {
    "href": "api/IceRpc.Slice.SliceClass.html",
    "title": "Class SliceClass | IceRPC",
    "keywords": "Class SliceClass Base class for classes defined in Slice. Inheritance object SliceClass UnknownSlicedClass Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public abstract class SliceClass Constructors SliceClass() Declaration protected SliceClass() Properties UnknownSlices Gets the unknown slices if the class has a preserved-slice base class and has been sliced-off during decoding. Declaration public ImmutableList<SliceInfo> UnknownSlices { get; } Property Value Type Description ImmutableList<SliceInfo> Methods DecodeCore(ref SliceDecoder) Decodes the properties of this instance. Declaration protected abstract void DecodeCore(ref SliceDecoder decoder) Parameters Type Name Description SliceDecoder decoder The Slice decoder. EncodeCore(ref SliceEncoder) Encodes the properties of this instance. Declaration protected abstract void EncodeCore(ref SliceEncoder encoder) Parameters Type Name Description SliceEncoder encoder The Slice encoder."
  },
  "api/IceRpc.Slice.SliceDecoder.html": {
    "href": "api/IceRpc.Slice.SliceDecoder.html",
    "title": "Struct SliceDecoder | IceRPC",
    "keywords": "Struct SliceDecoder SliceDecoder class encoding methods. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public ref struct SliceDecoder Constructors SliceDecoder(ReadOnlySequence<byte>, SliceEncoding, Func<ServiceAddress, GenericProxy?, GenericProxy>?, GenericProxy?, int, IActivator?, int) Constructs a new Slice decoder over a byte buffer. Declaration public SliceDecoder(ReadOnlySequence<byte> buffer, SliceEncoding encoding, Func<ServiceAddress, GenericProxy?, GenericProxy>? proxyFactory = null, GenericProxy? templateProxy = null, int maxCollectionAllocation = -1, IActivator? activator = null, int maxDepth = 3) Parameters Type Name Description ReadOnlySequence<byte> buffer The byte buffer. SliceEncoding encoding The Slice encoding version. Func<ServiceAddress, GenericProxy?, GenericProxy> proxyFactory The proxy factory. GenericProxy? templateProxy The template proxy to give to proxyFactory. int maxCollectionAllocation The maximum cumulative allocation in bytes when decoding strings, sequences, and dictionaries from this buffer.-1 (the default) is equivalent to 8 times the buffer length. IActivator activator The activator for decoding Slice1-encoded classes and exceptions. int maxDepth The maximum depth when decoding a class recursively. The default is 3. SliceDecoder(ReadOnlyMemory<byte>, SliceEncoding, Func<ServiceAddress, GenericProxy?, GenericProxy>?, GenericProxy?, int, IActivator?, int) Constructs a new Slice decoder over a byte buffer. Declaration public SliceDecoder(ReadOnlyMemory<byte> buffer, SliceEncoding encoding, Func<ServiceAddress, GenericProxy?, GenericProxy>? proxyFactory = null, GenericProxy? templateProxy = null, int maxCollectionAllocation = -1, IActivator? activator = null, int maxDepth = 3) Parameters Type Name Description ReadOnlyMemory<byte> buffer The byte buffer. SliceEncoding encoding The Slice encoding version. Func<ServiceAddress, GenericProxy?, GenericProxy> proxyFactory The proxy factory. GenericProxy? templateProxy The template proxy to give to proxyFactory. int maxCollectionAllocation The maximum cumulative allocation in bytes when decoding strings, sequences, and dictionaries from this buffer.-1 (the default) is equivalent to 8 times the buffer length. IActivator activator The activator for decoding Slice1-encoded classes and exceptions. int maxDepth The maximum depth when decoding a class recursively. The default is 3. Properties Consumed Gets the number of bytes decoded in the underlying buffer. Declaration public long Consumed { get; } Property Value Type Description long Encoding Gets the Slice encoding decoded by this decoder. Declaration public readonly SliceEncoding Encoding { get; } Property Value Type Description SliceEncoding Methods CopyTo(Span<byte>) Copy bytes from the underlying reader into the destination to fill completely destination. Declaration public void CopyTo(Span<byte> destination) Parameters Type Name Description Span<byte> destination The span to which bytes of this decoder will be copied. Remarks This method also moves the reader's Consumed property. DecodeBool() Decodes a slice bool into a bool. Declaration public bool DecodeBool() Returns Type Description bool The bool decoded by this decoder. DecodeClass<T>() Decodes a class instance. Declaration public T DecodeClass<T>() where T : SliceClass Returns Type Description T The decoded class instance. Type Parameters Name Description T The class type. DecodeFloat32() Decodes a Slice float32 into a float. Declaration public float DecodeFloat32() Returns Type Description float The float decoded by this decoder. DecodeFloat64() Decodes a Slice float64 into a double. Declaration public double DecodeFloat64() Returns Type Description double The double decoded by this decoder. DecodeInt16() Decodes a Slice int16 into a short. Declaration public short DecodeInt16() Returns Type Description short The short decoded by this decoder. DecodeInt32() Decodes a Slice int32 into an int. Declaration public int DecodeInt32() Returns Type Description int The int decoded by this decoder. DecodeInt64() Decodes a Slice int64 into a long. Declaration public long DecodeInt64() Returns Type Description long The long decoded by this decoder. DecodeInt8() Decodes a Slice int8 into an sbyte. Declaration public sbyte DecodeInt8() Returns Type Description sbyte The sbyte decoded by this decoder. DecodeNullableClass<T>() Decodes a nullable class instance. Declaration public T? DecodeNullableClass<T>() where T : class Returns Type Description T The class instance, or null. Type Parameters Name Description T The class type. DecodeNullableProxy<TProxy>() Decodes a nullable proxy struct (Slice1 only). Declaration public TProxy? DecodeNullableProxy<TProxy>() where TProxy : struct, IProxy Returns Type Description TProxy? The decoded proxy, or null. Type Parameters Name Description TProxy The type of the proxy struct to decode. DecodeNullableServiceAddress() Decodes a nullable service address (Slice1 only). Declaration public ServiceAddress? DecodeNullableServiceAddress() Returns Type Description ServiceAddress The decoded service address, or null. DecodeProxy<TProxy>() Decodes a proxy struct. Declaration public TProxy DecodeProxy<TProxy>() where TProxy : struct, IProxy Returns Type Description TProxy The decoded proxy struct. Type Parameters Name Description TProxy The type of the proxy struct to decode. DecodeServiceAddress() Decodes a service address. Declaration public ServiceAddress DecodeServiceAddress() Returns Type Description ServiceAddress The decoded service address. DecodeSize() Decodes a size encoded on a variable number of bytes. Declaration public int DecodeSize() Returns Type Description int The size decoded by this decoder. DecodeString() Decodes a Slice string into a string. Declaration public string DecodeString() Returns Type Description string The string decoded by this decoder. DecodeStringBody(int) Decodes size UTF-8 bytes into a string. Declaration public string DecodeStringBody(int size) Parameters Type Name Description int size The number of UTF-8 bytes to read and decode. Returns Type Description string The string decoded by this decoder. DecodeTagged<T>(int, DecodeFunc<T>, bool) Decodes a Slice2-encoded tagged parameter or data member. Declaration public T? DecodeTagged<T>(int tag, DecodeFunc<T> decodeFunc, bool useTagEndMarker) Parameters Type Name Description int tag The tag. DecodeFunc<T> decodeFunc A decode function that decodes the value of this tagged parameter or data member. bool useTagEndMarker When true, we are decoding a data member and a tag end marker marks the end of the tagged data members. When false, we are decoding a parameter and the end of the buffer marks the end of the tagged parameters. Returns Type Description T The decoded value of the tagged parameter or data member, or null if not found. Type Parameters Name Description T The type of the decoded value. Remarks We return a T? and not a T to avoid ambiguities in the generated code with nullable reference types such as string?. DecodeTagged<T>(int, TagFormat, DecodeFunc<T>, bool) Decodes a Slice1-encoded tagged parameter or data member. Declaration public T? DecodeTagged<T>(int tag, TagFormat tagFormat, DecodeFunc<T> decodeFunc, bool useTagEndMarker) Parameters Type Name Description int tag The tag. TagFormat tagFormat The expected tag format of this tag when found in the underlying buffer. DecodeFunc<T> decodeFunc A decode function that decodes the value of this tag. bool useTagEndMarker When true, we are decoding a data member and a tag end marker marks the end of the tagged data members. When false, we are decoding a parameter and the end of the buffer marks the end of the tagged parameters. Returns Type Description T The decoded value of the tagged parameter or data member, or null if not found. Type Parameters Name Description T The type of the decoded value. Remarks We return a T? and not a T to avoid ambiguities in the generated code with nullable reference types such as string?. DecodeUInt16() Decodes a Slice uint16 into a ushort. Declaration public ushort DecodeUInt16() Returns Type Description ushort The ushort decoded by this decoder. DecodeUInt32() Decodes a Slice uint32 into a uint. Declaration public uint DecodeUInt32() Returns Type Description uint The uint decoded by this decoder. DecodeUInt64() Decodes a Slice uint64 into a ulong. Declaration public ulong DecodeUInt64() Returns Type Description ulong The ulong decoded by this decoder. DecodeUInt8() Decodes a Slice uint8 into a byte. Declaration public byte DecodeUInt8() Returns Type Description byte The byte decoded by this decoder. DecodeUserException(string?) Decodes a Slice1 user exception. Declaration public SliceException DecodeUserException(string? message = null) Parameters Type Name Description string message The error message. Returns Type Description SliceException The decoded Slice exception. DecodeVarInt32() Decodes a Slice varint32 into an int. Declaration public int DecodeVarInt32() Returns Type Description int The int decoded by this decoder. DecodeVarInt62() Decodes a Slice varint62 into a long. Declaration public long DecodeVarInt62() Returns Type Description long The long decoded by this decoder. DecodeVarUInt32() Decodes a Slice varuint32 into a uint. Declaration public uint DecodeVarUInt32() Returns Type Description uint The uint decoded by this decoder. DecodeVarUInt62() Decodes a Slice varuint62 into a ulong. Declaration public ulong DecodeVarUInt62() Returns Type Description ulong The ulong decoded by this decoder. GetActivator(IEnumerable<Assembly>) Gets or creates an activator for the Slice types defined in the specified assemblies and their referenced assemblies. Declaration public static IActivator GetActivator(IEnumerable<Assembly> assemblies) Parameters Type Name Description IEnumerable<Assembly> assemblies The assemblies. Returns Type Description IActivator An activator that activates the Slice types defined in assemblies and their referenced assemblies. See GetActivator(Assembly). GetActivator(Assembly) Gets or creates an activator for the Slice types in the specified assembly and its referenced assemblies. Declaration public static IActivator GetActivator(Assembly assembly) Parameters Type Name Description Assembly assembly The assembly. Returns Type Description IActivator An activator that activates the Slice types defined in assembly provided this assembly contains generated code (as determined by the presence of the SliceAttribute attribute). Types defined in assemblies referenced by assembly are included as well, recursively. The types defined in the referenced assemblies of an assembly with no generated code are not considered. GetBitSequenceReader(int) Gets a bit sequence reader to read the underlying bit sequence later on. Declaration public BitSequenceReader GetBitSequenceReader(int bitSequenceSize) Parameters Type Name Description int bitSequenceSize The minimum number of bits in the sequence. Returns Type Description BitSequenceReader A bit sequence reader. Skip(int) Skip the given number of bytes. Declaration public void Skip(int count) Parameters Type Name Description int count The number of bytes to skip. SkipSize() Skip Slice size. Declaration public void SkipSize() SkipTagged(bool) Skips the remaining tagged data members or parameters. Declaration public void SkipTagged(bool useTagEndMarker) Parameters Type Name Description bool useTagEndMarker Whether or not the tagged data members or parameters use a tag end marker. Extension Methods CompressionFormatSliceDecoderExtensions.DecodeCompressionFormat(ref SliceDecoder) RequestFieldKeySliceDecoderExtensions.DecodeRequestFieldKey(ref SliceDecoder) ResponseFieldKeySliceDecoderExtensions.DecodeResponseFieldKey(ref SliceDecoder) IdentityPathSliceDecoderExtensions.DecodeIdentityPath(ref SliceDecoder) SliceDecoderExtensions.DecodeDictionary<TDictionary, TKey, TValue>(ref SliceDecoder, Func<int, TDictionary>, DecodeFunc<TKey>, DecodeFunc<TValue>) SliceDecoderExtensions.DecodeDictionaryWithOptionalValueType<TDictionary, TKey, TValue>(ref SliceDecoder, Func<int, TDictionary>, DecodeFunc<TKey>, DecodeFunc<TValue?>) SliceDecoderExtensions.DecodeSequence<T>(ref SliceDecoder, DecodeFunc<T>) SliceDecoderExtensions.DecodeSequence<T>(ref SliceDecoder, Action<T>?) SliceDecoderExtensions.DecodeSequence<TSequence, TElement>(ref SliceDecoder, Func<int, TSequence>, DecodeFunc<TElement>) SliceDecoderExtensions.DecodeSequenceOfOptionals<T>(ref SliceDecoder, DecodeFunc<T>) SliceDecoderExtensions.DecodeSequenceOfOptionals<TSequence, TElement>(ref SliceDecoder, Func<int, TSequence>, DecodeFunc<TElement>) StatusCodeSliceDecoderExtensions.DecodeStatusCode(ref SliceDecoder)"
  },
  "api/IceRpc.Slice.SliceDecoderExtensions.html": {
    "href": "api/IceRpc.Slice.SliceDecoderExtensions.html",
    "title": "Class SliceDecoderExtensions | IceRPC",
    "keywords": "Class SliceDecoderExtensions Provides extension methods for SliceDecoder. Inheritance object SliceDecoderExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public static class SliceDecoderExtensions Methods DecodeDictionary<TDictionary, TKey, TValue>(ref SliceDecoder, Func<int, TDictionary>, DecodeFunc<TKey>, DecodeFunc<TValue>) Decodes a dictionary. Declaration public static TDictionary DecodeDictionary<TDictionary, TKey, TValue>(this ref SliceDecoder decoder, Func<int, TDictionary> dictionaryFactory, DecodeFunc<TKey> keyDecodeFunc, DecodeFunc<TValue> valueDecodeFunc) where TDictionary : IDictionary<TKey, TValue> where TKey : notnull Parameters Type Name Description SliceDecoder decoder The Slice decoder. Func<int, TDictionary> dictionaryFactory The factory for creating the dictionary instance. DecodeFunc<TKey> keyDecodeFunc The decode function for each key of the dictionary. DecodeFunc<TValue> valueDecodeFunc The decode function for each value of the dictionary. Returns Type Description TDictionary The dictionary decoded by this decoder. Type Parameters Name Description TDictionary The type of the returned dictionary. TKey The type of the keys in the dictionary. TValue The type of the values in the dictionary. DecodeDictionaryWithOptionalValueType<TDictionary, TKey, TValue>(ref SliceDecoder, Func<int, TDictionary>, DecodeFunc<TKey>, DecodeFunc<TValue?>) Decodes a dictionary with an optional value type (T? in Slice). Declaration public static TDictionary DecodeDictionaryWithOptionalValueType<TDictionary, TKey, TValue>(this ref SliceDecoder decoder, Func<int, TDictionary> dictionaryFactory, DecodeFunc<TKey> keyDecodeFunc, DecodeFunc<TValue?> valueDecodeFunc) where TDictionary : IDictionary<TKey, TValue?> where TKey : notnull Parameters Type Name Description SliceDecoder decoder The Slice decoder. Func<int, TDictionary> dictionaryFactory The factory for creating the dictionary instance. DecodeFunc<TKey> keyDecodeFunc The decode function for each key of the dictionary. DecodeFunc<TValue> valueDecodeFunc The decode function for each non-null value of the dictionary. Returns Type Description TDictionary The dictionary decoded by this decoder. Type Parameters Name Description TDictionary The type of the returned dictionary. TKey The type of the keys in the dictionary. TValue The type of the values in the dictionary. DecodeSequence<T>(ref SliceDecoder, DecodeFunc<T>) Decodes a sequence. Declaration public static T[] DecodeSequence<T>(this ref SliceDecoder decoder, DecodeFunc<T> decodeFunc) Parameters Type Name Description SliceDecoder decoder The Slice decoder. DecodeFunc<T> decodeFunc The decode function for each element of the sequence. Returns Type Description T[] An array of T. Type Parameters Name Description T The type of the elements in the array. DecodeSequence<T>(ref SliceDecoder, Action<T>?) Decodes a sequence of fixed-size numeric values. Declaration public static T[] DecodeSequence<T>(this ref SliceDecoder decoder, Action<T>? checkElement = null) where T : struct Parameters Type Name Description SliceDecoder decoder The Slice decoder. Action<T> checkElement A delegate used to check each element of the array (optional). Returns Type Description T[] An array of T. Type Parameters Name Description T The sequence element type. DecodeSequence<TSequence, TElement>(ref SliceDecoder, Func<int, TSequence>, DecodeFunc<TElement>) Decodes a sequence. Declaration public static TSequence DecodeSequence<TSequence, TElement>(this ref SliceDecoder decoder, Func<int, TSequence> sequenceFactory, DecodeFunc<TElement> decodeFunc) where TSequence : IList<TElement> Parameters Type Name Description SliceDecoder decoder The Slice decoder. Func<int, TSequence> sequenceFactory The factory for creating the sequence instance. DecodeFunc<TElement> decodeFunc The decode function for each element of the sequence. Returns Type Description TSequence A TSequence. Type Parameters Name Description TSequence The type of the returned sequence. TElement The type of the elements in the sequence. DecodeSequenceOfOptionals<T>(ref SliceDecoder, DecodeFunc<T>) Decodes a sequence where the element type is an optional Slice type (T?). Declaration public static T?[] DecodeSequenceOfOptionals<T>(this ref SliceDecoder decoder, DecodeFunc<T> decodeFunc) Parameters Type Name Description SliceDecoder decoder The Slice decoder. DecodeFunc<T> decodeFunc The decode function for each non-null element of the sequence. Returns Type Description T[] An array of T. Type Parameters Name Description T The type of the elements in the array. Remarks We return a T? and not a T to avoid ambiguities in the generated code with nullable reference types such as string?. DecodeSequenceOfOptionals<TSequence, TElement>(ref SliceDecoder, Func<int, TSequence>, DecodeFunc<TElement>) Decodes a sequence where the element type is an optional Slice type (T?). Declaration public static TSequence DecodeSequenceOfOptionals<TSequence, TElement>(this ref SliceDecoder decoder, Func<int, TSequence> sequenceFactory, DecodeFunc<TElement> decodeFunc) where TSequence : IList<TElement> Parameters Type Name Description SliceDecoder decoder The Slice decoder. Func<int, TSequence> sequenceFactory The factory for creating the sequence instance. DecodeFunc<TElement> decodeFunc The decode function for each non-null element of the sequence. Returns Type Description TSequence A TSequence. Type Parameters Name Description TSequence The type of the returned sequence. TElement The type of the elements in the sequence."
  },
  "api/IceRpc.Slice.SliceEncodeOptions.html": {
    "href": "api/IceRpc.Slice.SliceEncodeOptions.html",
    "title": "Class SliceEncodeOptions | IceRPC",
    "keywords": "Class SliceEncodeOptions A property bag used to configure the encoding of payloads. Inheritance object SliceEncodeOptions Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public sealed class SliceEncodeOptions Constructors SliceEncodeOptions(MemoryPool<byte>?, int, int) Constructs a new instance. Declaration public SliceEncodeOptions(MemoryPool<byte>? pool = null, int minimumSegmentSize = -1, int streamFlushThreshold = -1) Parameters Type Name Description MemoryPool<byte> pool The pool parameter for the constructor of System.IO.Pipelines.PipeOptions. int minimumSegmentSize The minimum segment size for the constructor of System.IO.Pipelines.PipeOptions. int streamFlushThreshold The value of StreamFlushThreshold. The default value (-1) is equivalent to 16 KB. Properties Default Gets the default instance of SliceEncodeOptions. Declaration public static SliceEncodeOptions Default { get; } Property Value Type Description SliceEncodeOptions PipeOptions Gets the pipe options that the Slice engine uses when creating pipes. The Slice engine creates a pipe when encoding a request or response payload, and when encoding an async enumerable into a System.IO.Pipelines.PipeReader. Declaration public PipeOptions PipeOptions { get; } Property Value Type Description PipeOptions StreamFlushThreshold Gets the stream flush threshold. When encoding a Slice stream (async enumerable), the Slice engine encodes the values provided by the source async enumerable into a pipe writer. The Slice engine flushes this pipe writer when no new value is available synchronously, or when it has written StreamFlushThreshold bytes to this pipe writer. Declaration public int StreamFlushThreshold { get; } Property Value Type Description int"
  },
  "api/IceRpc.Slice.SliceEncoder.html": {
    "href": "api/IceRpc.Slice.SliceEncoder.html",
    "title": "Struct SliceEncoder | IceRPC",
    "keywords": "Struct SliceEncoder SliceEncoder class encoding methods. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public ref struct SliceEncoder Constructors SliceEncoder(PipeWriter, SliceEncoding, ClassFormat) Constructs an Slice encoder. Declaration public SliceEncoder(PipeWriter pipeWriter, SliceEncoding encoding, ClassFormat classFormat = ClassFormat.Compact) Parameters Type Name Description PipeWriter pipeWriter The pipe writer that provides the buffers to write into. SliceEncoding encoding The Slice encoding. ClassFormat classFormat The class format (Slice1 only). Properties EncodedByteCount Gets the number of bytes encoded by this encoder into the underlying buffer writer. Declaration public readonly int EncodedByteCount { get; } Property Value Type Description int Encoding Gets the Slice encoding of this encoder. Declaration public readonly SliceEncoding Encoding { get; } Property Value Type Description SliceEncoding Methods EncodeBool(bool) Encodes a bool into a Slice bool. Declaration public void EncodeBool(bool v) Parameters Type Name Description bool v The boolean to encode. EncodeClass(SliceClass) Encodes a class instance. Declaration public void EncodeClass(SliceClass v) Parameters Type Name Description SliceClass v The class instance to encode. EncodeFloat32(float) Encodes a float into a Slice float32. Declaration public void EncodeFloat32(float v) Parameters Type Name Description float v The float to encode. EncodeFloat64(double) Encodes a double into a Slice float64. Declaration public void EncodeFloat64(double v) Parameters Type Name Description double v The double to encode. EncodeInt16(short) Encodes a short into a Slice int16. Declaration public void EncodeInt16(short v) Parameters Type Name Description short v The short to encode. EncodeInt32(int) Encodes an int into a Slice int32. Declaration public void EncodeInt32(int v) Parameters Type Name Description int v The int to encode. EncodeInt64(long) Encodes a long into a Slice int64. Declaration public void EncodeInt64(long v) Parameters Type Name Description long v The long to encode. EncodeInt8(sbyte) Encodes an sbyte into a Slice int8. Declaration public void EncodeInt8(sbyte v) Parameters Type Name Description sbyte v The sbyte to encode. EncodeNullableClass(SliceClass?) Encodes a class instance, or null. Declaration public void EncodeNullableClass(SliceClass? v) Parameters Type Name Description SliceClass v The class instance to encode, or null. EncodeNullableServiceAddress(ServiceAddress?) Encodes a nullable service address (Slice1 only). Declaration public void EncodeNullableServiceAddress(ServiceAddress? serviceAddress) Parameters Type Name Description ServiceAddress serviceAddress The service address to encode, or null. EncodeServiceAddress(ServiceAddress) Encodes a non-null service address. Declaration public void EncodeServiceAddress(ServiceAddress serviceAddress) Parameters Type Name Description ServiceAddress serviceAddress The service address to encode. EncodeSize(int) Encodes a size on variable number of bytes. Declaration public void EncodeSize(int value) Parameters Type Name Description int value The size to encode. EncodeString(string) Encodes a string into a Slice string. Declaration public void EncodeString(string v) Parameters Type Name Description string v The string to encode. EncodeTagged<T>(int, T, EncodeAction<T>) Encodes a non-null Slice2 encoded tagged value. The number of bytes needed to encode the value is not known before encoding this value (Slice2 only). Declaration public void EncodeTagged<T>(int tag, T v, EncodeAction<T> encodeAction) where T : notnull Parameters Type Name Description int tag The tag. T v The value to encode. EncodeAction<T> encodeAction The delegate that encodes the value after the tag header. Type Parameters Name Description T The type of the value being encoded. EncodeTagged<T>(int, TagFormat, T, EncodeAction<T>) Encodes a non-null Slice1 encoded tagged value. The number of bytes needed to encode the value is not known before encoding this value. Declaration public void EncodeTagged<T>(int tag, TagFormat tagFormat, T v, EncodeAction<T> encodeAction) where T : notnull Parameters Type Name Description int tag The tag. Must be either FSize or OptimizedVSize. TagFormat tagFormat The tag format. T v The value to encode. EncodeAction<T> encodeAction The delegate that encodes the value after the tag header. Type Parameters Name Description T The type of the value being encoded. Exceptions Type Condition System.ArgumentException Thrown if tagFormat is VSize. EncodeTagged<T>(int, int, T, EncodeAction<T>) Encodes a non-null encoded tagged value. The number of bytes needed to encode the value is known before encoding the value. With Slice1 encoding this method always use the VSize tag format. Declaration public void EncodeTagged<T>(int tag, int size, T v, EncodeAction<T> encodeAction) where T : notnull Parameters Type Name Description int tag The tag. int size The number of bytes needed to encode the value. T v The value to encode. EncodeAction<T> encodeAction The delegate that encodes the value after the tag header. Type Parameters Name Description T The type of the value being encoded. EncodeUInt16(ushort) Encodes a ushort into a Slice uint16. Declaration public void EncodeUInt16(ushort v) Parameters Type Name Description ushort v The ushort to encode. EncodeUInt32(uint) Encodes a uint into a Slice uint32. Declaration public void EncodeUInt32(uint v) Parameters Type Name Description uint v The uint to encode. EncodeUInt64(ulong) Encodes a ulong into a Slice uint64. Declaration public void EncodeUInt64(ulong v) Parameters Type Name Description ulong v The ulong to encode. EncodeUInt8(byte) Encodes a byte into a Slice uint8. Declaration public void EncodeUInt8(byte v) Parameters Type Name Description byte v The byte to encode. EncodeVarInt32(int) Encodes an int into a Slice varint32. Declaration public void EncodeVarInt32(int v) Parameters Type Name Description int v The int to encode. EncodeVarInt62(long) Encodes a long into a Slice varint62, with the minimum number of bytes required by the encoding. Declaration public void EncodeVarInt62(long v) Parameters Type Name Description long v The long to encode. It must be in the range [-2^61..2^61 - 1]. EncodeVarUInt32(uint) Encodes a uint into a Slice varuint32. Declaration public void EncodeVarUInt32(uint v) Parameters Type Name Description uint v The uint to encode. EncodeVarUInt62(ulong, Span<byte>) Encodes a ulong as a Slice varuint62 into a span of bytes using a fixed number of bytes. Declaration public static void EncodeVarUInt62(ulong value, Span<byte> into) Parameters Type Name Description ulong value The value to encode. Span<byte> into The destination byte buffer, which must be 1, 2, 4 or 8 bytes long. EncodeVarUInt62(ulong) Encodes a ulong into a Slice varuint62, with the minimum number of bytes required by the encoding. Declaration public void EncodeVarUInt62(ulong v) Parameters Type Name Description ulong v The ulong to encode. It must be in the range [0..2^62 - 1]. GetBitSequenceWriter(int) Allocates a new bit sequence in the underlying buffer(s) and returns a writer for this bit sequence. Declaration public BitSequenceWriter GetBitSequenceWriter(int bitSequenceSize) Parameters Type Name Description int bitSequenceSize The minimum number of bits in the bit sequence. Returns Type Description BitSequenceWriter The bit sequence writer. GetPlaceholderSpan(int) Gets a placeholder to be filled-in later. Declaration public Span<byte> GetPlaceholderSpan(int size) Parameters Type Name Description int size The size of the placeholder, typically a small number like 4. Returns Type Description Span<byte> A buffer of length size. Remarks We make the assumption the underlying buffer writer allows rewriting memory it provided even after successive calls to GetMemory/GetSpan and Advance. GetSizeLength(int) Computes the minimum number of bytes needed to encode a variable-length size. Declaration public int GetSizeLength(int size) Parameters Type Name Description int size The size. Returns Type Description int The minimum number of bytes. GetVarInt62EncodedSize(long) Computes the minimum number of bytes required to encode a long value using the Slice encoding's variable-size encoded representation. Declaration public static int GetVarInt62EncodedSize(long value) Parameters Type Name Description long value The long value. Returns Type Description int The minimum number of bytes required to encode value. Can be 1, 2, 4 or 8. GetVarUInt62EncodedSize(ulong) Computes the minimum number of bytes required to encode a ulong value using the Slice encoding's variable-size encoded representation. Declaration public static int GetVarUInt62EncodedSize(ulong value) Parameters Type Name Description ulong value The ulong value. Returns Type Description int The minimum number of bytes required to encode value. Can be 1, 2, 4 or 8. WriteByteSpan(ReadOnlySpan<byte>) Copies a span of bytes to the underlying buffer writer. Declaration public void WriteByteSpan(ReadOnlySpan<byte> span) Parameters Type Name Description ReadOnlySpan<byte> span The span to copy. Extension Methods CompressionFormatSliceEncoderExtensions.EncodeCompressionFormat(ref SliceEncoder, CompressionFormat) RequestFieldKeySliceEncoderExtensions.EncodeRequestFieldKey(ref SliceEncoder, RequestFieldKey) ResponseFieldKeySliceEncoderExtensions.EncodeResponseFieldKey(ref SliceEncoder, ResponseFieldKey) IdentityPathSliceEncoderExtensions.EncodeIdentityPath(ref SliceEncoder, string) SliceEncoderExtensions.EncodeDictionary<TKey, TValue>(ref SliceEncoder, IEnumerable<KeyValuePair<TKey, TValue>>, EncodeAction<TKey>, EncodeAction<TValue>) SliceEncoderExtensions.EncodeDictionaryWithOptionalValueType<TKey, TValue>(ref SliceEncoder, IEnumerable<KeyValuePair<TKey, TValue>>, EncodeAction<TKey>, EncodeAction<TValue>) SliceEncoderExtensions.EncodeSequence<T>(ref SliceEncoder, IEnumerable<T>, EncodeAction<T>) SliceEncoderExtensions.EncodeSequence<T>(ref SliceEncoder, IEnumerable<T>) SliceEncoderExtensions.EncodeSequenceOfOptionals<T>(ref SliceEncoder, IEnumerable<T>, EncodeAction<T>) SliceEncoderExtensions.EncodeSpan<T>(ref SliceEncoder, ReadOnlySpan<T>) SliceEncoderExtensions.WriteByteSequence(ref SliceEncoder, ReadOnlySequence<byte>) StatusCodeSliceEncoderExtensions.EncodeStatusCode(ref SliceEncoder, StatusCode)"
  },
  "api/IceRpc.Slice.SliceEncoderExtensions.html": {
    "href": "api/IceRpc.Slice.SliceEncoderExtensions.html",
    "title": "Class SliceEncoderExtensions | IceRPC",
    "keywords": "Class SliceEncoderExtensions Provides extension methods for SliceEncoder. Inheritance object SliceEncoderExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public static class SliceEncoderExtensions Methods EncodeDictionary<TKey, TValue>(ref SliceEncoder, IEnumerable<KeyValuePair<TKey, TValue>>, EncodeAction<TKey>, EncodeAction<TValue>) Encodes a dictionary. Declaration public static void EncodeDictionary<TKey, TValue>(this ref SliceEncoder encoder, IEnumerable<KeyValuePair<TKey, TValue>> v, EncodeAction<TKey> keyEncodeAction, EncodeAction<TValue> valueEncodeAction) where TKey : notnull Parameters Type Name Description SliceEncoder encoder The Slice encoder. IEnumerable<KeyValuePair<TKey, TValue>> v The dictionary to encode. EncodeAction<TKey> keyEncodeAction The encode action for the keys. EncodeAction<TValue> valueEncodeAction The encode action for the values. Type Parameters Name Description TKey The dictionary key type. TValue The dictionary value type. EncodeDictionaryWithOptionalValueType<TKey, TValue>(ref SliceEncoder, IEnumerable<KeyValuePair<TKey, TValue>>, EncodeAction<TKey>, EncodeAction<TValue>) Encodes a dictionary with an optional value type (T? in Slice). Declaration public static void EncodeDictionaryWithOptionalValueType<TKey, TValue>(this ref SliceEncoder encoder, IEnumerable<KeyValuePair<TKey, TValue>> v, EncodeAction<TKey> keyEncodeAction, EncodeAction<TValue> valueEncodeAction) where TKey : notnull Parameters Type Name Description SliceEncoder encoder The Slice encoder. IEnumerable<KeyValuePair<TKey, TValue>> v The dictionary to encode. EncodeAction<TKey> keyEncodeAction The encode action for the keys. EncodeAction<TValue> valueEncodeAction The encode action for the non-null values. Type Parameters Name Description TKey The dictionary key type. TValue The dictionary value type. EncodeSequence<T>(ref SliceEncoder, IEnumerable<T>, EncodeAction<T>) Encodes a sequence. Declaration public static void EncodeSequence<T>(this ref SliceEncoder encoder, IEnumerable<T> v, EncodeAction<T> encodeAction) Parameters Type Name Description SliceEncoder encoder The Slice encoder. IEnumerable<T> v The sequence to encode. EncodeAction<T> encodeAction The encode action for an element. Type Parameters Name Description T The type of the sequence elements. It is non-nullable except for nullable class and proxy types. EncodeSequence<T>(ref SliceEncoder, IEnumerable<T>) Encodes a sequence of fixed-size numeric values, such as int or ulong. Declaration public static void EncodeSequence<T>(this ref SliceEncoder encoder, IEnumerable<T> v) where T : struct, INumber<T> Parameters Type Name Description SliceEncoder encoder The Slice encoder. IEnumerable<T> v The sequence of numeric values. Type Parameters Name Description T The sequence element type. EncodeSequenceOfOptionals<T>(ref SliceEncoder, IEnumerable<T>, EncodeAction<T>) Encodes a sequence where the element type is an optional Slice type (T?). Declaration public static void EncodeSequenceOfOptionals<T>(this ref SliceEncoder encoder, IEnumerable<T> v, EncodeAction<T> encodeAction) Parameters Type Name Description SliceEncoder encoder The Slice encoder. IEnumerable<T> v The sequence to encode. EncodeAction<T> encodeAction The encode action for a non-null value. Type Parameters Name Description T The nullable type of the sequence elements. Remarks This method always encodes a bit sequence. EncodeSpan<T>(ref SliceEncoder, ReadOnlySpan<T>) Encodes a span of fixed-size numeric values, such as int or ulong. Declaration public static void EncodeSpan<T>(this ref SliceEncoder encoder, ReadOnlySpan<T> v) where T : struct Parameters Type Name Description SliceEncoder encoder The Slice encoder. ReadOnlySpan<T> v The span of numeric values represented by a System.ReadOnlySpan<T>. Type Parameters Name Description T The span element type. WriteByteSequence(ref SliceEncoder, ReadOnlySequence<byte>) Copies a sequence of bytes to the underlying buffer writer. Declaration public static void WriteByteSequence(this ref SliceEncoder encoder, ReadOnlySequence<byte> v) Parameters Type Name Description SliceEncoder encoder The Slice encoder. ReadOnlySequence<byte> v The sequence to copy."
  },
  "api/IceRpc.Slice.SliceEncoding.html": {
    "href": "api/IceRpc.Slice.SliceEncoding.html",
    "title": "Enum SliceEncoding | IceRPC",
    "keywords": "Enum SliceEncoding The versions of the Slice encoding supported by this IceRPC runtime. Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public enum SliceEncoding : byte Fields Name Description Slice1 Version 1.1 of the Slice encoding, supported by IceRPC and Ice 3.5 or greater. Slice2 Version 2.0 of the Slice encoding, supported by IceRPC. Extension Methods SliceEncodingExtensions.CreateSizeZeroPayload(SliceEncoding)"
  },
  "api/IceRpc.Slice.SliceEncodingExtensions.html": {
    "href": "api/IceRpc.Slice.SliceEncodingExtensions.html",
    "title": "Class SliceEncodingExtensions | IceRPC",
    "keywords": "Class SliceEncodingExtensions Extension methods for SliceEncoding. Inheritance object SliceEncodingExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public static class SliceEncodingExtensions Methods CreateSizeZeroPayload(SliceEncoding) Creates a non-empty payload with size 0. Declaration public static PipeReader CreateSizeZeroPayload(this SliceEncoding encoding) Parameters Type Name Description SliceEncoding encoding The Slice encoding. Returns Type Description PipeReader A non-empty payload with size 0."
  },
  "api/IceRpc.Slice.SliceException.html": {
    "href": "api/IceRpc.Slice.SliceException.html",
    "title": "Class SliceException | IceRPC",
    "keywords": "Class SliceException Base class for exceptions defined in Slice. Inheritance object Exception DispatchException SliceException AdapterAlreadyActiveException AdapterNotFoundException InvalidReplicaGroupIdException ObjectNotFoundException ServerNotFoundException Implements ISerializable Inherited Members DispatchException.ConvertToUnhandled DispatchException.StatusCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public abstract class SliceException : DispatchException, ISerializable Constructors SliceException(string?, Exception?) Constructs a Slice exception with the provided message and inner exception. Declaration protected SliceException(string? message = null, Exception? innerException = null) Parameters Type Name Description string message A message that describes the exception. Exception innerException The inner exception. Methods DecodeCore(ref SliceDecoder) Decodes a Slice exception. Declaration protected virtual void DecodeCore(ref SliceDecoder decoder) Parameters Type Name Description SliceDecoder decoder The Slice decoder. Remarks Implemented only by Slice1-compatible exceptions. Encode(ref SliceEncoder) Encodes this exception. Declaration public void Encode(ref SliceEncoder encoder) Parameters Type Name Description SliceEncoder encoder The Slice encoder. EncodeCore(ref SliceEncoder) Encodes this Slice exception. Declaration protected abstract void EncodeCore(ref SliceEncoder encoder) Parameters Type Name Description SliceEncoder encoder The Slice encoder. Remarks Implemented for all Slice encodings. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/IceRpc.Slice.SliceFeature.html": {
    "href": "api/IceRpc.Slice.SliceFeature.html",
    "title": "Class SliceFeature | IceRPC",
    "keywords": "Class SliceFeature The default implementation for ISliceFeature. Inheritance object SliceFeature Implements ISliceFeature Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public sealed class SliceFeature : ISliceFeature Constructors SliceFeature(IActivator?, SliceEncodeOptions?, int, int, int, Func<ServiceAddress, GenericProxy?, GenericProxy>?, ISliceFeature?) Constructs a Slice feature. Declaration public SliceFeature(IActivator? activator = null, SliceEncodeOptions? encodeOptions = null, int maxCollectionAllocation = -1, int maxDepth = -1, int maxSegmentSize = -1, Func<ServiceAddress, GenericProxy?, GenericProxy>? proxyFactory = null, ISliceFeature? defaultFeature = null) Parameters Type Name Description IActivator activator The activator. SliceEncodeOptions encodeOptions The encode options. int maxCollectionAllocation The maximum collection allocation. Use -1 to get the default value: 8 times maxSegmentSize if set, otherwise the value provided by defaultFeature. int maxDepth The maximum depth. Use -1 to get the default value. int maxSegmentSize The maximum segment size. Use -1 to get the default value. Func<ServiceAddress, GenericProxy?, GenericProxy> proxyFactory The proxy factory. ISliceFeature defaultFeature A feature that provides default values for all parameters. null is equivalent to Default. Properties Activator Gets the activator to use when decoding Slice1-encoded classes and exceptions. Declaration public IActivator? Activator { get; } Property Value Type Description IActivator The activator. When null, the decoding of a request or response payload uses the activator injected by the Slice generated code. Default Gets a ISliceFeature with default values for all properties. Declaration public static ISliceFeature Default { get; } Property Value Type Description ISliceFeature EncodeOptions Gets the options to use when encoding the payload of an outgoing response. Declaration public SliceEncodeOptions? EncodeOptions { get; } Property Value Type Description SliceEncodeOptions The Slice encode options. null is equivalent to Default. MaxCollectionAllocation Gets the maximum collection allocation when decoding a payload, in bytes. Declaration public int MaxCollectionAllocation { get; } Property Value Type Description int MaxDepth Gets the maximum depth when decoding a class recursively. Declaration public int MaxDepth { get; } Property Value Type Description int The maximum depth. Defaults to 100. MaxSegmentSize Gets the maximum size of a Slice payload segment, in bytes. A Slice payload segment corresponds to the encoded arguments of an operation, the encoded return values of an operation, or a portion of a stream of variable-size elements. Declaration public int MaxSegmentSize { get; } Property Value Type Description int The maximum segment size. Defaults to 1 MB. ProxyFactory Gets the proxy factory to use when decoding proxies in request or response payloads. Declaration public Func<ServiceAddress, GenericProxy?, GenericProxy>? ProxyFactory { get; } Property Value Type Description Func<ServiceAddress, GenericProxy?, GenericProxy> Implements ISliceFeature"
  },
  "api/IceRpc.Slice.SliceInfo.html": {
    "href": "api/IceRpc.Slice.SliceInfo.html",
    "title": "Class SliceInfo | IceRPC",
    "keywords": "Class SliceInfo SliceInfo encapsulates the details of a slice for an unknown class encoded with the Slice1 encoding. Inheritance object SliceInfo Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public sealed class SliceInfo Properties Bytes Gets the encoded bytes for this slice, including the leading size integer. Declaration public ReadOnlyMemory<byte> Bytes { get; } Property Value Type Description ReadOnlyMemory<byte> HasTaggedMembers Gets a value indicating whether or not the slice contains tagged members. Declaration public bool HasTaggedMembers { get; } Property Value Type Description bool Instances Gets the class instances referenced by this slice. Declaration public IReadOnlyList<SliceClass> Instances { get; } Property Value Type Description IReadOnlyList<SliceClass> TypeId Gets the Slice type ID or compact ID for this slice. Declaration public string TypeId { get; } Property Value Type Description string"
  },
  "api/IceRpc.Slice.TagFormat.html": {
    "href": "api/IceRpc.Slice.TagFormat.html",
    "title": "Enum TagFormat | IceRPC",
    "keywords": "Enum TagFormat With Slice1, each tagged parameter has a specific tag format. This tag format describes how the data is encoded and how it can be skipped by the decoding code if the tagged parameter is present in the buffer but is not known to the receiver. The tag format is encoded in 3 bits as a result only values in the range 0 to 7 are encoded. Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public enum TagFormat Fields Name Description Class Represents a class, but is no longer encoded or decoded. F1 A fixed size numeric encoded on 1 byte such as bool or uint8. F2 A fixed size numeric encoded on 2 bytes such as int16. F4 A fixed size numeric encoded on 4 bytes such as int32 or float32. F8 A fixed size numeric encoded on 8 bytes such as int64 or float64. FSize A fixed length size (encoded on 4 bytes) followed by size bytes. OptimizedVSize Pseudo non-encoded format: like VSize but the size is optimized out. Size A variable-length size encoded on 1 or 5 bytes. VSize A variable-length size followed by size bytes."
  },
  "api/IceRpc.Slice.TypeExtensions.html": {
    "href": "api/IceRpc.Slice.TypeExtensions.html",
    "title": "Class TypeExtensions | IceRPC",
    "keywords": "Class TypeExtensions This class adds extension methods to System.Type. Inheritance object TypeExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public static class TypeExtensions Methods GetAllSliceTypeIds(Type) Retrieves the Slice type ID from a type and from all its base types. When type is an interface, it returns the type ID for that interface, plus all its base interfaces, and these type IDs are returned in alphabetical order. When type is a class, it returns the type ID of that class plus the type ID of the base classes. These type IDs are sorted from most derived to least derived. Declaration public static string[] GetAllSliceTypeIds(this Type type) Parameters Type Name Description Type type The type of a class or interface generated by the Slice compiler. Returns Type Description string[] An array of Slice type IDs. GetCompactSliceTypeId(Type) Retrieves the compact Slice type ID from a type with the attribute IceRpc.CompactTypeId. Declaration public static int? GetCompactSliceTypeId(this Type type) Parameters Type Name Description Type type The type of a class generated by the Slice compiler. Returns Type Description int? The compact Slice type ID, or null if type does not carry the IceRpc.CompactTypeId attribute. GetDefaultPath(Type) Computes the default path for this type using its Slice type ID attribute. Declaration public static string GetDefaultPath(this Type type) Parameters Type Name Description Type type The interface generated by the Slice compiler. Returns Type Description string The default path. GetSliceTypeId(Type) Retrieves the Slice type ID from a type with the attribute IceRpc.TypeId. Declaration public static string? GetSliceTypeId(this Type type) Parameters Type Name Description Type type The type of a class or interface generated by the Slice compiler. Returns Type Description string The Slice type ID, or null if type does not carry the IceRpc.TypeId attribute."
  },
  "api/IceRpc.Slice.TypeIdAttribute.html": {
    "href": "api/IceRpc.Slice.TypeIdAttribute.html",
    "title": "Class TypeIdAttribute | IceRPC",
    "keywords": "Class TypeIdAttribute This attribute class is used by the generated code to assign a Slice type ID to C# classes, interfaces and structs mapped from Slice interfaces, classes and exceptions. Inheritance object Attribute TypeIdAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax [AttributeUsage(AttributeTargets.Class|AttributeTargets.Struct|AttributeTargets.Interface, Inherited = false)] public sealed class TypeIdAttribute : Attribute Constructors TypeIdAttribute(string) Constructs a TypeIdAttribute. Declaration public TypeIdAttribute(string value) Parameters Type Name Description string value The Slice type ID. Properties Value Gets the Slice type ID. Declaration public string Value { get; } Property Value Type Description string The Slice type ID string."
  },
  "api/IceRpc.Slice.UnknownSlicedClass.html": {
    "href": "api/IceRpc.Slice.UnknownSlicedClass.html",
    "title": "Class UnknownSlicedClass | IceRPC",
    "keywords": "Class UnknownSlicedClass UnknownSlicedClass represents a fully sliced class instance. The local IceRPC runtime does not know this type or any of its base classes (other than SliceClass). Inheritance object SliceClass UnknownSlicedClass Inherited Members SliceClass.UnknownSlices object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Slice Assembly: IceRpc.dll Syntax public sealed class UnknownSlicedClass : SliceClass Methods DecodeCore(ref SliceDecoder) Decodes the properties of this instance. Declaration protected override void DecodeCore(ref SliceDecoder decoder) Parameters Type Name Description SliceDecoder decoder The Slice decoder. Overrides SliceClass.DecodeCore(ref SliceDecoder) EncodeCore(ref SliceEncoder) Encodes the properties of this instance. Declaration protected override void EncodeCore(ref SliceEncoder encoder) Parameters Type Name Description SliceEncoder encoder The Slice encoder. Overrides SliceClass.EncodeCore(ref SliceEncoder)"
  },
  "api/IceRpc.StatusCode.html": {
    "href": "api/IceRpc.StatusCode.html",
    "title": "Enum StatusCode | IceRPC",
    "keywords": "Enum StatusCode The status code indicates whether the dispatch of a request has completed successfully, and, if not, which error occurred. It's carried by responses. Namespace: IceRpc Assembly: IceRpc.dll Syntax public enum StatusCode : ulong Fields Name Description ApplicationError The dispatch failed with an application-specific error. DeadlineExpired The dispatch detected the expiration of the request's deadline. InvalidData The dispatch failed because the request payload could not be decoded or because a middleware could not decode a request field. It is typically due to a mismatch of the Slice definitions (or more generally IDL definitions) used by the invoker and the dispatcher. OperationNotFound The dispatch found the target service but this target service does not have the requested operation. ServiceNotFound The dispatch could not find the target service. Success The dispatch completed successfully. TruncatedPayload The dispatch failed because it received a truncated payload. This is usually caused by a failure of the invoker while it was sending the payload. Unauthorized The caller is not authorized to access the requested resource. Unavailable The target service is currently unavailable and the caller can safely retry. UnhandledException The dispatch failed with an unhandled exception."
  },
  "api/IceRpc.StatusCodeSliceDecoderExtensions.html": {
    "href": "api/IceRpc.StatusCodeSliceDecoderExtensions.html",
    "title": "Class StatusCodeSliceDecoderExtensions | IceRPC",
    "keywords": "Class StatusCodeSliceDecoderExtensions Provide extension methods for encoding StatusCode. Inheritance object StatusCodeSliceDecoderExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public static class StatusCodeSliceDecoderExtensions Methods DecodeStatusCode(ref SliceDecoder) Decodes a StatusCode enum. Declaration public static StatusCode DecodeStatusCode(this ref SliceDecoder decoder) Parameters Type Name Description SliceDecoder decoder The Slice decoder. Returns Type Description StatusCode The decoded StatusCode enumerator value."
  },
  "api/IceRpc.StatusCodeSliceEncoderExtensions.html": {
    "href": "api/IceRpc.StatusCodeSliceEncoderExtensions.html",
    "title": "Class StatusCodeSliceEncoderExtensions | IceRPC",
    "keywords": "Class StatusCodeSliceEncoderExtensions Provide extension methods for encoding StatusCode. Inheritance object StatusCodeSliceEncoderExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public static class StatusCodeSliceEncoderExtensions Methods EncodeStatusCode(ref SliceEncoder, StatusCode) Encodes a StatusCode enum. Declaration public static void EncodeStatusCode(this ref SliceEncoder encoder, StatusCode value) Parameters Type Name Description SliceEncoder encoder The Slice encoder. StatusCode value The StatusCode enumerator value to encode."
  },
  "api/IceRpc.StatusCodeUlongExtensions.html": {
    "href": "api/IceRpc.StatusCodeUlongExtensions.html",
    "title": "Class StatusCodeUlongExtensions | IceRPC",
    "keywords": "Class StatusCodeUlongExtensions Provides an extension method for creating a StatusCode from an ulong. Inheritance object StatusCodeUlongExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.dll Syntax public static class StatusCodeUlongExtensions Methods AsStatusCode(ulong) Converts a ulong into the corresponding StatusCode enumerator. Declaration public static StatusCode AsStatusCode(this ulong value) Parameters Type Name Description ulong value The value being converted. Returns Type Description StatusCode The enumerator."
  },
  "api/IceRpc.Telemetry.html": {
    "href": "api/IceRpc.Telemetry.html",
    "title": "Namespace IceRpc.Telemetry | IceRPC",
    "keywords": "Namespace IceRpc.Telemetry Classes TelemetryInterceptor An interceptor that starts an System.Diagnostics.Activity per request, following OpenTelemetry conventions. The activity context is written in the request TraceContext field and can be restored on the server-side by installing the TelemetryMiddleware. TelemetryMiddleware A middleware that starts an System.Diagnostics.Activity per request, following OpenTelemetry conventions. The middleware restores the parent invocation activity from the request TraceContext field before starting the dispatch activity."
  },
  "api/IceRpc.Telemetry.TelemetryInterceptor.html": {
    "href": "api/IceRpc.Telemetry.TelemetryInterceptor.html",
    "title": "Class TelemetryInterceptor | IceRPC",
    "keywords": "Class TelemetryInterceptor An interceptor that starts an System.Diagnostics.Activity per request, following OpenTelemetry conventions. The activity context is written in the request TraceContext field and can be restored on the server-side by installing the TelemetryMiddleware. Inheritance object TelemetryInterceptor Implements IInvoker Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Telemetry Assembly: IceRpc.Telemetry.dll Syntax public class TelemetryInterceptor : IInvoker Remarks The activities are only created for requests using the icerpc protocol. Constructors TelemetryInterceptor(IInvoker, ActivitySource) Constructs a telemetry interceptor. Declaration public TelemetryInterceptor(IInvoker next, ActivitySource activitySource) Parameters Type Name Description IInvoker next The next invoker in the invocation pipeline. ActivitySource activitySource The System.Diagnostics.ActivitySource used to start the request activity. Methods InvokeAsync(OutgoingRequest, CancellationToken) Sends an outgoing request and returns the corresponding incoming response. Declaration public Task<IncomingResponse> InvokeAsync(OutgoingRequest request, CancellationToken cancellationToken) Parameters Type Name Description OutgoingRequest request The outgoing request being sent. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task<IncomingResponse> The corresponding IncomingResponse. Remarks When request is a two-way request, the returned task will not complete successfully until after the request's Payload is fully sent and the response is received from the peer. When the request is a one-way request, the returned task completes successfully with an empty response when the request's Payload is fully sent. For all requests (one-way and two-way), the sending of the request's PayloadContinuation can continue in a background task after the returned task has completed successfully. Implements IInvoker"
  },
  "api/IceRpc.Telemetry.TelemetryMiddleware.html": {
    "href": "api/IceRpc.Telemetry.TelemetryMiddleware.html",
    "title": "Class TelemetryMiddleware | IceRPC",
    "keywords": "Class TelemetryMiddleware A middleware that starts an System.Diagnostics.Activity per request, following OpenTelemetry conventions. The middleware restores the parent invocation activity from the request TraceContext field before starting the dispatch activity. Inheritance object TelemetryMiddleware Implements IDispatcher Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Telemetry Assembly: IceRpc.Telemetry.dll Syntax public class TelemetryMiddleware : IDispatcher Remarks The activities are only created for requests using the icerpc protocol. Constructors TelemetryMiddleware(IDispatcher, ActivitySource) Constructs a telemetry middleware. Declaration public TelemetryMiddleware(IDispatcher next, ActivitySource activitySource) Parameters Type Name Description IDispatcher next The next dispatcher in the dispatch pipeline. ActivitySource activitySource The System.Diagnostics.ActivitySource is used to start the request activity. See Also TelemetryInterceptor Methods DispatchAsync(IncomingRequest, CancellationToken) Dispatches an incoming request and returns the corresponding outgoing response. Declaration public ValueTask<OutgoingResponse> DispatchAsync(IncomingRequest request, CancellationToken cancellationToken) Parameters Type Name Description IncomingRequest request The incoming request being dispatched. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask<OutgoingResponse> The corresponding OutgoingResponse. See Also TelemetryInterceptor Implements IDispatcher See Also TelemetryInterceptor"
  },
  "api/IceRpc.TelemetryPipelineExtensions.html": {
    "href": "api/IceRpc.TelemetryPipelineExtensions.html",
    "title": "Class TelemetryPipelineExtensions | IceRPC",
    "keywords": "Class TelemetryPipelineExtensions This class provide extension methods to add the telemetry interceptor to a Pipeline. Inheritance object TelemetryPipelineExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.Telemetry.dll Syntax public static class TelemetryPipelineExtensions Methods UseTelemetry(Pipeline, ActivitySource) Adds the TelemetryInterceptor to the pipeline. Declaration public static Pipeline UseTelemetry(this Pipeline pipeline, ActivitySource activitySource) Parameters Type Name Description Pipeline pipeline The pipeline being configured. ActivitySource activitySource The System.Diagnostics.ActivitySource used to start the request activity. Returns Type Description Pipeline The pipeline being configured."
  },
  "api/IceRpc.TelemetryRouterExtensions.html": {
    "href": "api/IceRpc.TelemetryRouterExtensions.html",
    "title": "Class TelemetryRouterExtensions | IceRPC",
    "keywords": "Class TelemetryRouterExtensions This class provide extension methods to add the telemetry middleware to a Router. Inheritance object TelemetryRouterExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc Assembly: IceRpc.Telemetry.dll Syntax public static class TelemetryRouterExtensions Methods UseTelemetry(Router, ActivitySource) Adds a TelemetryMiddleware to the router. Declaration public static Router UseTelemetry(this Router router, ActivitySource activitySource) Parameters Type Name Description Router router The router being configured. ActivitySource activitySource The System.Diagnostics.ActivitySource is used to start the request activity. Returns Type Description Router The router being configured."
  },
  "api/IceRpc.Transports.ColocTransport.html": {
    "href": "api/IceRpc.Transports.ColocTransport.html",
    "title": "Class ColocTransport | IceRPC",
    "keywords": "Class ColocTransport The Coloc transport class provides a client and server duplex transport that can be used for in-process communications. Inheritance object ColocTransport Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Transports Assembly: IceRpc.Coloc.dll Syntax public sealed class ColocTransport Constructors ColocTransport() Constructs a ColocTransport. Declaration public ColocTransport() ColocTransport(ColocTransportOptions) Constructs a ColocTransport. Declaration public ColocTransport(ColocTransportOptions options) Parameters Type Name Description ColocTransportOptions options The options to configure the Coloc transport. Fields Name The transport name. Declaration public const string Name = \"coloc\" Field Value Type Description string Properties ClientTransport Gets the colocated client transport. Declaration public IDuplexClientTransport ClientTransport { get; } Property Value Type Description IDuplexClientTransport The client transport. ServerTransport Gets the colocated server transport. Declaration public IDuplexServerTransport ServerTransport { get; } Property Value Type Description IDuplexServerTransport The server transport."
  },
  "api/IceRpc.Transports.ColocTransportOptions.html": {
    "href": "api/IceRpc.Transports.ColocTransportOptions.html",
    "title": "Class ColocTransportOptions | IceRPC",
    "keywords": "Class ColocTransportOptions A property bag used to configure a ColocTransport. Inheritance object ColocTransportOptions Implements IEquatable<ColocTransportOptions> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: IceRpc.Transports Assembly: IceRpc.Coloc.dll Syntax public sealed record ColocTransportOptions : IEquatable<ColocTransportOptions> Constructors ColocTransportOptions() Declaration public ColocTransportOptions() Properties ListenBacklog Gets or sets the maximum length of the pending connections queue. Declaration public int ListenBacklog { get; set; } Property Value Type Description int The maximum queue length. The value cannot be less than 1. Defaults to 511. PauseWriterThreshold Gets or sets the number of bytes in the Coloc connection when WriteAsync(IReadOnlyList<ReadOnlyMemory<byte>>, CancellationToken) starts blocking. Declaration public int PauseWriterThreshold { get; set; } Property Value Type Description int The pause writer threshold. The value cannot be less than 1 KB. Defaults to 64 KB. ResumeWriterThreshold Gets or sets the number of bytes in the Coloc connection when WriteAsync(IReadOnlyList<ReadOnlyMemory<byte>>, CancellationToken) stops blocking. Declaration public int ResumeWriterThreshold { get; set; } Property Value Type Description int The resume writer threshold. The value cannot be less than 1 KB and cannot be greater than PauseWriterThreshold. Defaults to 32 KB. Methods <Clone>$() Declaration public ColocTransportOptions <Clone>$() Returns Type Description ColocTransportOptions Equals(ColocTransportOptions?) Declaration public bool Equals(ColocTransportOptions? other) Parameters Type Name Description ColocTransportOptions other Returns Type Description bool Equals(object?) Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Operators operator ==(ColocTransportOptions?, ColocTransportOptions?) Declaration public static bool operator ==(ColocTransportOptions? left, ColocTransportOptions? right) Parameters Type Name Description ColocTransportOptions left ColocTransportOptions right Returns Type Description bool operator !=(ColocTransportOptions?, ColocTransportOptions?) Declaration public static bool operator !=(ColocTransportOptions? left, ColocTransportOptions? right) Parameters Type Name Description ColocTransportOptions left ColocTransportOptions right Returns Type Description bool Implements System.IEquatable<T>"
  },
  "api/IceRpc.Transports.DuplexConnectionOptions.html": {
    "href": "api/IceRpc.Transports.DuplexConnectionOptions.html",
    "title": "Class DuplexConnectionOptions | IceRPC",
    "keywords": "Class DuplexConnectionOptions A property bag used to configure a IDuplexConnection. Inheritance object DuplexConnectionOptions Implements IEquatable<DuplexConnectionOptions> Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: IceRpc.Transports Assembly: IceRpc.dll Syntax public record DuplexConnectionOptions : IEquatable<DuplexConnectionOptions> Constructors DuplexConnectionOptions() Declaration public DuplexConnectionOptions() DuplexConnectionOptions(DuplexConnectionOptions) Declaration protected DuplexConnectionOptions(DuplexConnectionOptions original) Parameters Type Name Description DuplexConnectionOptions original Properties EqualityContract Declaration protected virtual Type EqualityContract { get; } Property Value Type Description Type MinSegmentSize Gets or sets the minimum size of the segment requested from the Pool. Declaration public int MinSegmentSize { get; set; } Property Value Type Description int The minimum size in bytes of the segment requested from the Pool. It cannot be less than 1 KB. Defaults to 4 KB. Pool Gets or sets the System.Buffers.MemoryPool<T> object used for buffer management. Declaration public MemoryPool<byte> Pool { get; set; } Property Value Type Description MemoryPool<byte> A pool of memory blocks used for buffer management. Defaults to System.Buffers.MemoryPool`1.Shared. Methods <Clone>$() Declaration public virtual DuplexConnectionOptions <Clone>$() Returns Type Description DuplexConnectionOptions Equals(DuplexConnectionOptions?) Declaration public virtual bool Equals(DuplexConnectionOptions? other) Parameters Type Name Description DuplexConnectionOptions other Returns Type Description bool Equals(object?) Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() PrintMembers(StringBuilder) Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description bool ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Operators operator ==(DuplexConnectionOptions?, DuplexConnectionOptions?) Declaration public static bool operator ==(DuplexConnectionOptions? left, DuplexConnectionOptions? right) Parameters Type Name Description DuplexConnectionOptions left DuplexConnectionOptions right Returns Type Description bool operator !=(DuplexConnectionOptions?, DuplexConnectionOptions?) Declaration public static bool operator !=(DuplexConnectionOptions? left, DuplexConnectionOptions? right) Parameters Type Name Description DuplexConnectionOptions left DuplexConnectionOptions right Returns Type Description bool Implements System.IEquatable<T>"
  },
  "api/IceRpc.Transports.html": {
    "href": "api/IceRpc.Transports.html",
    "title": "Namespace IceRpc.Transports | IceRPC",
    "keywords": "Namespace IceRpc.Transports Classes ColocTransport The Coloc transport class provides a client and server duplex transport that can be used for in-process communications. ColocTransportOptions A property bag used to configure a ColocTransport. DuplexConnectionOptions A property bag used to configure a IDuplexConnection. MultiplexedConnectionOptions A property bag used to configure a IMultiplexedConnection. ReadOnlySequencePipeWriter The ReadOnlySequencePipeWriter abstract class can be extended by pipe writers to provide a System.IO.Pipelines.PipeWriter.WriteAsync(System.ReadOnlyMemory<byte>, System.Threading.CancellationToken) method with a System.Buffers.ReadOnlySequence<T> source. It also provides a boolean to notify the pipe writer implementation that no more data will be written. This class is useful for implementing multiplexed stream pipe writers and to optimize the writing of a System.Buffers.ReadOnlySequence<T> for transports that support a gather write API. SlicClientTransport Implements IMultiplexedClientTransport using Slic over a duplex client transport. SlicServerTransport Implements IMultiplexedServerTransport using Slic over a duplex server transport. SlicTransportOptions A property bag used to configure a SlicClientTransport or SlicServerTransport. SslAuthenticationOptionsExtensions Provides extension methods for System.Net.Security.SslClientAuthenticationOptions and System.Net.Security.SslServerAuthenticationOptions. TcpClientTransport Implements IDuplexClientTransport for the tcp and ssl transports. TcpClientTransportOptions The options class for configuring TcpClientTransport. TcpServerTransport Implements IDuplexServerTransport for the tcp and ssl transports. TcpServerTransportOptions The options class for configuring TcpServerTransport. TcpTransportOptions The base options class for TCP transports. TransportConnectionInformation The transport connection information returned on connection establishment. Interfaces IDuplexClientTransport A class to create outgoing duplex connections. IDuplexConnection Represents a transport connection created by a duplex transport. IDuplexServerTransport A class to create a IListener<T> to accept incoming duplex connections. IListener The base interface for listeners. IListener<T> A listener listens for connection requests from clients. IMultiplexedClientTransport A class to create outgoing multiplexed connections. IMultiplexedConnection Represents a transport connection created by a multiplexed transport. IMultiplexedServerTransport A class to create a IListener<T> to accept incoming multiplexed connections. IMultiplexedStream A multiplexed stream enables byte data exchange over a multiplexed transport. Enums MultiplexedConnectionCloseError The error supplied to CloseAsync(MultiplexedConnectionCloseError, CancellationToken)."
  },
  "api/IceRpc.Transports.IDuplexClientTransport.html": {
    "href": "api/IceRpc.Transports.IDuplexClientTransport.html",
    "title": "Interface IDuplexClientTransport | IceRPC",
    "keywords": "Interface IDuplexClientTransport A class to create outgoing duplex connections. Namespace: IceRpc.Transports Assembly: IceRpc.dll Syntax public interface IDuplexClientTransport Properties Default Gets the default duplex client transport. Declaration public static IDuplexClientTransport Default { get; } Property Value Type Description IDuplexClientTransport The default duplex client transport instance is the TcpClientTransport. Name Gets the transport's name. Declaration string Name { get; } Property Value Type Description string The transport name. Methods CheckParams(ServerAddress) Checks if a server address has valid Params for this client transport. Only the params are included in this check. Declaration bool CheckParams(ServerAddress serverAddress) Parameters Type Name Description ServerAddress serverAddress The server address to check. Returns Type Description bool true when all params of serverAddress are valid for this transport; otherwise, false. CreateConnection(ServerAddress, DuplexConnectionOptions, SslClientAuthenticationOptions?) Creates a new transport connection to the specified server address. Declaration IDuplexConnection CreateConnection(ServerAddress serverAddress, DuplexConnectionOptions options, SslClientAuthenticationOptions? clientAuthenticationOptions) Parameters Type Name Description ServerAddress serverAddress The server address of the connection. DuplexConnectionOptions options The duplex connection options. SslClientAuthenticationOptions clientAuthenticationOptions The SSL client authentication options. Returns Type Description IDuplexConnection The new transport connection. This connection is not yet connected."
  },
  "api/IceRpc.Transports.IDuplexConnection.html": {
    "href": "api/IceRpc.Transports.IDuplexConnection.html",
    "title": "Interface IDuplexConnection | IceRPC",
    "keywords": "Interface IDuplexConnection Represents a transport connection created by a duplex transport. Inherited Members IDisposable.Dispose() Namespace: IceRpc.Transports Assembly: IceRpc.dll Syntax public interface IDuplexConnection : IDisposable Remarks This interface is used by the IceRPC core. The IceRPC core provides a number of guarantees on how it calls these methods: it calls the ConnectAsync(CancellationToken) method first and once. It does not call any other method until the connect task completes. it calls the ReadAsync(Memory<byte>, CancellationToken) and WriteAsync(IReadOnlyList<ReadOnlyMemory<byte>>, CancellationToken) methods, sometimes concurrently. It does not make concurrent reads or concurrent writes. it can call the ShutdownAsync(CancellationToken) method once but not while a write is in progress. it calls the System.IDisposable.Dispose() method after the tasks returned by other methods have completed. It can call this method multiple times but not concurrently. Methods ConnectAsync(CancellationToken) Connects this connection. Declaration Task<TransportConnectionInformation> ConnectAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task<TransportConnectionInformation> A task that completes successfully with transport connection information when the connection is established. This task can also complete with one of the following exceptions: System.Security.Authentication.AuthenticationExceptionif authentication failed. IceRpcExceptionif the transport reported an error. System.OperationCanceledExceptionif cancellation was requested through the cancellation token. Exceptions Type Condition System.InvalidOperationException Thrown if this connection is connected, connecting or if a previous connection attempt failed. System.ObjectDisposedException Thrown if the connection is disposed. ReadAsync(Memory<byte>, CancellationToken) Reads data from the connection. Declaration ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken) Parameters Type Name Description Memory<byte> buffer A buffer that receives the data read from the connection. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask<int> A value task that completes successfully with the number of bytes read into buffer. This number is always greater than 0. This value task can also complete with one of the following exceptions: IceRpcExceptionif the transport reported an error. System.OperationCanceledExceptionif cancellation was requested through the cancellation token. Exceptions Type Condition System.ArgumentException Thrown if buffer is empty. System.InvalidOperationException Thrown if the connection is not connected, already shut down or shutting down, or if a read operation is already in progress. System.ObjectDisposedException Thrown if the connection is disposed. ShutdownAsync(CancellationToken) Shuts down the connection. Declaration Task ShutdownAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task A task that completes successfully when the shutdown completes successfully. This task can also complete with one of the following exceptions: IceRpcExceptionif the transport reported an error. System.OperationCanceledExceptionif cancellation was requested through the cancellation token. Exceptions Type Condition System.InvalidOperationException Thrown if the connection is not connected, already shut down or shutting down, or a write operation is in progress. System.ObjectDisposedException Thrown if the connection is disposed. WriteAsync(IReadOnlyList<ReadOnlyMemory<byte>>, CancellationToken) Writes data over the connection. Declaration ValueTask WriteAsync(IReadOnlyList<ReadOnlyMemory<byte>> buffers, CancellationToken cancellationToken) Parameters Type Name Description IReadOnlyList<ReadOnlyMemory<byte>> buffers The buffers containing the data to write. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask A value task that completes successfully when the data is written successfully. This value task can also complete with one of the following exceptions: IceRpcExceptionif the transport reported an error. System.OperationCanceledExceptionif cancellation was requested through the cancellation token. Exceptions Type Condition System.ArgumentException Thrown if buffers is empty. System.InvalidOperationException Thrown if the connection is not connected, already shut down or shutting down, or a write operation is already in progress. System.ObjectDisposedException Thrown if the connection is disposed."
  },
  "api/IceRpc.Transports.IDuplexServerTransport.html": {
    "href": "api/IceRpc.Transports.IDuplexServerTransport.html",
    "title": "Interface IDuplexServerTransport | IceRPC",
    "keywords": "Interface IDuplexServerTransport A class to create a IListener<T> to accept incoming duplex connections. Namespace: IceRpc.Transports Assembly: IceRpc.dll Syntax public interface IDuplexServerTransport Properties Default Gets the default duplex server transport. Declaration public static IDuplexServerTransport Default { get; } Property Value Type Description IDuplexServerTransport The default duplex server transport is the TcpServerTransport. Name Gets the transport's name. Declaration string Name { get; } Property Value Type Description string The transport name. Methods Listen(ServerAddress, DuplexConnectionOptions, SslServerAuthenticationOptions?) Starts listening on a server address. Declaration IListener<IDuplexConnection> Listen(ServerAddress serverAddress, DuplexConnectionOptions options, SslServerAuthenticationOptions? serverAuthenticationOptions) Parameters Type Name Description ServerAddress serverAddress The server address of the listener. DuplexConnectionOptions options The duplex connection options. SslServerAuthenticationOptions serverAuthenticationOptions The SSL server authentication options. Returns Type Description IListener<IDuplexConnection> The new listener."
  },
  "api/IceRpc.Transports.IListener-1.html": {
    "href": "api/IceRpc.Transports.IListener-1.html",
    "title": "Interface IListener<T> | IceRPC",
    "keywords": "Interface IListener<T> A listener listens for connection requests from clients. Inherited Members IListener.ServerAddress IAsyncDisposable.DisposeAsync() Namespace: IceRpc.Transports Assembly: IceRpc.dll Syntax public interface IListener<T> : IListener, IAsyncDisposable Type Parameters Name Description T The connection type. Methods AcceptAsync(CancellationToken) Accepts a new connection. Declaration Task<(T Connection, EndPoint RemoteNetworkAddress)> AcceptAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task<(T Connection, EndPoint RemoteNetworkAddress)> The accepted connection and the network address of the client."
  },
  "api/IceRpc.Transports.IListener.html": {
    "href": "api/IceRpc.Transports.IListener.html",
    "title": "Interface IListener | IceRPC",
    "keywords": "Interface IListener The base interface for listeners. Inherited Members IAsyncDisposable.DisposeAsync() Namespace: IceRpc.Transports Assembly: IceRpc.dll Syntax public interface IListener : IAsyncDisposable Properties ServerAddress Gets the server address of this listener. That's the address a client would connect to. Declaration ServerAddress ServerAddress { get; } Property Value Type Description ServerAddress The server address."
  },
  "api/IceRpc.Transports.IMultiplexedClientTransport.html": {
    "href": "api/IceRpc.Transports.IMultiplexedClientTransport.html",
    "title": "Interface IMultiplexedClientTransport | IceRPC",
    "keywords": "Interface IMultiplexedClientTransport A class to create outgoing multiplexed connections. Namespace: IceRpc.Transports Assembly: IceRpc.dll Syntax public interface IMultiplexedClientTransport Properties Default Gets the default multiplexed client transport. Declaration public static IMultiplexedClientTransport Default { get; } Property Value Type Description IMultiplexedClientTransport The default multiplexed client transport is the SlicClientTransport. Name Gets the transport's name. Declaration string Name { get; } Property Value Type Description string Methods CheckParams(ServerAddress) Checks if a server address has valid Params for this client transport. Only the params are included in this check. Declaration bool CheckParams(ServerAddress serverAddress) Parameters Type Name Description ServerAddress serverAddress The server address to check. Returns Type Description bool true when all params of serverAddress are valid for this transport; otherwise, false. CreateConnection(ServerAddress, MultiplexedConnectionOptions, SslClientAuthenticationOptions?) Creates a new transport connection to the specified server address. Declaration IMultiplexedConnection CreateConnection(ServerAddress serverAddress, MultiplexedConnectionOptions options, SslClientAuthenticationOptions? clientAuthenticationOptions) Parameters Type Name Description ServerAddress serverAddress The server address of the connection. MultiplexedConnectionOptions options The multiplexed connection options. SslClientAuthenticationOptions clientAuthenticationOptions The SSL client authentication options. Returns Type Description IMultiplexedConnection The new transport connection. This connection is not yet connected."
  },
  "api/IceRpc.Transports.IMultiplexedConnection.html": {
    "href": "api/IceRpc.Transports.IMultiplexedConnection.html",
    "title": "Interface IMultiplexedConnection | IceRPC",
    "keywords": "Interface IMultiplexedConnection Represents a transport connection created by a multiplexed transport. Inherited Members IAsyncDisposable.DisposeAsync() Namespace: IceRpc.Transports Assembly: IceRpc.dll Syntax public interface IMultiplexedConnection : IAsyncDisposable Remarks This interface is used by the IceRpc core. It provides a number of guarantees on how the methods from this interface are called: the ConnectAsync(CancellationToken) method is always called first and once. No other methods are called until it completes. the AcceptStreamAsync(CancellationToken) method is never called concurrently. the CreateStreamAsync(bool, CancellationToken) method can be called concurrently. the CloseAsync(MultiplexedConnectionCloseError, CancellationToken) method is only called once. the System.IAsyncDisposable.DisposeAsync() and CreateStreamAsync(bool, CancellationToken) methods can be called concurrently. Methods AcceptStreamAsync(CancellationToken) Accepts a remote stream. Declaration ValueTask<IMultiplexedStream> AcceptStreamAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask<IMultiplexedStream> The remote stream. CloseAsync(MultiplexedConnectionCloseError, CancellationToken) Closes the connection. Declaration Task CloseAsync(MultiplexedConnectionCloseError closeError, CancellationToken cancellationToken) Parameters Type Name Description MultiplexedConnectionCloseError closeError The error to transmit to the peer. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task A task that completes once the connection is closed. ConnectAsync(CancellationToken) Connects this connection. Declaration Task<TransportConnectionInformation> ConnectAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description Task<TransportConnectionInformation> The TransportConnectionInformation. Remarks A transport implementation might raise other exceptions. A connection supporting SSL can for instance raise System.Security.Authentication.AuthenticationException if the authentication fails while the connection is being established. Exceptions Type Condition System.ObjectDisposedException Thrown if the connection has been disposed. System.OperationCanceledException Thrown if the cancellation token was canceled. IceRpcException Thrown if a transport error was encountered. CreateStreamAsync(bool, CancellationToken) Creates a local stream. The creation will block if the maximum number of unidirectional or bidirectional streams prevents creating the new stream. Declaration ValueTask<IMultiplexedStream> CreateStreamAsync(bool bidirectional, CancellationToken cancellationToken) Parameters Type Name Description bool bidirectional true to create a bidirectional stream, false otherwise. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask<IMultiplexedStream> The task that completes on the local stream is created."
  },
  "api/IceRpc.Transports.IMultiplexedServerTransport.html": {
    "href": "api/IceRpc.Transports.IMultiplexedServerTransport.html",
    "title": "Interface IMultiplexedServerTransport | IceRPC",
    "keywords": "Interface IMultiplexedServerTransport A class to create a IListener<T> to accept incoming multiplexed connections. Namespace: IceRpc.Transports Assembly: IceRpc.dll Syntax public interface IMultiplexedServerTransport Properties Default Gets the default multiplexed server transport. Declaration public static IMultiplexedServerTransport Default { get; } Property Value Type Description IMultiplexedServerTransport The default multiplexed server transport is the SlicServerTransport. Name Gets the transport's name. Declaration string Name { get; } Property Value Type Description string The transport name. Methods Listen(ServerAddress, MultiplexedConnectionOptions, SslServerAuthenticationOptions?) Starts listening on a server address. Declaration IListener<IMultiplexedConnection> Listen(ServerAddress serverAddress, MultiplexedConnectionOptions options, SslServerAuthenticationOptions? serverAuthenticationOptions) Parameters Type Name Description ServerAddress serverAddress The server address of the listener. MultiplexedConnectionOptions options The multiplexed connection options. SslServerAuthenticationOptions serverAuthenticationOptions The SSL server authentication options. Returns Type Description IListener<IMultiplexedConnection> The new listener."
  },
  "api/IceRpc.Transports.IMultiplexedStream.html": {
    "href": "api/IceRpc.Transports.IMultiplexedStream.html",
    "title": "Interface IMultiplexedStream | IceRPC",
    "keywords": "Interface IMultiplexedStream A multiplexed stream enables byte data exchange over a multiplexed transport. Inherited Members IDuplexPipe.Input IDuplexPipe.Output Namespace: IceRpc.Transports Assembly: IceRpc.dll Syntax public interface IMultiplexedStream : IDuplexPipe Properties Id Gets the stream ID. Declaration ulong Id { get; } Property Value Type Description ulong The stream ID. Exceptions Type Condition System.InvalidOperationException Thrown if the stream is not started. Local streams are not started until data is written. A remote stream is always started. IsBidirectional Gets a value indicating whether the stream is bidirectional. Declaration bool IsBidirectional { get; } Property Value Type Description bool true if the stream is a bidirectional stream; false otherwise. IsRemote Gets a value indicating whether the stream is remote. A remote stream is a stream initiated by the peer and it's returned by AcceptStreamAsync(CancellationToken). Declaration bool IsRemote { get; } Property Value Type Description bool true if the stream is a remote stream; false otherwise. IsStarted Gets a value indicating whether the stream is started. Declaration bool IsStarted { get; } Property Value Type Description bool true if the stream is started; false otherwise. Remarks Remote streams are always started after construction. A local stream is started after the sending of the first STREAM frame. ReadsClosed Gets a task that completes when all read network activity ceases for this stream. This occurs when: System.IO.Pipelines.PipeReader.Complete(System.Exception) is called on this stream's System.IO.Pipelines.IDuplexPipe.Input. the implementation detects that the peer wrote an \"end stream\" to mark a successful write completion. the peer aborts writes by calling System.IO.Pipelines.PipeWriter.Complete(System.Exception) with a non-null exception on the stream's System.IO.Pipelines.IDuplexPipe.Output. the implementation detects a network failure that prevents further reads on the underlying network stream. The task is never faulted or canceled. Declaration Task ReadsClosed { get; } Property Value Type Description Task The reads closed task. WritesClosed Gets a task that completes when all write network activity ceases for this stream. This occurs when: System.IO.Pipelines.PipeWriter.Complete(System.Exception) is called on this stream's System.IO.Pipelines.IDuplexPipe.Output. the peer calls System.IO.Pipelines.PipeReader.Complete(System.Exception) on the stream's System.IO.Pipelines.IDuplexPipe.Input. the implementation detects a network failure that prevents further writes on the underlying network stream. The task is never faulted or canceled. Declaration Task WritesClosed { get; } Property Value Type Description Task The writes closed task."
  },
  "api/IceRpc.Transports.MultiplexedConnectionCloseError.html": {
    "href": "api/IceRpc.Transports.MultiplexedConnectionCloseError.html",
    "title": "Enum MultiplexedConnectionCloseError | IceRPC",
    "keywords": "Enum MultiplexedConnectionCloseError The error supplied to CloseAsync(MultiplexedConnectionCloseError, CancellationToken). Namespace: IceRpc.Transports Assembly: IceRpc.dll Syntax public enum MultiplexedConnectionCloseError : byte Fields Name Description Aborted The connection was aborted for some unspecified reason. NoError The connection was closed without error. Refused The server refused the connection, for example because it's shutting down. ServerBusy The server rejected the connection establishment attempt because it already has too many connections."
  },
  "api/IceRpc.Transports.MultiplexedConnectionOptions.html": {
    "href": "api/IceRpc.Transports.MultiplexedConnectionOptions.html",
    "title": "Class MultiplexedConnectionOptions | IceRPC",
    "keywords": "Class MultiplexedConnectionOptions A property bag used to configure a IMultiplexedConnection. Inheritance object MultiplexedConnectionOptions Implements IEquatable<MultiplexedConnectionOptions> Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: IceRpc.Transports Assembly: IceRpc.dll Syntax public record MultiplexedConnectionOptions : IEquatable<MultiplexedConnectionOptions> Constructors MultiplexedConnectionOptions() Declaration public MultiplexedConnectionOptions() MultiplexedConnectionOptions(MultiplexedConnectionOptions) Declaration protected MultiplexedConnectionOptions(MultiplexedConnectionOptions original) Parameters Type Name Description MultiplexedConnectionOptions original Properties EqualityContract Declaration protected virtual Type EqualityContract { get; } Property Value Type Description Type MaxBidirectionalStreams Gets or sets the maximum allowed number of simultaneous remote bidirectional streams that can be opened. Declaration public int MaxBidirectionalStreams { get; set; } Property Value Type Description int The maximum number of remote bidirectional streams. Defaults to 100. MaxUnidirectionalStreams Gets or sets the maximum allowed number of simultaneous remote unidirectional streams that can be opened. Declaration public int MaxUnidirectionalStreams { get; set; } Property Value Type Description int The maximum number of remote unidirectional streams. Defaults to 100. MinSegmentSize Gets or sets the minimum size of the segment requested from the Pool. Declaration public int MinSegmentSize { get; set; } Property Value Type Description int The minimum size in bytes of the segment requested from the Pool. Defaults to 4 KB. Pool Gets or sets the System.Buffers.MemoryPool<T> object used for buffer management. Declaration public MemoryPool<byte> Pool { get; set; } Property Value Type Description MemoryPool<byte> A pool of memory blocks used for buffer management. Defaults to System.Buffers.MemoryPool`1.Shared. Methods <Clone>$() Declaration public virtual MultiplexedConnectionOptions <Clone>$() Returns Type Description MultiplexedConnectionOptions Equals(MultiplexedConnectionOptions?) Declaration public virtual bool Equals(MultiplexedConnectionOptions? other) Parameters Type Name Description MultiplexedConnectionOptions other Returns Type Description bool Equals(object?) Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() PrintMembers(StringBuilder) Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description bool ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Operators operator ==(MultiplexedConnectionOptions?, MultiplexedConnectionOptions?) Declaration public static bool operator ==(MultiplexedConnectionOptions? left, MultiplexedConnectionOptions? right) Parameters Type Name Description MultiplexedConnectionOptions left MultiplexedConnectionOptions right Returns Type Description bool operator !=(MultiplexedConnectionOptions?, MultiplexedConnectionOptions?) Declaration public static bool operator !=(MultiplexedConnectionOptions? left, MultiplexedConnectionOptions? right) Parameters Type Name Description MultiplexedConnectionOptions left MultiplexedConnectionOptions right Returns Type Description bool Implements System.IEquatable<T>"
  },
  "api/IceRpc.Transports.ReadOnlySequencePipeWriter.html": {
    "href": "api/IceRpc.Transports.ReadOnlySequencePipeWriter.html",
    "title": "Class ReadOnlySequencePipeWriter | IceRPC",
    "keywords": "Class ReadOnlySequencePipeWriter The ReadOnlySequencePipeWriter abstract class can be extended by pipe writers to provide a System.IO.Pipelines.PipeWriter.WriteAsync(System.ReadOnlyMemory<byte>, System.Threading.CancellationToken) method with a System.Buffers.ReadOnlySequence<T> source. It also provides a boolean to notify the pipe writer implementation that no more data will be written. This class is useful for implementing multiplexed stream pipe writers and to optimize the writing of a System.Buffers.ReadOnlySequence<T> for transports that support a gather write API. Inheritance object PipeWriter ReadOnlySequencePipeWriter Implements IBufferWriter<byte> Inherited Members PipeWriter.Complete(Exception) PipeWriter.CompleteAsync(Exception) PipeWriter.CancelPendingFlush() PipeWriter.OnReaderCompleted(Action<Exception, object>, object) PipeWriter.FlushAsync(CancellationToken) PipeWriter.Advance(int) PipeWriter.GetMemory(int) PipeWriter.GetSpan(int) PipeWriter.AsStream(bool) PipeWriter.Create(Stream, StreamPipeWriterOptions) PipeWriter.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) PipeWriter.CopyFromAsync(Stream, CancellationToken) PipeWriter.CanGetUnflushedBytes PipeWriter.UnflushedBytes object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Transports Assembly: IceRpc.dll Syntax public abstract class ReadOnlySequencePipeWriter : PipeWriter, IBufferWriter<byte> Constructors ReadOnlySequencePipeWriter() Declaration protected ReadOnlySequencePipeWriter() Methods WriteAsync(ReadOnlySequence<byte>, bool, CancellationToken) Writes a readonly sequence. Declaration public abstract ValueTask<FlushResult> WriteAsync(ReadOnlySequence<byte> source, bool endStream, CancellationToken cancellationToken) Parameters Type Name Description ReadOnlySequence<byte> source The source sequence. bool endStream If true, no more data will be written to this pipe. CancellationToken cancellationToken A cancellation token that receives the cancellation requests. Returns Type Description ValueTask<FlushResult> The flush result. Implements System.Buffers.IBufferWriter<T>"
  },
  "api/IceRpc.Transports.SlicClientTransport.html": {
    "href": "api/IceRpc.Transports.SlicClientTransport.html",
    "title": "Class SlicClientTransport | IceRPC",
    "keywords": "Class SlicClientTransport Implements IMultiplexedClientTransport using Slic over a duplex client transport. Inheritance object SlicClientTransport Implements IMultiplexedClientTransport Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Transports Assembly: IceRpc.dll Syntax public class SlicClientTransport : IMultiplexedClientTransport Constructors SlicClientTransport(IDuplexClientTransport) Constructs a Slic client transport. Declaration public SlicClientTransport(IDuplexClientTransport duplexClientTransport) Parameters Type Name Description IDuplexClientTransport duplexClientTransport The duplex client transport. SlicClientTransport(SlicTransportOptions, IDuplexClientTransport) Constructs a Slic client transport. Declaration public SlicClientTransport(SlicTransportOptions options, IDuplexClientTransport duplexClientTransport) Parameters Type Name Description SlicTransportOptions options The options to configure the Slic transport. IDuplexClientTransport duplexClientTransport The duplex client transport. Properties Name Gets the transport's name. Declaration public string Name { get; } Property Value Type Description string Methods CheckParams(ServerAddress) Checks if a server address has valid Params for this client transport. Only the params are included in this check. Declaration public bool CheckParams(ServerAddress serverAddress) Parameters Type Name Description ServerAddress serverAddress The server address to check. Returns Type Description bool true when all params of serverAddress are valid for this transport; otherwise, false. CreateConnection(ServerAddress, MultiplexedConnectionOptions, SslClientAuthenticationOptions?) Creates a new transport connection to the specified server address. Declaration public IMultiplexedConnection CreateConnection(ServerAddress serverAddress, MultiplexedConnectionOptions options, SslClientAuthenticationOptions? clientAuthenticationOptions) Parameters Type Name Description ServerAddress serverAddress The server address of the connection. MultiplexedConnectionOptions options The multiplexed connection options. SslClientAuthenticationOptions clientAuthenticationOptions The SSL client authentication options. Returns Type Description IMultiplexedConnection The new transport connection. This connection is not yet connected. Implements IMultiplexedClientTransport"
  },
  "api/IceRpc.Transports.SlicServerTransport.html": {
    "href": "api/IceRpc.Transports.SlicServerTransport.html",
    "title": "Class SlicServerTransport | IceRPC",
    "keywords": "Class SlicServerTransport Implements IMultiplexedServerTransport using Slic over a duplex server transport. Inheritance object SlicServerTransport Implements IMultiplexedServerTransport Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Transports Assembly: IceRpc.dll Syntax public class SlicServerTransport : IMultiplexedServerTransport Constructors SlicServerTransport(IDuplexServerTransport) Constructs a Slic server transport. Declaration public SlicServerTransport(IDuplexServerTransport duplexServerTransport) Parameters Type Name Description IDuplexServerTransport duplexServerTransport The duplex server transport. SlicServerTransport(SlicTransportOptions, IDuplexServerTransport) Constructs a Slic server transport. Declaration public SlicServerTransport(SlicTransportOptions options, IDuplexServerTransport duplexServerTransport) Parameters Type Name Description SlicTransportOptions options The options to configure the transport. IDuplexServerTransport duplexServerTransport The duplex server transport. Properties Name Gets the transport's name. Declaration public string Name { get; } Property Value Type Description string The transport name. Methods Listen(ServerAddress, MultiplexedConnectionOptions, SslServerAuthenticationOptions?) Starts listening on a server address. Declaration public IListener<IMultiplexedConnection> Listen(ServerAddress serverAddress, MultiplexedConnectionOptions options, SslServerAuthenticationOptions? serverAuthenticationOptions) Parameters Type Name Description ServerAddress serverAddress The server address of the listener. MultiplexedConnectionOptions options The multiplexed connection options. SslServerAuthenticationOptions serverAuthenticationOptions The SSL server authentication options. Returns Type Description IListener<IMultiplexedConnection> The new listener. Implements IMultiplexedServerTransport"
  },
  "api/IceRpc.Transports.SlicTransportOptions.html": {
    "href": "api/IceRpc.Transports.SlicTransportOptions.html",
    "title": "Class SlicTransportOptions | IceRPC",
    "keywords": "Class SlicTransportOptions A property bag used to configure a SlicClientTransport or SlicServerTransport. Inheritance object SlicTransportOptions Implements IEquatable<SlicTransportOptions> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: IceRpc.Transports Assembly: IceRpc.dll Syntax public sealed record SlicTransportOptions : IEquatable<SlicTransportOptions> Constructors SlicTransportOptions() Declaration public SlicTransportOptions() Properties IdleTimeout Gets or sets the idle timeout. This timeout is used to monitor the transport connection health. If no data is received within the idle timeout period, the transport connection is aborted. Declaration public TimeSpan IdleTimeout { get; set; } Property Value Type Description TimeSpan The idle timeout. Defaults to 30 s. PacketMaxSize Gets or sets the maximum packet size in bytes. Declaration public int PacketMaxSize { get; set; } Property Value Type Description int The maximum packet size in bytes. It can't be less than 1 KB. Defaults to 32 KB. PauseWriterThreshold Gets or sets the number of bytes when writes on a Slic stream starts blocking. Declaration public int PauseWriterThreshold { get; set; } Property Value Type Description int The pause writer threshold in bytes. It can't be less than 1 KB. Defaults to 64 KB. ResumeWriterThreshold Gets or sets the number of bytes when writes on a Slic stream stops blocking. Declaration public int ResumeWriterThreshold { get; set; } Property Value Type Description int The resume writer threshold in bytes. It can't be less than 1 KB and greater than PauseWriterThreshold. Defaults to 32 KB. Methods <Clone>$() Declaration public SlicTransportOptions <Clone>$() Returns Type Description SlicTransportOptions Equals(SlicTransportOptions?) Declaration public bool Equals(SlicTransportOptions? other) Parameters Type Name Description SlicTransportOptions other Returns Type Description bool Equals(object?) Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Operators operator ==(SlicTransportOptions?, SlicTransportOptions?) Declaration public static bool operator ==(SlicTransportOptions? left, SlicTransportOptions? right) Parameters Type Name Description SlicTransportOptions left SlicTransportOptions right Returns Type Description bool operator !=(SlicTransportOptions?, SlicTransportOptions?) Declaration public static bool operator !=(SlicTransportOptions? left, SlicTransportOptions? right) Parameters Type Name Description SlicTransportOptions left SlicTransportOptions right Returns Type Description bool Implements System.IEquatable<T>"
  },
  "api/IceRpc.Transports.SslAuthenticationOptionsExtensions.html": {
    "href": "api/IceRpc.Transports.SslAuthenticationOptionsExtensions.html",
    "title": "Class SslAuthenticationOptionsExtensions | IceRPC",
    "keywords": "Class SslAuthenticationOptionsExtensions Provides extension methods for System.Net.Security.SslClientAuthenticationOptions and System.Net.Security.SslServerAuthenticationOptions. Inheritance object SslAuthenticationOptionsExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Transports Assembly: IceRpc.dll Syntax public static class SslAuthenticationOptionsExtensions Methods Clone(SslClientAuthenticationOptions) Makes a shallow copy of an SSL client authentication options. Declaration public static SslClientAuthenticationOptions Clone(this SslClientAuthenticationOptions value) Parameters Type Name Description SslClientAuthenticationOptions value The options to copy. Returns Type Description SslClientAuthenticationOptions The shallow copy. Clone(SslServerAuthenticationOptions) Makes a shallow copy of an SSL server authentication options. Declaration public static SslServerAuthenticationOptions Clone(this SslServerAuthenticationOptions value) Parameters Type Name Description SslServerAuthenticationOptions value The options to copy. Returns Type Description SslServerAuthenticationOptions The shallow copy."
  },
  "api/IceRpc.Transports.TcpClientTransport.html": {
    "href": "api/IceRpc.Transports.TcpClientTransport.html",
    "title": "Class TcpClientTransport | IceRPC",
    "keywords": "Class TcpClientTransport Implements IDuplexClientTransport for the tcp and ssl transports. Inheritance object TcpClientTransport Implements IDuplexClientTransport Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Transports Assembly: IceRpc.dll Syntax public class TcpClientTransport : IDuplexClientTransport Constructors TcpClientTransport() Constructs a TcpClientTransport. Declaration public TcpClientTransport() TcpClientTransport(TcpClientTransportOptions) Constructs a TcpClientTransport. Declaration public TcpClientTransport(TcpClientTransportOptions options) Parameters Type Name Description TcpClientTransportOptions options The transport options. Properties Name Gets the transport's name. Declaration public string Name { get; } Property Value Type Description string The transport name. Methods CheckParams(ServerAddress) Checks if a server address has valid Params for this client transport. Only the params are included in this check. Declaration public bool CheckParams(ServerAddress serverAddress) Parameters Type Name Description ServerAddress serverAddress The server address to check. Returns Type Description bool true when all params of serverAddress are valid for this transport; otherwise, false. CreateConnection(ServerAddress, DuplexConnectionOptions, SslClientAuthenticationOptions?) Creates a new transport connection to the specified server address. Declaration public IDuplexConnection CreateConnection(ServerAddress serverAddress, DuplexConnectionOptions options, SslClientAuthenticationOptions? clientAuthenticationOptions) Parameters Type Name Description ServerAddress serverAddress The server address of the connection. DuplexConnectionOptions options The duplex connection options. SslClientAuthenticationOptions clientAuthenticationOptions The SSL client authentication options. Returns Type Description IDuplexConnection The new transport connection. This connection is not yet connected. Implements IDuplexClientTransport"
  },
  "api/IceRpc.Transports.TcpClientTransportOptions.html": {
    "href": "api/IceRpc.Transports.TcpClientTransportOptions.html",
    "title": "Class TcpClientTransportOptions | IceRPC",
    "keywords": "Class TcpClientTransportOptions The options class for configuring TcpClientTransport. Inheritance object TcpTransportOptions TcpClientTransportOptions Implements IEquatable<TcpTransportOptions> IEquatable<TcpClientTransportOptions> Inherited Members TcpTransportOptions.ReceiveBufferSize TcpTransportOptions.SendBufferSize object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: IceRpc.Transports Assembly: IceRpc.dll Syntax public sealed record TcpClientTransportOptions : TcpTransportOptions, IEquatable<TcpTransportOptions>, IEquatable<TcpClientTransportOptions> Constructors TcpClientTransportOptions() Declaration public TcpClientTransportOptions() Properties EqualityContract Declaration protected override Type EqualityContract { get; } Property Value Type Description Type Overrides TcpTransportOptions.EqualityContract LocalNetworkAddress Gets or sets the address and port represented by a .NET IPEndPoint to use for a client socket. If specified the client socket will bind to this address and port before connection establishment. Declaration public IPEndPoint? LocalNetworkAddress { get; set; } Property Value Type Description IPEndPoint The address and port to bind the socket to. Defaults to null. Methods <Clone>$() Declaration public override TcpClientTransportOptions <Clone>$() Returns Type Description TcpClientTransportOptions Overrides TcpTransportOptions.<Clone>$() Equals(TcpClientTransportOptions?) Declaration public bool Equals(TcpClientTransportOptions? other) Parameters Type Name Description TcpClientTransportOptions other Returns Type Description bool Equals(TcpTransportOptions?) Declaration public override sealed bool Equals(TcpTransportOptions? other) Parameters Type Name Description TcpTransportOptions other Returns Type Description bool Overrides TcpTransportOptions.Equals(TcpTransportOptions?) Equals(object?) Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides TcpTransportOptions.Equals(object?) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides TcpTransportOptions.GetHashCode() PrintMembers(StringBuilder) Declaration protected override bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description bool Overrides TcpTransportOptions.PrintMembers(StringBuilder) ToString() Declaration public override string ToString() Returns Type Description string Overrides TcpTransportOptions.ToString() Operators operator ==(TcpClientTransportOptions?, TcpClientTransportOptions?) Declaration public static bool operator ==(TcpClientTransportOptions? left, TcpClientTransportOptions? right) Parameters Type Name Description TcpClientTransportOptions left TcpClientTransportOptions right Returns Type Description bool operator !=(TcpClientTransportOptions?, TcpClientTransportOptions?) Declaration public static bool operator !=(TcpClientTransportOptions? left, TcpClientTransportOptions? right) Parameters Type Name Description TcpClientTransportOptions left TcpClientTransportOptions right Returns Type Description bool Implements System.IEquatable<T> System.IEquatable<T>"
  },
  "api/IceRpc.Transports.TcpServerTransport.html": {
    "href": "api/IceRpc.Transports.TcpServerTransport.html",
    "title": "Class TcpServerTransport | IceRPC",
    "keywords": "Class TcpServerTransport Implements IDuplexServerTransport for the tcp and ssl transports. Inheritance object TcpServerTransport Implements IDuplexServerTransport Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: IceRpc.Transports Assembly: IceRpc.dll Syntax public class TcpServerTransport : IDuplexServerTransport Constructors TcpServerTransport() Constructs a TcpServerTransport. Declaration public TcpServerTransport() TcpServerTransport(TcpServerTransportOptions) Constructs a TcpServerTransport. Declaration public TcpServerTransport(TcpServerTransportOptions options) Parameters Type Name Description TcpServerTransportOptions options The transport options. Properties Name Gets the transport's name. Declaration public string Name { get; } Property Value Type Description string The transport name. Methods Listen(ServerAddress, DuplexConnectionOptions, SslServerAuthenticationOptions?) Starts listening on a server address. Declaration public IListener<IDuplexConnection> Listen(ServerAddress serverAddress, DuplexConnectionOptions options, SslServerAuthenticationOptions? serverAuthenticationOptions) Parameters Type Name Description ServerAddress serverAddress The server address of the listener. DuplexConnectionOptions options The duplex connection options. SslServerAuthenticationOptions serverAuthenticationOptions The SSL server authentication options. Returns Type Description IListener<IDuplexConnection> The new listener. Implements IDuplexServerTransport"
  },
  "api/IceRpc.Transports.TcpServerTransportOptions.html": {
    "href": "api/IceRpc.Transports.TcpServerTransportOptions.html",
    "title": "Class TcpServerTransportOptions | IceRPC",
    "keywords": "Class TcpServerTransportOptions The options class for configuring TcpServerTransport. Inheritance object TcpTransportOptions TcpServerTransportOptions Implements IEquatable<TcpTransportOptions> IEquatable<TcpServerTransportOptions> Inherited Members TcpTransportOptions.ReceiveBufferSize TcpTransportOptions.SendBufferSize object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: IceRpc.Transports Assembly: IceRpc.dll Syntax public sealed record TcpServerTransportOptions : TcpTransportOptions, IEquatable<TcpTransportOptions>, IEquatable<TcpServerTransportOptions> Constructors TcpServerTransportOptions() Declaration public TcpServerTransportOptions() Properties EqualityContract Declaration protected override Type EqualityContract { get; } Property Value Type Description Type Overrides TcpTransportOptions.EqualityContract ListenBacklog Gets or sets the length of the server socket queue for accepting new connections. If a new connection request arrives and the queue is full, the client connection establishment will fail with a IceRpcException and the ConnectionRefused error code. Declaration public int ListenBacklog { get; set; } Property Value Type Description int The server socket backlog size. Defaults to 511. Methods <Clone>$() Declaration public override TcpServerTransportOptions <Clone>$() Returns Type Description TcpServerTransportOptions Overrides TcpTransportOptions.<Clone>$() Equals(TcpServerTransportOptions?) Declaration public bool Equals(TcpServerTransportOptions? other) Parameters Type Name Description TcpServerTransportOptions other Returns Type Description bool Equals(TcpTransportOptions?) Declaration public override sealed bool Equals(TcpTransportOptions? other) Parameters Type Name Description TcpTransportOptions other Returns Type Description bool Overrides TcpTransportOptions.Equals(TcpTransportOptions?) Equals(object?) Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides TcpTransportOptions.Equals(object?) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides TcpTransportOptions.GetHashCode() PrintMembers(StringBuilder) Declaration protected override bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description bool Overrides TcpTransportOptions.PrintMembers(StringBuilder) ToString() Declaration public override string ToString() Returns Type Description string Overrides TcpTransportOptions.ToString() Operators operator ==(TcpServerTransportOptions?, TcpServerTransportOptions?) Declaration public static bool operator ==(TcpServerTransportOptions? left, TcpServerTransportOptions? right) Parameters Type Name Description TcpServerTransportOptions left TcpServerTransportOptions right Returns Type Description bool operator !=(TcpServerTransportOptions?, TcpServerTransportOptions?) Declaration public static bool operator !=(TcpServerTransportOptions? left, TcpServerTransportOptions? right) Parameters Type Name Description TcpServerTransportOptions left TcpServerTransportOptions right Returns Type Description bool Implements System.IEquatable<T> System.IEquatable<T>"
  },
  "api/IceRpc.Transports.TcpTransportOptions.html": {
    "href": "api/IceRpc.Transports.TcpTransportOptions.html",
    "title": "Class TcpTransportOptions | IceRPC",
    "keywords": "Class TcpTransportOptions The base options class for TCP transports. Inheritance object TcpTransportOptions TcpClientTransportOptions TcpServerTransportOptions Implements IEquatable<TcpTransportOptions> Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: IceRpc.Transports Assembly: IceRpc.dll Syntax public record TcpTransportOptions : IEquatable<TcpTransportOptions> Constructors TcpTransportOptions() Declaration public TcpTransportOptions() TcpTransportOptions(TcpTransportOptions) Declaration protected TcpTransportOptions(TcpTransportOptions original) Parameters Type Name Description TcpTransportOptions original Properties EqualityContract Declaration protected virtual Type EqualityContract { get; } Property Value Type Description Type ReceiveBufferSize Gets or sets the socket receive buffer size in bytes. Declaration public int? ReceiveBufferSize { get; set; } Property Value Type Description int? The receive buffer size in bytes. It can't be less than 1 KB. null means use the operating system default. Defaults to null. SendBufferSize Gets or sets the socket send buffer size in bytes. Declaration public int? SendBufferSize { get; set; } Property Value Type Description int? The send buffer size in bytes. It can't be less than 1 KB. null means use the OS default. Defaults to null. Methods <Clone>$() Declaration public virtual TcpTransportOptions <Clone>$() Returns Type Description TcpTransportOptions Equals(TcpTransportOptions?) Declaration public virtual bool Equals(TcpTransportOptions? other) Parameters Type Name Description TcpTransportOptions other Returns Type Description bool Equals(object?) Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() PrintMembers(StringBuilder) Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description bool ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Operators operator ==(TcpTransportOptions?, TcpTransportOptions?) Declaration public static bool operator ==(TcpTransportOptions? left, TcpTransportOptions? right) Parameters Type Name Description TcpTransportOptions left TcpTransportOptions right Returns Type Description bool operator !=(TcpTransportOptions?, TcpTransportOptions?) Declaration public static bool operator !=(TcpTransportOptions? left, TcpTransportOptions? right) Parameters Type Name Description TcpTransportOptions left TcpTransportOptions right Returns Type Description bool Implements System.IEquatable<T>"
  },
  "api/IceRpc.Transports.TransportConnectionInformation.html": {
    "href": "api/IceRpc.Transports.TransportConnectionInformation.html",
    "title": "Class TransportConnectionInformation | IceRPC",
    "keywords": "Class TransportConnectionInformation The transport connection information returned on connection establishment. Inheritance object TransportConnectionInformation Implements IEquatable<TransportConnectionInformation> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: IceRpc.Transports Assembly: IceRpc.dll Syntax public sealed record TransportConnectionInformation : IEquatable<TransportConnectionInformation> Constructors TransportConnectionInformation(EndPoint, EndPoint, X509Certificate?) Constructs a new instance of TransportConnectionInformation. Declaration public TransportConnectionInformation(EndPoint localNetworkAddress, EndPoint remoteNetworkAddress, X509Certificate? remoteCertificate) Parameters Type Name Description EndPoint localNetworkAddress The local network address. EndPoint remoteNetworkAddress The remote network address. X509Certificate remoteCertificate The remote certificate. Properties LocalNetworkAddress Gets the network address of the local end of the connection. Declaration public EndPoint LocalNetworkAddress { get; } Property Value Type Description EndPoint The local network address. RemoteCertificate Gets the certificate of the peer, if provided. Declaration public X509Certificate? RemoteCertificate { get; } Property Value Type Description X509Certificate The certificate of the peer or null if the peer didn't provide one. RemoteNetworkAddress Gets the network address of the remote end of the connection. Declaration public EndPoint RemoteNetworkAddress { get; } Property Value Type Description EndPoint The remote network address. Methods <Clone>$() Declaration public TransportConnectionInformation <Clone>$() Returns Type Description TransportConnectionInformation Equals(TransportConnectionInformation?) Declaration public bool Equals(TransportConnectionInformation? other) Parameters Type Name Description TransportConnectionInformation other Returns Type Description bool Equals(object?) Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Operators operator ==(TransportConnectionInformation?, TransportConnectionInformation?) Declaration public static bool operator ==(TransportConnectionInformation? left, TransportConnectionInformation? right) Parameters Type Name Description TransportConnectionInformation left TransportConnectionInformation right Returns Type Description bool operator !=(TransportConnectionInformation?, TransportConnectionInformation?) Declaration public static bool operator !=(TransportConnectionInformation? left, TransportConnectionInformation? right) Parameters Type Name Description TransportConnectionInformation left TransportConnectionInformation right Returns Type Description bool Implements System.IEquatable<T>"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| IceRPC",
    "keywords": "#TODO"
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | IceRPC",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes IceRpcServiceCollectionExtensions Extension methods for setting up IceRPC services in an Microsoft.Extensions.DependencyInjection.IServiceCollection. IceRpcSliceServiceCollectionExtensions Extension methods for setting up IceRpc.Slice services in an Microsoft.Extensions.DependencyInjection.IServiceCollection."
  },
  "api/Microsoft.Extensions.DependencyInjection.IceRpcServiceCollectionExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.IceRpcServiceCollectionExtensions.html",
    "title": "Class IceRpcServiceCollectionExtensions | IceRPC",
    "keywords": "Class IceRpcServiceCollectionExtensions Extension methods for setting up IceRPC services in an Microsoft.Extensions.DependencyInjection.IServiceCollection. Inheritance object IceRpcServiceCollectionExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Microsoft.Extensions.DependencyInjection Assembly: IceRpc.Extensions.DependencyInjection.dll Syntax public static class IceRpcServiceCollectionExtensions Methods AddIceRpcClientConnection(IServiceCollection) Adds a ClientConnection and IInvoker singleton to this service collection. Declaration public static IServiceCollection AddIceRpcClientConnection(this IServiceCollection services) Parameters Type Name Description IServiceCollection services The service collection to add services to. Returns Type Description IServiceCollection The service collection. AddIceRpcConnectionCache(IServiceCollection) Adds a ConnectionCache and IInvoker singleton to this service collection. Declaration public static IServiceCollection AddIceRpcConnectionCache(this IServiceCollection services) Parameters Type Name Description IServiceCollection services The service collection to add services to. Returns Type Description IServiceCollection The service collection. AddIceRpcDispatcher(IServiceCollection, Action<IDispatcherBuilder>) Adds an IDispatcher singleton to this service collection using a builder. Declaration public static IServiceCollection AddIceRpcDispatcher(this IServiceCollection services, Action<IDispatcherBuilder> configure) Parameters Type Name Description IServiceCollection services The service collection to add services to. Action<IDispatcherBuilder> configure The action to configure the dispatcher builder. Returns Type Description IServiceCollection The service collection. AddIceRpcInvoker(IServiceCollection, Action<IInvokerBuilder>) Adds an IInvoker singleton to this service collection using a builder. Declaration public static IServiceCollection AddIceRpcInvoker(this IServiceCollection services, Action<IInvokerBuilder> configure) Parameters Type Name Description IServiceCollection services The service collection to add services to. Action<IInvokerBuilder> configure The action to configure the invoker builder. Returns Type Description IServiceCollection The service collection. AddIceRpcServer(IServiceCollection, IDispatcher) Adds a Server with the specified dispatcher to this service collection. This method uses the default name (\"\") for the ServerOptions instance. Declaration public static IServiceCollection AddIceRpcServer(this IServiceCollection services, IDispatcher dispatcher) Parameters Type Name Description IServiceCollection services The service collection to add services to. IDispatcher dispatcher The server dispatcher. Returns Type Description IServiceCollection The service collection. AddIceRpcServer(IServiceCollection, Action<IDispatcherBuilder>) Adds a Server to this service collection. This method uses the default name (\"\") for the ServerOptions instance. Declaration public static IServiceCollection AddIceRpcServer(this IServiceCollection services, Action<IDispatcherBuilder> configure) Parameters Type Name Description IServiceCollection services The service collection to add services to. Action<IDispatcherBuilder> configure The action to configure the dispatcher using a IceRpc.Builder.Internal.DispatcherBuilder. Returns Type Description IServiceCollection The service collection. AddIceRpcServer(IServiceCollection, string, IDispatcher) Adds a Server with the specified dispatcher to this service collection. Declaration public static IServiceCollection AddIceRpcServer(this IServiceCollection services, string optionsName, IDispatcher dispatcher) Parameters Type Name Description IServiceCollection services The service collection to add services to. string optionsName The name of the ServerOptions instance. IDispatcher dispatcher The server dispatcher. Returns Type Description IServiceCollection The service collection. AddIceRpcServer(IServiceCollection, string, Action<IDispatcherBuilder>) Adds a Server with the specified name to this service collection. Declaration public static IServiceCollection AddIceRpcServer(this IServiceCollection services, string optionsName, Action<IDispatcherBuilder> configure) Parameters Type Name Description IServiceCollection services The service collection to add services to. string optionsName The server name. Action<IDispatcherBuilder> configure The action to configure the dispatcher using a IceRpc.Builder.Internal.DispatcherBuilder. Returns Type Description IServiceCollection The service collection. AddIceRpcServer(IServiceCollection, string) Adds a Server to this service collection. Declaration public static IServiceCollection AddIceRpcServer(this IServiceCollection services, string optionsName) Parameters Type Name Description IServiceCollection services The service collection to add services to. string optionsName The name of the ServerOptions instance. Returns Type Description IServiceCollection The service collection. AddIceRpcServer(IServiceCollection) Adds a Server to this service collection. This method uses the default name (\"\") for the ServerOptions instance. Declaration public static IServiceCollection AddIceRpcServer(this IServiceCollection services) Parameters Type Name Description IServiceCollection services The service collection to add services to. Returns Type Description IServiceCollection The service collection."
  },
  "api/Microsoft.Extensions.DependencyInjection.IceRpcSliceServiceCollectionExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.IceRpcSliceServiceCollectionExtensions.html",
    "title": "Class IceRpcSliceServiceCollectionExtensions | IceRPC",
    "keywords": "Class IceRpcSliceServiceCollectionExtensions Extension methods for setting up IceRpc.Slice services in an Microsoft.Extensions.DependencyInjection.IServiceCollection. Inheritance object IceRpcSliceServiceCollectionExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Microsoft.Extensions.DependencyInjection Assembly: IceRpc.Extensions.DependencyInjection.dll Syntax public static class IceRpcSliceServiceCollectionExtensions Methods AddIceRpcProxy<T, TProxy>(IServiceCollection, ServiceAddress?) Adds a singleton for interface T. The implementation is a proxy generated by the Slice compiler. Declaration public static IServiceCollection AddIceRpcProxy<T, TProxy>(this IServiceCollection services, ServiceAddress? serviceAddress = null) where T : class where TProxy : IProxy, T, new() Parameters Type Name Description IServiceCollection services The service collection to add services to. ServiceAddress serviceAddress The service address of the proxy; null is equivalent to the default service address for the proxy type. Returns Type Description IServiceCollection The service collection. Type Parameters Name Description T The interface generated by the Slice compiler that the proxy implements. TProxy The proxy struct that implements T. AddIceRpcProxy<T, TProxy>(IServiceCollection, Uri) Adds a singleton for interface T. The implementation is a proxy generated by the Slice compiler. Declaration public static IServiceCollection AddIceRpcProxy<T, TProxy>(this IServiceCollection services, Uri serviceAddressUri) where T : class where TProxy : IProxy, T, new() Parameters Type Name Description IServiceCollection services The service collection to add services to. Uri serviceAddressUri The service address of the proxy as a URI. Returns Type Description IServiceCollection The service collection. Type Parameters Name Description T The interface generated by the Slice compiler that the proxy implements. TProxy The proxy struct that implements T."
  },
  "index.html": {
    "href": "index.html",
    "title": "IceRpc C# Docs | IceRPC",
    "keywords": "IceRpc C# Docs TODO"
  }
}